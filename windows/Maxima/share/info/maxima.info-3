This is maxima.info, produced by makeinfo version 5.2 from maxima.texi.

This is a Texinfo Maxima Manual

   Copyright 1994,2001 William F. Schelter

INFO-DIR-SECTION Math
START-INFO-DIR-ENTRY
* Maxima: (maxima).     A computer algebra system.
END-INFO-DIR-ENTRY


File: maxima.info,  Node: minpack,  Next: makeOrders,  Prev: lsquares,  Up: Top

67 minpack
**********

* Menu:

* Introduction to minpack::
* Functions and Variables for minpack::


File: maxima.info,  Node: Introduction to minpack

67.1 Introduction to minpack
============================

'Minpack' is a Common Lisp translation (via 'f2cl') of the Fortran
library MINPACK, as obtained from Netlib.


File: maxima.info,  Node: Functions and Variables for minpack

67.2 Functions and Variables for minpack
========================================

 -- Function: minpack_lsquares (<flist>, <varlist>, <guess> [,
          <tolerance>, <jacobian>])

     Compute the point that minimizes the sum of the squares of the
     functions in the list <flist>.  The variables are in the list
     <varlist>.  An initial guess of the optimum point must be provided
     in <guess>.

     The optional keyword arguments, <tolerance> and <jacobian> provide
     some control over the algorithm.  <tolerance> is the estimated
     relative error desired in the sum of squares.  <jacobian> can be
     used to specify the Jacobian.  If <jacobian> is not given or is
     'true' (the default), the Jacobian is computed from <flist>.  If
     <jacobian> is 'false', a numerical approximation is used.

     'minpack_lsquares' returns a list.  The first item is the estimated
     solution; the second is the sum of squares, and the third indicates
     the success of the algorithm.  The possible values are

     '0'
          improper input parameters.
     '1'
          algorithm estimates that the relative error in the sum of
          squares is at most 'tolerance'.
     '2'
          algorithm estimates that the relative error between x and the
          solution is at most 'tolerance'.
     '3'
          conditions for info = 1 and info = 2 both hold.
     '4'
          fvec is orthogonal to the columns of the jacobian to machine
          precision.
     '5'
          number of calls to fcn with iflag = 1 has reached 100*(n+1).
     '6'
          tol is too small.  no further reduction in the sum of squares
          is possible.
     '7'
          tol is too small.  no further improvement in the approximate
          solution x is possible.

          /* Problem 6: Powell singular function */
          (%i1) powell(x1,x2,x3,x4) :=
                   [x1+10*x2, sqrt(5)*(x3-x4), (x2-2*x3)^2,
                        sqrt(10)*(x1-x4)^2]$
          (%i2) minpack_lsquares(powell(x1,x2,x3,x4), [x1,x2,x3,x4],
                                 [3,-1,0,1]);
          (%o2) [[1.652117596168394e-17, - 1.652117596168393e-18,
                  2.643388153869468e-18, 2.643388153869468e-18],
                 6.109327859207777e-34, 4]

          /* Same problem but use numerical approximation to Jacobian */
          (%i3) minpack_lsquares(powell(x1,x2,x3,x4), [x1,x2,x3,x4],
                                 [3,-1,0,1], jacobian = false);
          (%o3) [[5.060282149485331e-11, - 5.060282149491206e-12,
                  2.179447843547218e-11, 2.179447843547218e-11],
                 3.534491794847031e-21, 5]

 -- Function: minpack_solve (<flist>, <varlist>, <guess> [, <tolerance>,
          <jacobian>])
     Solve a system of 'n' equations in 'n' unknowns.  The 'n' equations
     are given in the list <flist>, and the unknowns are in <varlist>.
     An initial guess of the solution must be provided in <guess>.

     The optional keyword arguments, <tolerance> and <jacobian> provide
     some control over the algorithm.  <tolerance> is the estimated
     relative error desired in the sum of squares.  <jacobian> can be
     used to specify the Jacobian.  If <jacobian> is not given or is
     'true' (the default), the Jacobian is computed from <flist>.  If
     <jacobian> is 'false', a numerical approximation is used.

     'minpack_solve' returns a list.  The first item is the estimated
     solution; the second is the sum of squares, and the third indicates
     the success of the algorithm.  The possible values are

     '0'
          improper input parameters.
     '1'
          algorithm estimates that the relative error in the solution is
          at most 'tolerance'.
     '2'
          number of calls to fcn with iflag = 1 has reached 100*(n+1).
     '3'
          tol is too small.  no further reduction in the sum of squares
          is possible.
     '4'
          Iteration is not making good progress.



File: maxima.info,  Node: makeOrders,  Next: mnewton,  Prev: minpack,  Up: Top

68 makeOrders
*************

* Menu:

* Functions and Variables for makeOrders::


File: maxima.info,  Node: Functions and Variables for makeOrders,  Prev: makeOrders,  Up: makeOrders

68.1 Functions and Variables for makeOrders
===========================================

 -- Function: makeOrders (<indvarlist>,<orderlist>)
     Returns a list of all powers for a polynomial up to and including
     the arguments.

          (%i1) load("makeOrders")$

          (%i2) makeOrders([a,b],[2,3]);
          (%o2) [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1],
                      [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3]]
          (%i3) expand((1+a+a^2)*(1+b+b^2+b^3));
                 2  3      3    3    2  2      2    2    2
          (%o3) a  b  + a b  + b  + a  b  + a b  + b  + a  b + a b
                                                            2
                                                     + b + a  + a + 1
     where '[0, 1]' is associated with the term b and '[2, 3]' with a^2
     b^3.

     To use this function write first 'load("makeOrders")'.


File: maxima.info,  Node: mnewton,  Next: numericalio,  Prev: makeOrders,  Up: Top

69 mnewton
**********

* Menu:

* Introduction to mnewton::
* Functions and Variables for mnewton::


File: maxima.info,  Node: Introduction to mnewton,  Next: Functions and Variables for mnewton,  Prev: mnewton,  Up: mnewton

69.1 Introduction to mnewton
============================

'mnewton' is an implementation of Newton's method for solving nonlinear
equations in one or more variables.


File: maxima.info,  Node: Functions and Variables for mnewton,  Prev: Introduction to mnewton,  Up: mnewton

69.2 Functions and Variables for mnewton
========================================

 -- Option variable: newtonepsilon
     Default value: '10.0^(-fpprec/2)'

     Precision to determine when the 'mnewton' function has converged
     towards the solution.  If 'newtonepsilon' is a bigfloat, then
     'mnewton' computations are done with bigfloats.  See also
     'mnewton'.

 -- Option variable: newtonmaxiter
     Default value: '50'

     Maximum number of iterations to stop the 'mnewton' function if it
     does not converge or if it converges too slowly.

     See also 'mnewton'.

 -- Function: mnewton (<FuncList>,<VarList>,<GuessList>)

     Multiple nonlinear functions solution using the Newton method.
     <FuncList> is the list of functions to solve, <VarList> is the list
     of variable names, and <GuessList> is the list of initial
     approximations.

     The solution is returned in the same format that 'solve()' returns.
     If the solution is not found, '[]' is returned.

     This function is controlled by global variables 'newtonepsilon' and
     'newtonmaxiter'.

          (%i1) load("mnewton")$

          (%i2) mnewton([x1+3*log(x1)-x2^2, 2*x1^2-x1*x2-5*x1+1],
                        [x1, x2], [5, 5]);
          (%o2) [[x1 = 3.756834008012769, x2 = 2.779849592817897]]
          (%i3) mnewton([2*a^a-5],[a],[1]);
          (%o3)             [[a = 1.70927556786144]]
          (%i4) mnewton([2*3^u-v/u-5, u+2^v-4], [u, v], [2, 2]);
          (%o4) [[u = 1.066618389595407, v = 1.552564766841786]]

     The variable 'newtonepsilon' controls the precision of the
     approximations.  It also controls if computations are performed
     with floats or bigfloats.

          (%i1) load(mnewton)$

          (%i2) (fpprec : 25, newtonepsilon : bfloat(10^(-fpprec+5)))$

          (%i3) mnewton([2*3^u-v/u-5, u+2^v-4], [u, v], [2, 2]);
          (%o3) [[u = 1.066618389595406772591173b0,
                                         v = 1.552564766841786450100418b0]]

     To use this function write first 'load("mnewton")'.  See also
     'newtonepsilon' and 'newtonmaxiter'.


File: maxima.info,  Node: numericalio,  Next: opsubst,  Prev: mnewton,  Up: Top

70 numericalio
**************

* Menu:

* Introduction to numericalio::
* Functions and Variables for plain-text input and output::
* Functions and Variables for binary input and output::


File: maxima.info,  Node: Introduction to numericalio,  Next: Functions and Variables for plain-text input and output,  Prev: numericalio,  Up: numericalio

70.1 Introduction to numericalio
================================

'numericalio' is a collection of functions to read and write files and
streams.  Functions for plain-text input and output can read and write
numbers (integer, float, or bigfloat), symbols, and strings.  Functions
for binary input and output can read and write only floating-point
numbers.

   If there already exists a list, matrix, or array object to store
input data, 'numericalio' input functions can write data into that
object.  Otherwise, 'numericalio' can guess, to some degree, the
structure of an object to store the data, and return that object.

70.1.1 Plain-text input and output
----------------------------------

In plain-text input and output, it is assumed that each item to read or
write is an atom: an integer, float, bigfloat, string, or symbol, and
not a rational or complex number or any other kind of nonatomic
expression.  The 'numericalio' functions may attempt to do something
sensible faced with nonatomic expressions, but the results are not
specified here and subject to change.

   Atoms in both input and output files have the same format as in
Maxima batch files or the interactive console.  In particular, strings
are enclosed in double quotes, backslash '\' prevents any special
interpretation of the next character, and the question mark '?' is
recognized at the beginning of a symbol to mean a Lisp symbol (as
opposed to a Maxima symbol).  No continuation character (to join broken
lines) is recognized.

70.1.2 Separator flag values for input
--------------------------------------

The functions for plain-text input and output take an optional argument,
<separator_flag>, that tells what character separates data.

   For plain-text input, these values of <separator_flag> are
recognized: 'comma' for comma separated values, 'pipe' for values
separated by the vertical bar character '|', 'semicolon' for values
separated by semicolon ';', and 'space' for values separated by space or
tab characters.  If the file name ends in '.csv' and <separator_flag> is
not specified, 'comma' is assumed.  If the file name ends in something
other than '.csv' and 'separator_flag' is not specified, 'space' is
assumed.

   In plain-text input, multiple successive space and tab characters
count as a single separator.  However, multiple comma, pipe, or
semicolon characters are significant.  Successive comma, pipe, or
semicolon characters (with or without intervening spaces or tabs) are
considered to have 'false' between the separators.  For example,
'1234,,Foo' is treated the same as '1234,false,Foo'.

70.1.3 Separator flag values for output
---------------------------------------

For plain-text output, 'tab', for values separated by the tab character,
is recognized as a value of <separator_flag>, as well as 'comma',
'pipe', 'semicolon', and 'space'.

   In plain-text output, 'false' atoms are written as such; a list
'[1234, false, Foo]' is written '1234,false,Foo', and there is no
attempt to collapse the output to '1234,,Foo'.

70.1.4 Binary floating-point input and output
---------------------------------------------

'numericalio' functions can read and write 8-byte IEEE 754
floating-point numbers.  These numbers can be stored either least
significant byte first or most significant byte first, according to the
global flag set by 'assume_external_byte_order'.  If not specified,
'numericalio' assumes the external byte order is most-significant byte
first.

   Other kinds of numbers are coerced to 8-byte floats; 'numericalio'
cannot read or write binary non-numeric data.

   Some Lisp implementations do not recognize IEEE 754 special values
(positive and negative infinity, not-a-number values, denormalized
values).  The effect of reading such values with 'numericalio' is
undefined.

   'numericalio' includes functions to open a stream for reading or
writing a stream of bytes.


File: maxima.info,  Node: Functions and Variables for plain-text input and output,  Next: Functions and Variables for binary input and output,  Prev: Introduction to numericalio,  Up: numericalio

70.2 Functions and Variables for plain-text input and output
============================================================

 -- Function: read_matrix
          read_matrix (<S>)
          read_matrix (<S>, <M>)
          read_matrix (<S>, <separator_flag>)
          read_matrix (<S>, <M>, <separator_flag>)

     'read_matrix(<S>)' reads the source <S> and returns its entire
     content as a matrix.  The size of the matrix is inferred from the
     input data; each line of the file becomes one row of the matrix.
     If some lines have different lengths, 'read_matrix' complains.

     'read_matrix(<S>, <M>)' read the source <S> into the matrix <M>,
     until <M> is full or the source is exhausted.  Input data are read
     into the matrix in row-major order; the input need not have the
     same number of rows and columns as <M>.

     The source <S> may be a file name or a stream.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', and 'space'.  If <separator_flag> is not specified,
     the file is assumed space-delimited.

 -- Function: read_array
          read_array (<S>, <A>)
          read_array (<S>, <A>, <separator_flag>)

     Reads the source <S> into the array <A>, until <A> is full or the
     source is exhausted.  Input data are read into the array in
     row-major order; the input need not conform to the dimensions of
     <A>.

     The source <S> may be a file name or a stream.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', and 'space'.  If <separator_flag> is not specified,
     the file is assumed space-delimited.

 -- Function: read_hashed_array
          read_hashed_array (<S>, <A>)
          read_hashed_array (<S>, <A>, <separator_flag>)

     Reads the source <S> and returns its entire content as a hashed
     array.  The source <S> may be a file name or a stream.

     'read_hashed_array' treats the first item on each line as a hash
     key, and associates the remainder of the line (as a list) with the
     key.  For example, the line '567 12 17 32 55' is equivalent to
     'A[567]: [12, 17, 32, 55]$'.  Lines need not have the same numbers
     of elements.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', and 'space'.  If <separator_flag> is not specified,
     the file is assumed space-delimited.

 -- Function: read_nested_list
          read_nested_list (<S>)
          read_nested_list (<S>, <separator_flag>)

     Reads the source <S> and returns its entire content as a nested
     list.  The source <S> may be a file name or a stream.

     'read_nested_list' returns a list which has a sublist for each line
     of input.  Lines need not have the same numbers of elements.  Empty
     lines are not ignored: an empty line yields an empty sublist.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', and 'space'.  If <separator_flag> is not specified,
     the file is assumed space-delimited.

 -- Function: read_list
          read_list (<S>)
          read_list (<S>, <L>)
          read_list (<S>, <separator_flag>)
          read_list (<S>, <L>, <separator_flag>)

     'read_list(<S>)' reads the source <S> and returns its entire
     content as a flat list.

     'read_list(<S>, <L>)' reads the source <S> into the list <L>, until
     <L> is full or the source is exhausted.

     The source <S> may be a file name or a stream.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', and 'space'.  If <separator_flag> is not specified,
     the file is assumed space-delimited.

 -- Function: write_data
          write_data (<X>, <D>)
          write_data (<X>, <D>, <separator_flag>)

     Writes the object <X> to the destination <D>.

     'write_data' writes a matrix in row-major order, with one line per
     row.

     'write_data' writes an array created by 'array' or 'make_array' in
     row-major order, with a new line at the end of every slab.
     Higher-dimensional slabs are separated by additional new lines.

     'write_data' writes a hashed array with each key followed by its
     associated list on one line.

     'write_data' writes a nested list with each sublist on one line.

     'write_data' writes a flat list all on one line.

     The destination <D> may be a file name or a stream.  When the
     destination is a file name, the global variable
     'file_output_append' governs whether the output file is appended or
     truncated.  When the destination is a stream, no special action is
     taken by 'write_data' after all the data are written; in
     particular, the stream remains open.

     The recognized values of <separator_flag> are 'comma', 'pipe',
     'semicolon', 'space', and 'tab'.  If <separator_flag> is not
     specified, the file is assumed space-delimited.


File: maxima.info,  Node: Functions and Variables for binary input and output,  Prev: Functions and Variables for plain-text input and output,  Up: numericalio

70.3 Functions and Variables for binary input and output
========================================================

 -- Function: assume_external_byte_order (<byte_order_flag>)
     Tells 'numericalio' the byte order for reading and writing binary
     data.  Two values of <byte_order_flag> are recognized: 'lsb' which
     indicates least-significant byte first, also called little-endian
     byte order; and 'msb' which indicates most-significant byte first,
     also called big-endian byte order.

     If not specified, 'numericalio' assumes the external byte order is
     most-significant byte first.

 -- Function: openr_binary (<file_name>)
     Returns an input stream of 8-bit unsigned bytes to read the file
     named by <file_name>.

 -- Function: openw_binary (<file_name>)
     Returns an output stream of 8-bit unsigned bytes to write the file
     named by <file_name>.

 -- Function: opena_binary (<file_name>)
     Returns an output stream of 8-bit unsigned bytes to append the file
     named by <file_name>.

 -- Function: read_binary_matrix (<S>, <M>)
     Reads binary 8-byte floating point numbers from the source <S> into
     the matrix <M> until <M> is full, or the source is exhausted.
     Elements of <M> are read in row-major order.

     The source <S> may be a file name or a stream.

     The byte order in elements of the source is specified by
     'assume_external_byte_order'.

 -- Function: read_binary_array (<S>, <A>)
     Reads binary 8-byte floating point numbers from the source <S> into
     the array <A> until <A> is full, or the source is exhausted.  <A>
     must be an array created by 'array' or 'make_array'.  Elements of
     <A> are read in row-major order.

     The source <S> may be a file name or a stream.

     The byte order in elements of the source is specified by
     'assume_external_byte_order'.

 -- Function: read_binary_list
          read_binary_list (<S>)
          read_binary_list (<S>, <L>)

     'read_binary_list(<S>)' reads the entire content of the source <S>
     as a sequence of binary 8-byte floating point numbers, and returns
     it as a list.  The source <S> may be a file name or a stream.

     'read_binary_list(<S>, <L>)' reads 8-byte binary floating point
     numbers from the source <S> until the list <L> is full, or the
     source is exhausted.

     The byte order in elements of the source is specified by
     'assume_external_byte_order'.

 -- Function: write_binary_data (<X>, <D>)

     Writes the object <X>, comprising binary 8-byte IEEE 754
     floating-point numbers, to the destination <D>.  Other kinds of
     numbers are coerced to 8-byte floats.  'write_binary_data' cannot
     write non-numeric data.

     The object <X> may be a list, a nested list, a matrix, or an array
     created by 'array' or 'make_array'; <X> cannot be an undeclared
     array or any other type of object.  'write_binary_data' writes
     nested lists, matrices, and arrays in row-major order.

     The destination <D> may be a file name or a stream.  When the
     destination is a file name, the global variable
     'file_output_append' governs whether the output file is appended or
     truncated.  When the destination is a stream, no special action is
     taken by 'write_binary_data' after all the data are written; in
     particular, the stream remains open.

     The byte order in elements of the destination is specified by
     'assume_external_byte_order'.


File: maxima.info,  Node: opsubst,  Next: orthopoly,  Prev: numericalio,  Up: Top

71 opsubst
**********

* Menu:

* Functions and Variables for opsubst::


File: maxima.info,  Node: Functions and Variables for opsubst,  Prev: opsubst,  Up: opsubst

71.1 Functions and Variables for opsubst
========================================

 -- Function: opsubst
          opsubst (<f>,<g>,<e>)
          opsubst (<g>=<f>,<e>)
          opsubst ([<g1>=<f1>,<g2>=<f2>,..., <gn>=<fn>],<e>)
     The function 'opsubst' is similar to the function 'subst', except
     that 'opsubst' only makes substitutions for the operators in an
     expression.  In general, When <f> is an operator in the expression
     <e>, substitute <g> for <f> in the expression <e>.

     To determine the operator, 'opsubst' sets 'inflag' to true.  This
     means 'opsubst' substitutes for the internal, not the displayed,
     operator in the expression.

     Examples:
          (%i1) load (opsubst)$

          (%i2) opsubst(f,g,g(g(x)));
          (%o2)                     f(f(x))
          (%i3) opsubst(f,g,g(g));
          (%o3)                       f(g)
          (%i4) opsubst(f,g[x],g[x](z));
          (%o4)                       f(z)
          (%i5) opsubst(g[x],f, f(z));
          (%o5)                      g (z)
                                      x
          (%i6) opsubst(tan, sin, sin(sin));
          (%o6)                     tan(sin)
          (%i7) opsubst([f=g,g=h],f(x));
          (%o7)                       h(x)

     Internally, Maxima does not use the unary negation, division, or
     the subtraction operators; thus:
          (%i8) opsubst("+","-",a-b);
          (%o8)                     a - b
          (%i9) opsubst("f","-",-a);
          (%o9)                      - a
          (%i10) opsubst("^^","/",a/b);
                                       a
          (%o10)                       -
                                       b

     The internal representation of -a*b is *(-1,a,b); thus
          (%i11) opsubst("[","*", -a*b);
          (%o11)                  [- 1, a, b]

     When either operator isn't a Maxima symbol, generally some other
     function will signal an error:
          (%i12) opsubst(a+b,f, f(x));

          Improper name or value in functional position:
          b + a
           -- an error.  Quitting.  To debug this try debugmode(true);

     However, subscripted operators are allowed:
          (%i13) opsubst(g[5],f, f(x));
          (%o13)                     g (x)
                                      5

     To use this function write first 'load("opsubst")'.


File: maxima.info,  Node: orthopoly,  Next: romberg,  Prev: opsubst,  Up: Top

72 orthopoly
************

* Menu:

* Introduction to orthogonal polynomials::
* Functions and Variables for orthogonal polynomials::


File: maxima.info,  Node: Introduction to orthogonal polynomials,  Next: Functions and Variables for orthogonal polynomials,  Prev: orthopoly,  Up: orthopoly

72.1 Introduction to orthogonal polynomials
===========================================

'orthopoly' is a package for symbolic and numerical evaluation of
several kinds of orthogonal polynomials, including Chebyshev, Laguerre,
Hermite, Jacobi, Legendre, and ultraspherical (Gegenbauer) polynomials.
Additionally, 'orthopoly' includes support for the spherical Bessel,
spherical Hankel, and spherical harmonic functions.

   For the most part, 'orthopoly' follows the conventions of Abramowitz
and Stegun Handbook of Mathematical Functions, Chapter 22 (10th
printing, December 1972); additionally, we use Gradshteyn and Ryzhik,
Table of Integrals, Series, and Products (1980 corrected and enlarged
edition), and Eugen Merzbacher Quantum Mechanics (2nd edition, 1970).

   Barton Willis of the University of Nebraska at Kearney (UNK) wrote
the 'orthopoly' package and its documentation.  The package is released
under the GNU General Public License (GPL).

72.1.1 Getting Started with orthopoly
-------------------------------------

'load (orthopoly)' loads the 'orthopoly' package.

   To find the third-order Legendre polynomial,

     (%i1) legendre_p (3, x);
                           3             2
                  5 (1 - x)    15 (1 - x)
     (%o1)      - ---------- + ----------- - 6 (1 - x) + 1
                      2             2

   To express this as a sum of powers of <x>, apply <ratsimp> or <rat>
to the result.

     (%i2) [ratsimp (%), rat (%)];
                             3           3
                          5 x  - 3 x  5 x  - 3 x
     (%o2)/R/            [----------, ----------]
                              2           2

   Alternatively, make the second argument to 'legendre_p' (its "main"
variable) a canonical rational expression (CRE).

     (%i1) legendre_p (3, rat (x));
                                   3
                                5 x  - 3 x
     (%o1)/R/                   ----------
                                    2

   For floating point evaluation, 'orthopoly' uses a running error
analysis to estimate an upper bound for the error.  For example,

     (%i1) jacobi_p (150, 2, 3, 0.2);
     (%o1) interval(- 0.062017037936715, 1.533267919277521E-11)

   Intervals have the form 'interval (<c>, <r>)', where <c> is the
center and <r> is the radius of the interval.  Since Maxima does not
support arithmetic on intervals, in some situations, such as graphics,
you want to suppress the error and output only the center of the
interval.  To do this, set the option variable
'orthopoly_returns_intervals' to 'false'.

     (%i1) orthopoly_returns_intervals : false;
     (%o1)                         false
     (%i2) jacobi_p (150, 2, 3, 0.2);
     (%o2)                  - 0.062017037936715

   Refer to the section *note Floating point Evaluation:: for more
information.

   Most functions in 'orthopoly' have a 'gradef' property; thus

     (%i1) diff (hermite (n, x), x);
     (%o1)                     2 n H     (x)
                                    n - 1
     (%i2) diff (gen_laguerre (n, a, x), x);
                   (a)               (a)
                n L   (x) - (n + a) L     (x) unit_step(n)
                   n                 n - 1
     (%o2)      ------------------------------------------
                                    x

   The unit step function in the second example prevents an error that
would otherwise arise by evaluating with <n> equal to 0.

     (%i3) ev (%, n = 0);
     (%o3)                           0

   The 'gradef' property only applies to the "main" variable;
derivatives with respect other arguments usually result in an error
message; for example

     (%i1) diff (hermite (n, x), x);
     (%o1)                     2 n H     (x)
                                    n - 1
     (%i2) diff (hermite (n, x), n);

     Maxima doesn't know the derivative of hermite with respect the first
     argument
      -- an error.  Quitting.  To debug this try debugmode(true);

   Generally, functions in 'orthopoly' map over lists and matrices.  For
the mapping to fully evaluate, the option variables 'doallmxops' and
'listarith' must both be 'true' (the defaults).  To illustrate the
mapping over matrices, consider

     (%i1) hermite (2, x);
                                          2
     (%o1)                    - 2 (1 - 2 x )
     (%i2) m : matrix ([0, x], [y, 0]);
                                 [ 0  x ]
     (%o2)                       [      ]
                                 [ y  0 ]
     (%i3) hermite (2, m);
                    [                             2  ]
                    [      - 2        - 2 (1 - 2 x ) ]
     (%o3)          [                                ]
                    [             2                  ]
                    [ - 2 (1 - 2 y )       - 2       ]

   In the second example, the 'i, j' element of the value is 'hermite
(2, m[i,j])'; this is not the same as computing '-2 + 4 m . m', as seen
in the next example.

     (%i4) -2 * matrix ([1, 0], [0, 1]) + 4 * m . m;
                         [ 4 x y - 2      0     ]
     (%o4)               [                      ]
                         [     0      4 x y - 2 ]

   If you evaluate a function at a point outside its domain, generally
'orthopoly' returns the function unevaluated.  For example,

     (%i1) legendre_p (2/3, x);
     (%o1)                        P   (x)
                                   2/3

   'orthopoly' supports translation into TeX; it also does
two-dimensional output on a terminal.

     (%i1) spherical_harmonic (l, m, theta, phi);
                               m
     (%o1)                    Y (theta, phi)
                               l
     (%i2) tex (%);
     $$Y_{l}^{m}\left(\vartheta,\varphi\right)$$
     (%o2)                         false
     (%i3) jacobi_p (n, a, a - b, x/2);
                               (a, a - b) x
     (%o3)                    P          (-)
                               n          2
     (%i4) tex (%);
     $$P_{n}^{\left(a,a-b\right)}\left({{x}\over{2}}\right)$$
     (%o4)                         false

72.1.2 Limitations
------------------

When an expression involves several orthogonal polynomials with symbolic
orders, it's possible that the expression actually vanishes, yet Maxima
is unable to simplify it to zero.  If you divide by such a quantity,
you'll be in trouble.  For example, the following expression vanishes
for integers <n> greater than 1, yet Maxima is unable to simplify it to
zero.

     (%i1) (2*n - 1) * legendre_p (n - 1, x) * x - n * legendre_p (n, x)
           + (1 - n) * legendre_p (n - 2, x);
     (%o1)  (2 n - 1) P     (x) x - n P (x) + (1 - n) P     (x)
                       n - 1           n               n - 2

   For a specific <n>, we can reduce the expression to zero.

     (%i2) ev (% ,n = 10, ratsimp);
     (%o2)                           0

   Generally, the polynomial form of an orthogonal polynomial is
ill-suited for floating point evaluation.  Here's an example.

     (%i1) p : jacobi_p (100, 2, 3, x)$

     (%i2) subst (0.2, x, p);
     (%o2)                3.4442767023833592E+35
     (%i3) jacobi_p (100, 2, 3, 0.2);
     (%o3)  interval(0.18413609135169, 6.8990300925815987E-12)
     (%i4) float(jacobi_p (100, 2, 3, 2/10));
     (%o4)                   0.18413609135169

   The true value is about 0.184; this calculation suffers from extreme
subtractive cancellation error.  Expanding the polynomial and then
evaluating, gives a better result.
     (%i5) p : expand(p)$
     (%i6) subst (0.2, x, p);
     (%o6) 0.18413609766122982

   This isn't a general rule; expanding the polynomial does not always
result in an expression that is better suited for numerical evaluation.
By far, the best way to do numerical evaluation is to make one or more
of the function arguments floating point numbers.  By doing that,
specialized floating point algorithms are used for evaluation.

   Maxima's 'float' function is somewhat indiscriminate; if you apply
'float' to an expression involving an orthogonal polynomial with a
symbolic degree or order parameter, these parameters may be converted
into floats; after that, the expression will not evaluate fully.
Consider

     (%i1) assoc_legendre_p (n, 1, x);
                                    1
     (%o1)                         P (x)
                                    n
     (%i2) float (%);
                                   1.0
     (%o2)                        P   (x)
                                   n
     (%i3) ev (%, n=2, x=0.9);
                                  1.0
     (%o3)                       P   (0.9)
                                  2

   The expression in (%o3) will not evaluate to a float; 'orthopoly'
doesn't recognize floating point values where it requires an integer.
Similarly, numerical evaluation of the 'pochhammer' function for orders
that exceed 'pochhammer_max_index' can be troublesome; consider

     (%i1) x :  pochhammer (1, 10), pochhammer_max_index : 5;
     (%o1)                         (1)
                                      10

   Applying 'float' doesn't evaluate <x> to a float

     (%i2) float (x);
     (%o2)                       (1.0)
                                      10.0

   To evaluate <x> to a float, you'll need to bind
'pochhammer_max_index' to 11 or greater and apply 'float' to <x>.

     (%i3) float (x), pochhammer_max_index : 11;
     (%o3)                       3628800.0

   The default value of 'pochhammer_max_index' is 100; change its value
after loading 'orthopoly'.

   Finally, be aware that reference books vary on the definitions of the
orthogonal polynomials; we've generally used the conventions of
conventions of Abramowitz and Stegun.

   Before you suspect a bug in orthopoly, check some special cases to
determine if your definitions match those used by 'orthopoly'.
Definitions often differ by a normalization; occasionally, authors use
"shifted" versions of the functions that makes the family orthogonal on
an interval other than (-1, 1).  To define, for example, a Legendre
polynomial that is orthogonal on (0, 1), define

     (%i1) shifted_legendre_p (n, x) := legendre_p (n, 2*x - 1)$

     (%i2) shifted_legendre_p (2, rat (x));
                                 2
     (%o2)/R/                 6 x  - 6 x + 1
     (%i3) legendre_p (2, rat (x));
                                    2
                                 3 x  - 1
     (%o3)/R/                    --------
                                    2

72.1.3 Floating point Evaluation
--------------------------------

Most functions in 'orthopoly' use a running error analysis to estimate
the error in floating point evaluation; the exceptions are the spherical
Bessel functions and the associated Legendre polynomials of the second
kind.  For numerical evaluation, the spherical Bessel functions call
SLATEC functions.  No specialized method is used for numerical
evaluation of the associated Legendre polynomials of the second kind.

   The running error analysis ignores errors that are second or higher
order in the machine epsilon (also known as unit roundoff).  It also
ignores a few other errors.  It's possible (although unlikely) that the
actual error exceeds the estimate.

   Intervals have the form 'interval (<c>, <r>)', where <c> is the
center of the interval and <r> is its radius.  The center of an interval
can be a complex number, and the radius is always a positive real
number.

   Here is an example.

     (%i1) fpprec : 50$

     (%i2) y0 : jacobi_p (100, 2, 3, 0.2);
     (%o2) interval(0.1841360913516871, 6.8990300925815987E-12)
     (%i3) y1 : bfloat (jacobi_p (100, 2, 3, 1/5));
     (%o3) 1.8413609135168563091370224958913493690868904463668b-1

   Let's test that the actual error is smaller than the error estimate

     (%i4) is (abs (part (y0, 1) - y1) < part (y0, 2));
     (%o4)                         true

   Indeed, for this example the error estimate is an upper bound for the
true error.

   Maxima does not support arithmetic on intervals.

     (%i1) legendre_p (7, 0.1) + legendre_p (8, 0.1);
     (%o1) interval(0.18032072148437508, 3.1477135311021797E-15)
             + interval(- 0.19949294375000004, 3.3769353084291579E-15)

   A user could define arithmetic operators that do interval math.  To
define interval addition, we can define

     (%i1) infix ("@+")$

     (%i2) "@+"(x,y) := interval (part (x, 1) + part (y, 1), part (x, 2)
           + part (y, 2))$

     (%i3) legendre_p (7, 0.1) @+ legendre_p (8, 0.1);
     (%o3) interval(- 0.019172222265624955, 6.5246488395313372E-15)

   The special floating point routines get called when the arguments are
complex.  For example,

     (%i1) legendre_p (10, 2 + 3.0*%i);
     (%o1) interval(- 3.876378825E+7 %i - 6.0787748E+7,
                                                1.2089173052721777E-6)

   Let's compare this to the true value.

     (%i1) float (expand (legendre_p (10, 2 + 3*%i)));
     (%o1)          - 3.876378825E+7 %i - 6.0787748E+7

   Additionally, when the arguments are big floats, the special floating
point routines get called; however, the big floats are converted into
double floats and the final result is a double.

     (%i1) ultraspherical (150, 0.5b0, 0.9b0);
     (%o1) interval(- 0.043009481257265, 3.3750051301228864E-14)

72.1.4 Graphics and 'orthopoly'
-------------------------------

To plot expressions that involve the orthogonal polynomials, you must do
two things:
  1. Set the option variable 'orthopoly_returns_intervals' to 'false',
  2. Quote any calls to 'orthopoly' functions.
   If function calls aren't quoted, Maxima evaluates them to polynomials
before plotting; consequently, the specialized floating point code
doesn't get called.  Here is an example of how to plot an expression
that involves a Legendre polynomial.

     (%i1) plot2d ('(legendre_p (5, x)), [x, 0, 1]),
                             orthopoly_returns_intervals : false;
     (%o1)

   The entire expression 'legendre_p (5, x)' is quoted; this is
different than just quoting the function name using ''legendre_p (5,
<x>)'.

72.1.5 Miscellaneous Functions
------------------------------

The 'orthopoly' package defines the Pochhammer symbol and a unit step
function.  'orthopoly' uses the Kronecker delta function and the unit
step function in 'gradef' statements.

   To convert Pochhammer symbols into quotients of gamma functions, use
'makegamma'.

     (%i1) makegamma (pochhammer (x, n));
                               gamma(x + n)
     (%o1)                     ------------
                                 gamma(x)
     (%i2) makegamma (pochhammer (1/2, 1/2));
                                     1
     (%o2)                       ---------
                                 sqrt(%pi)

   Derivatives of the Pochhammer symbol are given in terms of the 'psi'
function.

     (%i1) diff (pochhammer (x, n), x);
     (%o1)             (x)  (psi (x + n) - psi (x))
                          n     0             0
     (%i2) diff (pochhammer (x, n), n);
     (%o2)                   (x)  psi (x + n)
                                n    0

   You need to be careful with the expression in (%o1); the difference
of the 'psi' functions has polynomials when '<x> = -1, -2, .., -<n>'.
These polynomials cancel with factors in 'pochhammer (<x>, <n>)' making
the derivative a degree '<n> - 1' polynomial when <n> is a positive
integer.

   The Pochhammer symbol is defined for negative orders through its
representation as a quotient of gamma functions.  Consider

     (%i1) q : makegamma (pochhammer (x, n));
                               gamma(x + n)
     (%o1)                     ------------
                                 gamma(x)
     (%i2) sublis ([x=11/3, n= -6], q);
                                    729
     (%o2)                        - ----
                                    2240

   Alternatively, we can get this result directly.

     (%i1) pochhammer (11/3, -6);
                                    729
     (%o1)                        - ----
                                    2240

   The unit step function is left-continuous; thus

     (%i1) [unit_step (-1/10), unit_step (0), unit_step (1/10)];
     (%o1)                       [0, 0, 1]

   If you need a unit step function that is neither left or right
continuous at zero, define your own using 'signum'; for example,

     (%i1) xunit_step (x) := (1 + signum (x))/2$

     (%i2) [xunit_step (-1/10), xunit_step (0), xunit_step (1/10)];
                                     1
     (%o2)                       [0, -, 1]
                                     2

   Do not redefine 'unit_step' itself; some code in 'orthopoly' requires
that the unit step function be left-continuous.

72.1.6 Algorithms
-----------------

Generally, 'orthopoly' does symbolic evaluation by using a hypergeometic
representation of the orthogonal polynomials.  The hypergeometic
functions are evaluated using the (undocumented) functions 'hypergeo11'
and 'hypergeo21'.  The exceptions are the half-integer Bessel functions
and the associated Legendre function of the second kind.  The
half-integer Bessel functions are evaluated using an explicit
representation, and the associated Legendre function of the second kind
is evaluated using recursion.

   For floating point evaluation, we again convert most functions into a
hypergeometic form; we evaluate the hypergeometic functions using
forward recursion.  Again, the exceptions are the half-integer Bessel
functions and the associated Legendre function of the second kind.
Numerically, the half-integer Bessel functions are evaluated using the
SLATEC code.


File: maxima.info,  Node: Functions and Variables for orthogonal polynomials,  Prev: Introduction to orthogonal polynomials,  Up: orthopoly

72.2 Functions and Variables for orthogonal polynomials
=======================================================

 -- Function: assoc_legendre_p (<n>, <m>, <x>)
     The associated Legendre function of the first kind of degree <n>
     and order <m>.

     Reference: Abramowitz and Stegun, equations 22.5.37, page 779,
     8.6.6 (second equation), page 334, and 8.2.5, page 333.

 -- Function: assoc_legendre_q (<n>, <m>, <x>)
     The associated Legendre function of the second kind of degree <n>
     and order <m>.

     Reference: Abramowitz and Stegun, equation 8.5.3 and 8.1.8.

 -- Function: chebyshev_t (<n>, <x>)
     The Chebyshev polynomial of the first kind of degree <n>.

     Reference: Abramowitz and Stegun, equation 22.5.47, page 779.

 -- Function: chebyshev_u (<n>, <x>)
     The Chebyshev polynomial of the second kind of degree <n>.

     Reference: Abramowitz and Stegun, equation 22.5.48, page 779.

 -- Function: gen_laguerre (<n>, <a>, <x>)
     The generalized Laguerre polynomial of degree <n>.

     Reference: Abramowitz and Stegun, equation 22.5.54, page 780.

 -- Function: hermite (<n>, <x>)
     The Hermite polynomial of degree <n>.

     Reference: Abramowitz and Stegun, equation 22.5.55, page 780.

 -- Function: intervalp (<e>)
     Return 'true' if the input is an interval and return false if it
     isn't.

 -- Function: jacobi_p (<n>, <a>, <b>, <x>)
     The Jacobi polynomial.

     The Jacobi polynomials are actually defined for all <a> and <b>;
     however, the Jacobi polynomial weight '(1 - <x>)^<a> (1 + <x>)^<b>'
     isn't integrable for '<a> <= -1' or '<b> <= -1'.

     Reference: Abramowitz and Stegun, equation 22.5.42, page 779.

 -- Function: laguerre (<n>, <x>)
     The Laguerre polynomial of degree <n>.

     Reference: Abramowitz and Stegun, equations 22.5.16 and 22.5.54,
     page 780.

 -- Function: legendre_p (<n>, <x>)
     The Legendre polynomial of the first kind of degree <n>.

     Reference: Abramowitz and Stegun, equations 22.5.50 and 22.5.51,
     page 779.

 -- Function: legendre_q (<n>, <x>)
     The Legendre function of the second kind of degree <n>.

     Reference: Abramowitz and Stegun, equations 8.5.3 and 8.1.8.

 -- Function: orthopoly_recur (<f>, <args>)
     Returns a recursion relation for the orthogonal function family <f>
     with arguments <args>.  The recursion is with respect to the
     polynomial degree.

          (%i1) orthopoly_recur (legendre_p, [n, x]);
                              (2 n + 1) P (x) x - n P     (x)
                                         n           n - 1
          (%o1)   P     (x) = -------------------------------
                   n + 1                   n + 1

     The second argument to 'orthopoly_recur' must be a list with the
     correct number of arguments for the function <f>; if it isn't,
     Maxima signals an error.

          (%i1) orthopoly_recur (jacobi_p, [n, x]);

          Function jacobi_p needs 4 arguments, instead it received 2
           -- an error.  Quitting.  To debug this try debugmode(true);

     Additionally, when <f> isn't the name of one of the families of
     orthogonal polynomials, an error is signalled.

          (%i1) orthopoly_recur (foo, [n, x]);

          A recursion relation for foo isn't known to Maxima
           -- an error.  Quitting.  To debug this try debugmode(true);

 -- Variable: orthopoly_returns_intervals
     Default value: 'true'

     When 'orthopoly_returns_intervals' is 'true', floating point
     results are returned in the form 'interval (<c>, <r>)', where <c>
     is the center of an interval and <r> is its radius.  The center can
     be a complex number; in that case, the interval is a disk in the
     complex plane.

 -- Function: orthopoly_weight (<f>, <args>)

     Returns a three element list; the first element is the formula of
     the weight for the orthogonal polynomial family <f> with arguments
     given by the list <args>; the second and third elements give the
     lower and upper endpoints of the interval of orthogonality.  For
     example,

          (%i1) w : orthopoly_weight (hermite, [n, x]);
                                      2
                                   - x
          (%o1)                 [%e    , - inf, inf]
          (%i2) integrate(w[1]*hermite(3, x)*hermite(2, x), x, w[2], w[3]);
          (%o2)                           0

     The main variable of <f> must be a symbol; if it isn't, Maxima
     signals an error.

 -- Function: pochhammer (<x>, <n>)
     The Pochhammer symbol.  For nonnegative integers <n> with '<n> <=
     pochhammer_max_index', the expression 'pochhammer (<x>, <n>)'
     evaluates to the product '<x> (<x> + 1) (<x> + 2) ... (<x> + n -
     1)' when '<n> > 0' and to 1 when '<n> = 0'.  For negative <n>,
     'pochhammer (<x>, <n>)' is defined as '(-1)^<n> / pochhammer (1 -
     <x>, -<n>)'.  Thus

          (%i1) pochhammer (x, 3);
          (%o1)                   x (x + 1) (x + 2)
          (%i2) pochhammer (x, -3);
                                           1
          (%o2)               - -----------------------
                                (1 - x) (2 - x) (3 - x)

     To convert a Pochhammer symbol into a quotient of gamma functions,
     (see Abramowitz and Stegun, equation 6.1.22) use 'makegamma'; for
     example

          (%i1) makegamma (pochhammer (x, n));
                                    gamma(x + n)
          (%o1)                     ------------
                                      gamma(x)

     When <n> exceeds 'pochhammer_max_index' or when <n> is symbolic,
     'pochhammer' returns a noun form.

          (%i1) pochhammer (x, n);
          (%o1)                         (x)
                                           n

 -- Variable: pochhammer_max_index
     Default value: 100

     'pochhammer (<n>, <x>)' expands to a product if and only if '<n> <=
     pochhammer_max_index'.

     Examples:

          (%i1) pochhammer (x, 3), pochhammer_max_index : 3;
          (%o1)                   x (x + 1) (x + 2)
          (%i2) pochhammer (x, 4), pochhammer_max_index : 3;
          (%o2)                         (x)
                                           4

     Reference: Abramowitz and Stegun, equation 6.1.16, page 256.

 -- Function: spherical_bessel_j (<n>, <x>)
     The spherical Bessel function of the first kind.

     Reference: Abramowitz and Stegun, equations 10.1.8, page 437 and
     10.1.15, page 439.

 -- Function: spherical_bessel_y (<n>, <x>)
     The spherical Bessel function of the second kind.

     Reference: Abramowitz and Stegun, equations 10.1.9, page 437 and
     10.1.15, page 439.

 -- Function: spherical_hankel1 (<n>, <x>)
     The spherical Hankel function of the first kind.

     Reference: Abramowitz and Stegun, equation 10.1.36, page 439.

 -- Function: spherical_hankel2 (<n>, <x>)
     The spherical Hankel function of the second kind.

     Reference: Abramowitz and Stegun, equation 10.1.17, page 439.

 -- Function: spherical_harmonic (<n>, <m>, <x>, <y>)
     The spherical harmonic function.

     Reference: Merzbacher 9.64.

 -- Function: unit_step (<x>)
     The left-continuous unit step function; thus 'unit_step (<x>)'
     vanishes for '<x> <= 0' and equals 1 for '<x> > 0'.

     If you want a unit step function that takes on the value 1/2 at
     zero, use '(1 + signum (<x>))/2'.

 -- Function: ultraspherical (<n>, <a>, <x>)
     The ultraspherical polynomial (also known as the Gegenbauer
     polynomial).

     Reference: Abramowitz and Stegun, equation 22.5.46, page 779.


File: maxima.info,  Node: romberg,  Next: simplex,  Prev: orthopoly,  Up: Top

73 romberg
**********

* Menu:

* Functions and Variables for romberg::


File: maxima.info,  Node: Functions and Variables for romberg,  Prev: Top,  Up: Top

73.1 Functions and Variables for romberg
========================================

 -- Function: romberg
          romberg (<expr>, <x>, <a>, <b>)
          romberg (<F>, <a>, <b>)

     Computes a numerical integration by Romberg's method.

     'romberg(<expr>, <x>, <a>, <b>)' returns an estimate of the
     integral 'integrate(<expr>, <x>, <a>, <b>)'.  <expr> must be an
     expression which evaluates to a floating point value when <x> is
     bound to a floating point value.

     'romberg(<F>, <a>, <b>)' returns an estimate of the integral
     'integrate(<F>(x), x, <a>, <b>)' where 'x' represents the unnamed,
     sole argument of <F>; the actual argument is not named 'x'.  <F>
     must be a Maxima or Lisp function which returns a floating point
     value when the argument is a floating point value.  <F> may name a
     translated or compiled Maxima function.

     The accuracy of 'romberg' is governed by the global variables
     'rombergabs' and 'rombergtol'.  'romberg' terminates successfully
     when the absolute difference between successive approximations is
     less than 'rombergabs', or the relative difference in successive
     approximations is less than 'rombergtol'.  Thus when 'rombergabs'
     is 0.0 (the default) only the relative error test has any effect on
     'romberg'.

     'romberg' halves the stepsize at most 'rombergit' times before it
     gives up; the maximum number of function evaluations is therefore
     '2^rombergit'.  If the error criterion established by 'rombergabs'
     and 'rombergtol' is not satisfied, 'romberg' prints an error
     message.  'romberg' always makes at least 'rombergmin' iterations;
     this is a heuristic intended to prevent spurious termination when
     the integrand is oscillatory.

     'romberg' repeatedly evaluates the integrand after binding the
     variable of integration to a specific value (and not before).  This
     evaluation policy makes it possible to nest calls to 'romberg', to
     compute multidimensional integrals.  However, the error
     calculations do not take the errors of nested integrations into
     account, so errors may be underestimated.  Also, methods devised
     especially for multidimensional problems may yield the same
     accuracy with fewer function evaluations.

     'load(romberg)' loads this function.

     See also 'QUADPACK', a collection of numerical integration
     functions.

     Examples:

     A 1-dimensional integration.

          (%i1) load (romberg);
          (%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
          (%i2) f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000)
                        + 1/((x - 3)^2 + 1/200);
                              1                 1                1
          (%o2) f(x) := -------------- + --------------- + --------------
                               2    1           2    1            2    1
                        (x - 1)  + ---   (x - 2)  + ----   (x - 3)  + ---
                                   100              1000              200
          (%i3) rombergtol : 1e-6;
          (%o3)                 9.9999999999999995E-7
          (%i4) rombergit : 15;
          (%o4)                          15
          (%i5) estimate : romberg (f(x), x, -5, 5);
          (%o5)                   173.6730736617464
          (%i6) exact : integrate (f(x), x, -5, 5);
          (%o6) 10 sqrt(10) atan(70 sqrt(10))
           + 10 sqrt(10) atan(30 sqrt(10)) + 10 sqrt(2) atan(80 sqrt(2))
           + 10 sqrt(2) atan(20 sqrt(2)) + 10 atan(60) + 10 atan(40)
          (%i7) abs (estimate - exact) / exact, numer;
          (%o7)                7.5527060865060088E-11

     A 2-dimensional integration, implemented by nested calls to
     'romberg'.

          (%i1) load (romberg);
          (%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
          (%i2) g(x, y) := x*y / (x + y);
                                              x y
          (%o2)                   g(x, y) := -----
                                             x + y
          (%i3) rombergtol : 1e-6;
          (%o3)                 9.9999999999999995E-7
          (%i4) estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
          (%o4)                   0.81930239628356
          (%i5) assume (x > 0);
          (%o5)                        [x > 0]
          (%i6) integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
                                                    3
                                              2 log(-) - 1
                              9                     2        9
          (%o6)       - 9 log(-) + 9 log(3) + ------------ + -
                              2                    6         2
          (%i7) exact : radcan (%);
                              26 log(3) - 26 log(2) - 13
          (%o7)             - --------------------------
                                          3
          (%i8) abs (estimate - exact) / exact, numer;
          (%o8)                1.3711979871851024E-10

 -- Option variable: rombergabs
     Default value: 0.0

     The accuracy of 'romberg' is governed by the global variables
     'rombergabs' and 'rombergtol'.  'romberg' terminates successfully
     when the absolute difference between successive approximations is
     less than 'rombergabs', or the relative difference in successive
     approximations is less than 'rombergtol'.  Thus when 'rombergabs'
     is 0.0 (the default) only the relative error test has any effect on
     'romberg'.

     See also 'rombergit' and 'rombergmin'.

 -- Option variable: rombergit
     Default value: 11

     'romberg' halves the stepsize at most 'rombergit' times before it
     gives up; the maximum number of function evaluations is therefore
     '2^rombergit'.  'romberg' always makes at least 'rombergmin'
     iterations; this is a heuristic intended to prevent spurious
     termination when the integrand is oscillatory.

     See also 'rombergabs' and 'rombergtol'.

 -- Option variable: rombergmin
     Default value: 0

     'romberg' always makes at least 'rombergmin' iterations; this is a
     heuristic intended to prevent spurious termination when the
     integrand is oscillatory.

     See also 'rombergit', 'rombergabs', and 'rombergtol'.

 -- Option variable: rombergtol
     Default value: 1e-4

     The accuracy of 'romberg' is governed by the global variables
     'rombergabs' and 'rombergtol'.  'romberg' terminates successfully
     when the absolute difference between successive approximations is
     less than 'rombergabs', or the relative difference in successive
     approximations is less than 'rombergtol'.  Thus when 'rombergabs'
     is 0.0 (the default) only the relative error test has any effect on
     'romberg'.

     See also 'rombergit' and 'rombergmin'.


File: maxima.info,  Node: simplex,  Next: simplification,  Prev: romberg,  Up: Top

74 simplex
**********

* Menu:

* Introduction to simplex::
* Functions and Variables for simplex::


File: maxima.info,  Node: Introduction to simplex,  Next: Functions and Variables for simplex,  Prev: simplex,  Up: simplex

74.1 Introduction to simplex
============================

'simplex' is a package for linear optimization using the simplex
algorithm.

   Example:

     (%i1) load("simplex")$
     (%i2) minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);
                       9        7       1
     (%o2)            [--, [y = --, x = -]]
                       10       10      5

74.1.1 Tests for simplex
------------------------

There are some tests in the directory 'share/simplex/Tests'.

74.1.1.1 klee_minty
...................

The function 'klee_minty' produces input for 'linear_program', for which
exponential time for solving is required without scaling.

   Example:

     load(klee_minty)$
     apply(linear_program, klee_minty(6));

   A better approach:

     epsilon_sx : 0$
     scale_sx : true$
     apply(linear_program, klee_minty(10));

74.1.1.2 NETLIB
...............

Some smaller problems from netlib ('http://www.netlib.org/lp/data/')
test suite are converted to a format, readable by Maxima.  Problems are
'adlittle', 'afiro', 'kb2' and 'sc50a'.  Each problem has three input
files in CSV format for matrix <A> and vectors <b> and <c>.

   Example:

     A : read_matrix("adlittle_A.csv", 'csv)$
     b : read_list("adlittle_b.csv", 'csv)$
     c : read_list("adlittle_c.csv", 'csv)$
     linear_program(A, b, c)$
     %[2]
     => 225494.963126615

   Results:

     PROBLEM        MINIMUM                SCALING
     adlittle       225494.963126615       no
     afiro          - 464.7531428571429    no
     kb2            - 1749.900129055996    yes
     sc50a          - 64.5750770585645     no


File: maxima.info,  Node: Functions and Variables for simplex,  Prev: Introduction to simplex,  Up: simplex

74.2 Functions and Variables for simplex
========================================

 -- Option variable: epsilon_lp
     Default value: '10^-8'

     Epsilon used for numerical computations in 'linear_program'.

     See also: 'linear_program'.

 -- Function: linear_program (<A>, <b>, <c>)

     'linear_program' is an implementation of the simplex algorithm.
     'linear_program(A, b, c)' computes a vector <x> for which 'c.x' is
     minimum possible among vectors for which 'A.x = b' and 'x >= 0'.
     Argument <A> is a matrix and arguments <b> and <c> are lists.

     'linear_program' returns a list which contains the minimizing
     vector <x> and the minimum value 'c.x'.  If the problem is not
     bounded, it returns "Problem not bounded!"  and if the problem is
     not feasible, it returns "Problem not feasible!".

     To use this function first load the 'simplex' package with
     'load(simplex);'.

     Example:

          (%i2) A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
          (%i3) b: [1,1,6]$
          (%i4) c: [1,-2,0,0]$
          (%i5) linear_program(A, b, c);
                             13     19        3
          (%o5)            [[--, 4, --, 0], - -]
                             2      2         2

     See also: 'minimize_lp', 'scale_lp', and 'epsilon_lp'.

 -- Function: maximize_lp (<obj>, <cond>, [<pos>])

     Maximizes linear objective function <obj> subject to some linear
     constraints <cond>.  See 'minimize_lp' for detailed description of
     arguments and return value.

     See also: 'minimize_lp'.

 -- Function: minimize_lp (<obj>, <cond>, [<pos>])

     Minimizes a linear objective function <obj> subject to some linear
     constraints <cond>.  <cond> a list of linear equations or
     inequalities.  In strict inequalities '>' is replaced by '>=' and
     '<' by '<='.  The optional argument <pos> is a list of decision
     variables which are assumed to be positive.

     If the minimum exists, 'minimize_lp' returns a list which contains
     the minimum value of the objective function and a list of decision
     variable values for which the minimum is attained.  If the problem
     is not bounded, 'minimize_lp' returns "Problem not bounded!"  and
     if the problem is not feasible, it returns "Problem not feasible!".

     The decision variables are not assumed to be nonegative by default.
     If all decision variables are nonegative, set 'nonegative_lp' to
     'true'.  If only some of decision variables are positive, list them
     in the optional argument <pos> (note that this is more efficient
     than adding constraints).

     'minimize_lp' uses the simplex algorithm which is implemented in
     maxima 'linear_program' function.

     To use this function first load the 'simplex' package with
     'load(simplex);'.

     Examples:

          (%i1) minimize_lp(x+y, [3*x+y=0, x+2*y>2]);
                                4       6        2
          (%o1)                [-, [y = -, x = - -]]
                                5       5        5
          (%i2) minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;
          (%o2)                [1, [y = 1, x = 0]]
          (%i3) minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;
          (%o3)                Problem not feasible!
          (%i4) minimize_lp(x+y, [3*x+y>0]);
          (%o4)                Problem not bounded!

     See also: 'maximize_lp', 'nonegative_lp', 'epsilon_lp'.

 -- Option variable: nonegative_lp
     Default value: 'false'

     If 'nonegative_lp' is true all decision variables to 'minimize_lp'
     and 'maximize_lp' are assumed to be positive.

     See also: 'minimize_lp'.

 -- Option variable: scale_lp
     Default value: 'false'

     When 'scale_lp' is 'true', 'linear_program' scales its input so
     that the maximum absolute value in each row or column is 1.

 -- Variable: pivot_count_sx

     After 'linear_program' returns, 'pivot_count_sx' is the number of
     pivots in last computation.

 -- Variable: pivot_max_sx

     'pivot_max_sx' is the maximum number of pivots allowed by
     'linear_program'.


File: maxima.info,  Node: simplification,  Next: solve_rec,  Prev: simplex,  Up: Top

75 simplification
*****************

* Menu:

* Introduction to simplification::
* Package absimp::
* Package facexp::
* Package functs::
* Package ineq::
* Package rducon::
* Package scifac::
* Package sqdnst::


File: maxima.info,  Node: Introduction to simplification,  Next: Package absimp,  Prev: simplification,  Up: simplification

75.1 Introduction to simplification
===================================

The directory 'maxima/share/simplification' contains several scripts
which implement simplification rules and functions, and also some
functions not related to simplification.


File: maxima.info,  Node: Package absimp,  Next: Package facexp,  Prev: Introduction to simplification,  Up: simplification

75.2 Package absimp
===================

The 'absimp' package contains pattern-matching rules that extend the
built-in simplification rules for the 'abs' and 'signum' functions.
'absimp' respects relations established with the built-in 'assume'
function and by declarations such as 'modedeclare (m, even, n, odd)' for
even or odd integers.

   'absimp' defines 'unitramp' and 'unitstep' functions in terms of
'abs' and 'signum'.

   'load (absimp)' loads this package.  'demo (absimp)' shows a
demonstration of this package.

   Examples:

     (%i1) load (absimp)$
     (%i2) (abs (x))^2;
                                            2
     (%o2)                                 x
     (%i3) diff (abs (x), x);
                                           x
     (%o3)                               ------
                                         abs(x)
     (%i4) cosh (abs (x));
     (%o4)                               cosh(x)


File: maxima.info,  Node: Package facexp,  Next: Package functs,  Prev: Package absimp,  Up: simplification

75.3 Package facexp
===================

The 'facexp' package contains several related functions that provide the
user with the ability to structure expressions by controlled expansion.
This capability is especially useful when the expression contains
variables that have physical meaning, because it is often true that the
most economical form of such an expression can be obtained by fully
expanding the expression with respect to those variables, and then
factoring their coefficients.  While it is true that this procedure is
not difficult to carry out using standard Maxima functions, additional
fine-tuning may also be desirable, and these finishing touches can be
more difficult to apply.

   The function 'facsum' and its related forms provide a convenient
means for controlling the structure of expressions in this way.  Another
function, 'collectterms', can be used to add two or more expressions
that have already been simplified to this form, without resimplifying
the whole expression again.  This function may be useful when the
expressions are very large.

   'load (facexp)' loads this package.  'demo (facexp)' shows a
demonstration of this package.

 -- Function: facsum (<expr>, <arg_1>, ..., <arg_n>)
     Returns a form of <expr> which depends on the arguments <arg_1>,
     ..., <arg_n>.  The arguments can be any form suitable for
     'ratvars', or they can be lists of such forms.  If the arguments
     are not lists, then the form returned is fully expanded with
     respect to the arguments, and the coefficients of the arguments are
     factored.  These coefficients are free of the arguments, except
     perhaps in a non-rational sense.

     If any of the arguments are lists, then all such lists are combined
     into a single list, and instead of calling 'factor' on the
     coefficients of the arguments, 'facsum' calls itself on these
     coefficients, using this newly constructed single list as the new
     argument list for this recursive call.  This process can be
     repeated to arbitrary depth by nesting the desired elements in
     lists.

     It is possible that one may wish to 'facsum' with respect to more
     complicated subexpressions, such as 'log (x + y)'.  Such arguments
     are also permissible.

     Occasionally the user may wish to obtain any of the above forms for
     expressions which are specified only by their leading operators.
     For example, one may wish to 'facsum' with respect to all 'log''s.
     In this situation, one may include among the arguments either the
     specific 'log''s which are to be treated in this way, or
     alternatively, either the expression 'operator (log)' or ''operator
     (log)'.  If one wished to 'facsum' the expression <expr> with
     respect to the operators <op_1>, ..., <op_n>, one would evaluate
     'facsum (<expr>, operator (<op_1>, ..., <op_n>))'.  The 'operator'
     form may also appear inside list arguments.

     In addition, the setting of the switches 'facsum_combine' and
     'nextlayerfactor' may affect the result of 'facsum'.

 -- Global variable: nextlayerfactor
     Default value: 'false'

     When 'nextlayerfactor' is 'true', recursive calls of 'facsum' are
     applied to the factors of the factored form of the coefficients of
     the arguments.

     When 'false', 'facsum' is applied to each coefficient as a whole
     whenever recusive calls to 'facsum' occur.

     Inclusion of the atom 'nextlayerfactor' in the argument list of
     'facsum' has the effect of 'nextlayerfactor: true', but for the
     next level of the expression only.  Since 'nextlayerfactor' is
     always bound to either 'true' or 'false', it must be presented
     single-quoted whenever it appears in the argument list of 'facsum'.

 -- Global variable: facsum_combine
     Default value: 'true'

     'facsum_combine' controls the form of the final result returned by
     'facsum' when its argument is a quotient of polynomials.  If
     'facsum_combine' is 'false' then the form will be returned as a
     fully expanded sum as described above, but if 'true', then the
     expression returned is a ratio of polynomials, with each polynomial
     in the form described above.

     The 'true' setting of this switch is useful when one wants to
     'facsum' both the numerator and denominator of a rational
     expression, but does not want the denominator to be multiplied
     through the terms of the numerator.

 -- Function: factorfacsum (<expr>, <arg_1>, ... <arg_n>)
     Returns a form of <expr> which is obtained by calling 'facsum' on
     the factors of <expr> with <arg_1>, ...  <arg_n> as arguments.  If
     any of the factors of <expr> is raised to a power, both the factor
     and the exponent will be processed in this way.

 -- Function: collectterms (<expr>, <arg_1>, ..., <arg_n>)

     If several expressions have been simplified with the following
     functions 'facsum', 'factorfacsum', 'factenexpand', 'facexpten' or
     'factorfacexpten', and they are to be added together, it may be
     desirable to combine them using the function 'collecterms'.
     'collecterms' can take as arguments all of the arguments that can
     be given to these other associated functions with the exception of
     'nextlayerfactor', which has no effect on 'collectterms'.  The
     advantage of 'collectterms' is that it returns a form similar to
     'facsum', but since it is adding forms that have already been
     processed by 'facsum', it does not need to repeat that effort.
     This capability is especially useful when the expressions to be
     summed are very large.


File: maxima.info,  Node: Package functs,  Next: Package ineq,  Prev: Package facexp,  Up: simplification

75.4 Package functs
===================

 -- Function: rempart (<expr>, <n>)
     Removes part <n> from the expression <expr>.

     If <n> is a list of the form '[<l>, <m>]' then parts <l> thru <m>
     are removed.

     To use this function write first 'load(functs)'.

 -- Function: wronskian ([<f_1>, ..., <f_n>], <x>)
     Returns the Wronskian matrix of the list of expressions [<f_1>,
     ..., <f_n>] in the variable <x>.  The determinant of the Wronskian
     matrix is the Wronskian determinant of the list of expressions.

     To use 'wronskian', first 'load(functs)'.  Example:

          (%i1) load(functs)$
          (%i2) wronskian([f(x), g(x)],x);
          (%o2) matrix([f(x),g(x)],['diff(f(x),x,1),'diff(g(x),x,1)])

 -- Function: tracematrix (<M>)
     Returns the trace (sum of the diagonal elements) of matrix <M>.

     To use this function write first 'load(functs)'.

 -- Function: rational ('z')
     Multiplies numerator and denominator of <z> by the complex
     conjugate of denominator, thus rationalizing the denominator.
     Returns canonical rational expression (CRE) form if given one, else
     returns general form.

     To use this function write first 'load(functs)'.

 -- Function: nonzeroandfreeof (<x>, <expr>)
     Returns 'true' if <expr> is nonzero and 'freeof (<x>, <expr>)'
     returns 'true'.  Returns 'false' otherwise.

     To use this function write first 'load(functs)'.

 -- Function: linear (<expr>, <x>)
     When <expr> is an expression of the form '<a>*<x> + <b>' where <a>
     is nonzero, and <a> and <b> are free of <x>, 'linear' returns a
     list of three equations, one for each of the three formal variables
     <b>, <a>, and <x>.  Otherwise, 'linear' returns 'false'.

     'load(antid)' loads this function.

     Example:

          (%i1) load (antid);
          (%o1)        /usr/share/maxima/5.29.1/share/integration/antid.mac
          (%i2) linear ((1 - w)*(1 - x)*z, z);
          (%o2)  [bargumentb = 0, aargumenta = (w - 1) x - w + 1, xargumentx = z]
          (%i3) linear (cos(u - v) + cos(u + v), u);
          (%o3)                                false

 -- Function: gcdivide (<p>, <q>)

     When the option variable 'takegcd' is 'true' which is the default,
     'gcdivide' divides the polynomials <p> and <q> by their greatest
     common divisor and returns the ratio of the results.  'gcdivde'
     calls the function 'ezgcd' to divide the polynomials by the
     greatest common divisor.

     When 'takegcd' is 'false', 'gcdivide' returns the ratio '<p>/<q>'.

     To use this function write first 'load(functs)'.

     See also 'ezgcd', 'gcd', 'gcdex', and 'poly_gcd'.

     Example:

          (%i1) load(functs)$

          (%i2) p1:6*x^3+19*x^2+19*x+6;
                                  3       2
          (%o2)                6 x  + 19 x  + 19 x + 6
          (%i3) p2:6*x^5+13*x^4+12*x^3+13*x^2+6*x;
                            5       4       3       2
          (%o3)          6 x  + 13 x  + 12 x  + 13 x  + 6 x
          (%i4) gcdivide(p1, p2);
                                       x + 1
          (%o4)                        ------
                                        3
                                       x  + x
          (%i5) takegcd:false;
          (%o5)                         false
          (%i6) gcdivide(p1, p2);
                                 3       2
                              6 x  + 19 x  + 19 x + 6
          (%o6)          ----------------------------------
                            5       4       3       2
                         6 x  + 13 x  + 12 x  + 13 x  + 6 x
          (%i7) ratsimp(%);
                                       x + 1
          (%o7)                        ------
                                        3
                                       x  + x

 -- Function: arithmetic (<a>, <d>, <n>)
     Returns the <n>-th term of the arithmetic series '<a>, <a> + <d>,
     <a> + 2*<d>, ..., <a> + (<n> - 1)*<d>'.

     To use this function write first 'load(functs)'.

 -- Function: geometric (<a>, <r>, <n>)
     Returns the <n>-th term of the geometric series '<a>, <a>*<r>,
     <a>*<r>^2, ..., <a>*<r>^(<n> - 1)'.

     To use this function write first 'load(functs)'.

 -- Function: harmonic (<a>, <b>, <c>, <n>)
     Returns the <n>-th term of the harmonic series '<a>/<b>, <a>/(<b> +
     <c>), <a>/(<b> + 2*<c>), ..., <a>/(<b> + (<n> - 1)*<c>)'.

     To use this function write first 'load(functs)'.

 -- Function: arithsum (<a>, <d>, <n>)
     Returns the sum of the arithmetic series from 1 to <n>.

     To use this function write first 'load(functs)'.

 -- Function: geosum (<a>, <r>, <n>)
     Returns the sum of the geometric series from 1 to <n>.  If <n> is
     infinity ('inf') then a sum is finite only if the absolute value of
     <r> is less than 1.

     To use this function write first 'load(functs)'.

 -- Function: gaussprob (<x>)
     Returns the Gaussian probability function '%e^(-<x>^2/2) /
     sqrt(2*%pi)'.

     To use this function write first 'load(functs)'.

 -- Function: gd (<x>)
     Returns the Gudermannian function '2*atan(%e^x)-%pi/2'.

     To use this function write first 'load(functs)'.

 -- Function: agd (<x>)
     Returns the inverse Gudermannian function 'log (tan (%pi/4 +
     x/2))'.

     To use this function write first 'load(functs)'.

 -- Function: vers (<x>)
     Returns the versed sine '1 - cos (x)'.

     To use this function write first 'load(functs)'.

 -- Function: covers (<x>)
     Returns the coversed sine '1 - sin (<x>)'.

     To use this function write first 'load(functs)'.

 -- Function: exsec (<x>)
     Returns the exsecant 'sec (<x>) - 1'.

     To use this function write first 'load(functs)'.

 -- Function: hav (<x>)
     Returns the haversine '(1 - cos(x))/2'.

     To use this function write first 'load(functs)'.

 -- Function: combination (<n>, <r>)
     Returns the number of combinations of <n> objects taken <r> at a
     time.

     To use this function write first 'load(functs)'.

 -- Function: permutation (<n>, <r>)
     Returns the number of permutations of <r> objects selected from a
     set of <n> objects.

     To use this function write first 'load(functs)'.


File: maxima.info,  Node: Package ineq,  Next: Package rducon,  Prev: Package functs,  Up: simplification

75.5 Package ineq
=================

The 'ineq' package contains simplification rules for inequalities.

   Example session:

     (%i1) load(ineq)$
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     (%i2) a>=4;  /* a sample inequality */
     (%o2)                               a >= 4
     (%i3) (b>c)+%; /* add a second, strict inequality */
     (%o3)                            b + a > c + 4
     (%i4) 7*(x<y); /* multiply by a positive number */
     (%o4)                              7 x < 7 y
     (%i5) -2*(x>=3*z); /* multiply by a negative number */
     (%o5)                           - 2 x <= - 6 z
     (%i6) (1+a^2)*(1/(1+a^2)<=1); /* Maxima knows that 1+a^2 > 0 */
                                             2
     (%o6)                             1 <= a  + 1
     (%i7) assume(x>0)$ x*(2<3); /* assuming x>0 */
     (%o7)                              2 x < 3 x
     (%i8) a>=b; /* another inequality */
     (%o8)                               a >= b
     (%i9) 3+%; /* add something */
     (%o9)                           a + 3 >= b + 3
     (%i10) %-3; /* subtract it out */
     (%o10)                              a >= b
     (%i11) a>=c-b; /* yet another inequality */
     (%o11)                            a >= c - b
     (%i12) b+%; /* add b to both sides */
     (%o12)                            b + a >= c
     (%i13) %-c; /* subtract c from both sides */
     (%o13)                         - c + b + a >= 0
     (%i14) -%;  /* multiply by -1 */
     (%o14)                          c - b - a <= 0
     (%i15) (z-1)^2>-2*z; /* determining truth of assertion */
                                           2
     (%o15)                         (z - 1)  > - 2 z
     (%i16) expand(%)+2*z; /* expand this and add 2*z to both sides */
                                        2
     (%o16)                            z  + 1 > 0
     (%i17) %,pred;
     (%o17)                               true

   Be careful about using parentheses around the inequalities: when the
user types in '(A > B) + (C = 5)' the result is 'A + C > B + 5', but 'A
> B + C = 5' is a syntax error, and '(A > B + C) = 5' is something else
entirely.

   Do 'disprule (all)' to see a complete listing of the rule
definitions.

   The user will be queried if Maxima is unable to decide the sign of a
quantity multiplying an inequality.

   The most common mis-feature is illustrated by:

     (%i1) eq: a > b;
     (%o1)                              a > b
     (%i2) 2*eq;
     (%o2)                            2 (a > b)
     (%i3) % - eq;
     (%o3)                              a > b

   Another problem is 0 times an inequality; the default to have this
turn into 0 has been left alone.  However, if you type
'X*<some_inequality>' and Maxima asks about the sign of 'X' and you
respond 'zero' (or 'z'), the program returns 'X*<some_inequality>' and
not use the information that 'X' is 0.  You should do 'ev (%, x: 0)' in
such a case, as the database will only be used for comparison purposes
in decisions, and not for the purpose of evaluating 'X'.

   The user may note a slower response when this package is loaded, as
the simplifier is forced to examine more rules than without the package,
so you might wish to remove the rules after making use of them.  Do
'kill (rules)' to eliminate all of the rules (including any that you
might have defined); or you may be more selective by killing only some
of them; or use 'remrule' on a specific rule.

   Note that if you load this package after defining your own rules you
will clobber your rules that have the same name.  The rules in this
package are: '*rule1', ..., '*rule8', '+rule1', ..., '+rule18', and you
must enclose the rulename in quotes to refer to it, as in 'remrule ("+",
"+rule1")' to specifically remove the first rule on '"+"' or 'disprule
("*rule2")' to display the definition of the second multiplicative rule.


File: maxima.info,  Node: Package rducon,  Next: Package scifac,  Prev: Package ineq,  Up: simplification

75.6 Package rducon
===================

 -- Function: reduce_consts (<expr>)
     Replaces constant subexpressions of <expr> with constructed
     constant atoms, saving the definition of all these constructed
     constants in the list of equations 'const_eqns', and returning the
     modified <expr>.  Those parts of <expr> are constant which return
     'true' when operated on by the function 'constantp'.  Hence, before
     invoking 'reduce_consts', one should do

          declare ([<objects to be given the constant property>], constant)$

     to set up a database of the constant quantities occurring in your
     expressions.

     If you are planning to generate Fortran output after these symbolic
     calculations, one of the first code sections should be the
     calculation of all constants.  To generate this code segment, do

          map ('fortran, const_eqns)$

     Variables besides 'const_eqns' which affect 'reduce_consts' are:

     'const_prefix' (default value: 'xx') is the string of characters
     used to prefix all symbols generated by 'reduce_consts' to
     represent constant subexpressions.

     'const_counter' (default value: 1) is the integer index used to
     generate unique symbols to represent each constant subexpression
     found by 'reduce_consts'.

     'load (rducon)' loads this function.  'demo (rducon)' shows a
     demonstration of this function.


File: maxima.info,  Node: Package scifac,  Next: Package sqdnst,  Prev: Package rducon,  Up: simplification

75.7 Package scifac
===================

 -- Function: gcfac (<expr>)
     'gcfac' is a factoring function that attempts to apply the same
     heuristics which scientists apply in trying to make expressions
     simpler.  'gcfac' is limited to monomial-type factoring.  For a
     sum, 'gcfac' does the following:

       1. Factors over the integers.
       2. Factors out the largest powers of terms occurring as
          coefficients, regardless of the complexity of the terms.
       3. Uses (1) and (2) in factoring adjacent pairs of terms.
       4. Repeatedly and recursively applies these techniques until the
          expression no longer changes.

     Item (3) does not necessarily do an optimal job of pairwise
     factoring because of the combinatorially-difficult nature of
     finding which of all possible rearrangements of the pairs yields
     the most compact pair-factored result.

     'load (scifac)' loads this function.  'demo (scifac)' shows a
     demonstration of this function.


File: maxima.info,  Node: Package sqdnst,  Prev: Package scifac,  Up: simplification

75.8 Package sqdnst
===================

 -- Function: sqrtdenest (<expr>)
     Denests 'sqrt' of simple, numerical, binomial surds, where
     possible.  E.g.

          (%i1) load (sqdnst)$
          (%i2) sqrt(sqrt(3)/2+1)/sqrt(11*sqrt(2)-12);
                                              sqrt(3)
                                         sqrt(------- + 1)
                                                 2
          (%o2)                        ---------------------
                                       sqrt(11 sqrt(2) - 12)
          (%i3) sqrtdenest(%);
                                            sqrt(3)   1
                                            ------- + -
                                               2      2
          (%o3)                            -------------
                                              1/4    3/4
                                           3 2    - 2

     Sometimes it helps to apply 'sqrtdenest' more than once, on such as
     '(19601-13860 sqrt(2))^(7/4)'.

     'load (sqdnst)' loads this function.


File: maxima.info,  Node: solve_rec,  Next: stats,  Prev: simplification,  Up: Top

76 solve_rec
************

* Menu:

* Introduction to solve_rec::
* Functions and Variables for solve_rec::


File: maxima.info,  Node: Introduction to solve_rec,  Next: Functions and Variables for solve_rec,  Prev: solve_rec,  Up: solve_rec

76.1 Introduction to solve_rec
==============================

'solve_rec' is a package for solving linear recurrences with polynomial
coefficients.

   A demo is available with 'demo(solve_rec);'.

   Example:

     (%i1) load("solve_rec")$
     (%i2) solve_rec((n+4)*s[n+2] + s[n+1] - (n+1)*s[n], s[n]);
                                         n
                      %k  (2 n + 3) (- 1)          %k
                        1                            2
     (%o2)       s  = -------------------- + ---------------
                  n     (n + 1) (n + 2)      (n + 1) (n + 2)


File: maxima.info,  Node: Functions and Variables for solve_rec,  Prev: Introduction to solve_rec,  Up: solve_rec

76.2 Functions and Variables for solve_rec
==========================================

 -- Function: reduce_order (<rec>, <sol>, <var>)

     Reduces the order of linear recurrence <rec> when a particular
     solution <sol> is known.  The reduced reccurence can be used to get
     other solutions.

     Example:

          (%i3) rec: x[n+2] = x[n+1] + x[n]/n;
                                                x
                                                 n
          (%o3)               x      = x      + --
                               n + 2    n + 1   n
          (%i4) solve_rec(rec, x[n]);
          WARNING: found some hypergeometrical solutions!
          (%o4)                    x  = %k  n
                                    n     1
          (%i5) reduce_order(rec, n, x[n]);
          (%t5)                    x  = n %z
                                    n       n

                                     n - 1
                                     ====
                                     \
          (%t6)                %z  =  >     %u
                                 n   /        %j
                                     ====
                                     %j = 0

          (%o6)             (- n - 2) %u     - %u
                                        n + 1     n
          (%i6) solve_rec((n+2)*%u[n+1] + %u[n], %u[n]);
                                               n
                                      %k  (- 1)
                                        1
          (%o6)                 %u  = ----------
                                  n    (n + 1)!

          So the general solution is

                       n - 1
                       ====        j
                       \      (- 1)
                 %k  n  >    -------- + %k  n
                   2   /     (j + 1)!     1
                       ====
                       j = 0

 -- Option variable: simplify_products
     Default value: 'true'

     If 'simplify_products' is 'true', 'solve_rec' will try to simplify
     products in result.

     See also: 'solve_rec'.

 -- Function: simplify_sum (<expr>)

     Tries to simplify all sums appearing in <expr> to a closed form.

     To use this function first load the 'simplify_sum' package with
     'load(simplify_sum)'.

     Example:

          (%i1) load("simplify_sum")$
          (%i2) sum(binomial(n+k,k)/2^k,k,1,n)+sum(binomial(2*n,2*k),k,1,n);
                  n                          n
                 ====                       ====
                 \     binomial(n + k, k)   \
          (%o2)   >    ------------------ +  >    binomial(2 n, 2 k)
                 /              k           /
                 ====          2            ====
                 k = 1                      k = 1
          (%i3) simplify_sum(%);

                                   2 n - 1    n
          (%o3)                   2        + 2  - 2

 -- Function: solve_rec (<eqn>, <var>, [<init>])
     Solves for hypergeometrical solutions to linear recurrence <eqn>
     with polynomials coefficient in variable <var>.  Optional arguments
     <init> are initial conditions.

     'solve_rec' can solve linear recurrences with constant
     coefficients, finds hypergeometrical solutions to homogeneous
     linear recurrences with polynomial coefficients, rational solutions
     to linear recurrences with polynomial coefficients and can solve
     Ricatti type recurrences.

     Note that the running time of the algorithm used to find
     hypergeometrical solutions is exponential in the degree of the
     leading and trailing coefficient.

     To use this function first load the 'solve_rec' package with
     'load(solve_rec);'.

     Example of linear recurrence with constant coefficients:

          (%i2) solve_rec(a[n]=a[n-1]+a[n-2]+n/2^n, a[n]);
                                  n          n
                     (sqrt(5) - 1)  %k  (- 1)
                                      1           n
          (%o2) a  = ------------------------- - ----
                 n               n                  n
                                2                5 2
                                                          n
                                             (sqrt(5) + 1)  %k
                                                              2    2
                                           + ------------------ - ----
                                                      n              n
                                                     2            5 2

     Example of linear recurrence with polynomial coefficients:

          (%i7) 2*x*(x+1)*y[x] - (x^2+3*x-2)*y[x+1] + (x-1)*y[x+2];
                                   2
          (%o7) (x - 1) y      - (x  + 3 x - 2) y      + 2 x (x + 1) y
                         x + 2                   x + 1                x
          (%i8) solve_rec(%, y[x], y[1]=1, y[3]=3);
                                        x
                                     3 2    x!
          (%o9)                 y  = ---- - --
                                 x    4     2

     Example of Ricatti type recurrence:

          (%i2) x*y[x+1]*y[x] - y[x+1]/(x+2) + y[x]/(x-1) = 0;
                                      y         y
                                       x + 1     x
          (%o2)         x y  y      - ------ + ----- = 0
                           x  x + 1   x + 2    x - 1
          (%i3) solve_rec(%, y[x], y[3]=5)$
          (%i4) ratsimp(minfactorial(factcomb(%)));
                                             3
                                         30 x  - 30 x
          (%o4) y  = - -------------------------------------------------
                 x        6      5       4       3       2
                       5 x  - 3 x  - 25 x  + 15 x  + 20 x  - 12 x - 1584

     See also: 'solve_rec_rat', 'simplify_products', and
     'product_use_gamma'.

 -- Function: solve_rec_rat (<eqn>, <var>, [<init>])

     Solves for rational solutions to linear recurrences.  See solve_rec
     for description of arguments.

     To use this function first load the 'solve_rec' package with
     'load(solve_rec);'.

     Example:

          (%i1) (x+4)*a[x+3] + (x+3)*a[x+2] - x*a[x+1] + (x^2-1)*a[x];
          (%o1)  (x + 4) a      + (x + 3) a      - x a
                          x + 3            x + 2      x + 1
                                                             2
                                                         + (x  - 1) a
                                                                      x
          (%i2) solve_rec_rat(% = (x+2)/(x+1), a[x]);
                                 1
          (%o2)      a  = ---------------
                      x   (x - 1) (x + 1)

     See also: 'solve_rec'.

 -- Option variable: product_use_gamma
     Default value: 'true'

     When simplifying products, 'solve_rec' introduces gamma function
     into the expression if 'product_use_gamma' is 'true'.

     See also: 'simplify_products', 'solve_rec'.

 -- Function: summand_to_rec
          summand_to_rec (<summand>, <k>, <n>)
          summand_to_rec (<summand>, [<k>, <lo>, <hi>], <n>)

     Returns the recurrence sattisfied by the sum

               hi
              ====
              \
               >     summand
              /
              ====
            k = lo

     where summand is hypergeometrical in <k> and <n>.  If <lo> and <hi>
     are omited, they are assumed to be 'lo = -inf' and 'hi = inf'.

     To use this function first load the 'simplify_sum' package with
     'load(simplify_sum)'.

     Example:

          (%i1) load("simplify_sum")$
          (%i2) summand: binom(n,k);
          (%o2)                           binomial(n, k)
          (%i3) summand_to_rec(summand,k,n);
          (%o3)                      2 sm  - sm      = 0
                                         n     n + 1
          (%i7) summand: binom(n, k)/(k+1);
                                          binomial(n, k)
          (%o7)                           --------------
                                              k + 1
          (%i8) summand_to_rec(summand, [k, 0, n], n);
          (%o8)               2 (n + 1) sm  - (n + 2) sm      = - 1
                                          n             n + 1


File: maxima.info,  Node: stats,  Next: stirling,  Prev: solve_rec,  Up: Top

77 stats
********

* Menu:

* Introduction to stats::
* Functions and Variables for inference_result::
* Functions and Variables for stats::
* Functions and Variables for special distributions::


File: maxima.info,  Node: Introduction to stats,  Next: Functions and Variables for inference_result,  Prev: Top,  Up: Top

77.1 Introduction to stats
==========================

Package 'stats' contains a set of classical statistical inference and
hypothesis testing procedures.

   All these functions return an 'inference_result' Maxima object which
contains the necessary results for population inferences and decision
making.

   Global variable 'stats_numer' controls whether results are given in
floating point or symbolic and rational format; its default value is
'true' and results are returned in floating point format.

   Package 'descriptive' contains some utilities to manipulate data
structures (lists and matrices); for example, to extract subsamples.  It
also contains some examples on how to use package 'numericalio' to read
data from plain text files.  See 'descriptive' and 'numericalio' for
more details.

   Package 'stats' loads packages 'descriptive', 'distrib' and
'inference_result'.

   For comments, bugs or suggestions, please contact the author at

   <'mario AT edu DOT xunta DOT es'>.


File: maxima.info,  Node: Functions and Variables for inference_result,  Next: Functions and Variables for stats,  Prev: Introduction to stats,  Up: Top

77.2 Functions and Variables for inference_result
=================================================

 -- Function: inference_result (<title>, <values>, <numbers>)

     Constructs an 'inference_result' object of the type returned by the
     stats functions.  Argument <title> is a string with the name of the
     procedure; <values> is a list with elements of the form 'symbol =
     value' and <numbers> is a list with positive integer numbers
     ranging from one to 'length(<values>)', indicating which values
     will be shown by default.

     Example:

     This is a simple example showing results concerning a rectangle.
     The title of this object is the string '"Rectangle"', it stores
     five results, named ''base', ''height', ''diagonal', ''area', and
     ''perimeter', but only the first, second, fifth, and fourth will be
     displayed.  The ''diagonal' is stored in this object, but it is not
     displayed; to access its value, make use of function
     'take_inference'.

          (%i1) load(inference_result)$
          (%i2) b: 3$ h: 2$
          (%i3) inference_result("Rectangle",
                                  ['base=b,
                                   'height=h,
                                   'diagonal=sqrt(b^2+h^2),
                                   'area=b*h,
                                   'perimeter=2*(b+h)],
                                  [1,2,5,4] );
                                  |   Rectangle
                                  |
                                  |    base = 3
                                  |
          (%o3)                   |   height = 2
                                  |
                                  | perimeter = 10
                                  |
                                  |    area = 6
          (%i4) take_inference('diagonal,%);
          (%o4)                        sqrt(13)

     See also 'take_inference'.

 -- Function: inferencep (<obj>)

     Returns 'true' or 'false', depending on whether <obj> is an
     'inference_result' object or not.

 -- Function: items_inference (<obj>)

     Returns a list with the names of the items stored in <obj>, which
     must be an 'inference_result' object.

     Example:

     The 'inference_result' object stores two values, named ''pi' and
     ''e', but only the second is displayed.  The 'items_inference'
     function returns the names of all items, no matter they are
     displayed or not.

          (%i1) load(inference_result)$
          (%i2) inference_result("Hi", ['pi=%pi,'e=%e],[2]);
                                      |   Hi
          (%o2)                       |
                                      | e = %e
          (%i3) items_inference(%);
          (%o3)                        [pi, e]

 -- Function: take_inference
          take_inference (<n>, <obj>)
          take_inference (<name>, <obj>)
          take_inference (<list>, <obj>)

     Returns the <n>-th value stored in <obj> if <n> is a positive
     integer, or the item named <name> if this is the name of an item.
     If the first argument is a list of numbers and/or symbols, function
     'take_inference' returns a list with the corresponding results.

     Example:

     Given an 'inference_result' object, function 'take_inference' is
     called in order to extract some information stored in it.

          (%i1) load(inference_result)$
          (%i2) b: 3$ h: 2$
          (%i3) sol: inference_result("Rectangle",
                                      ['base=b,
                                       'height=h,
                                       'diagonal=sqrt(b^2+h^2),
                                       'area=b*h,
                                       'perimeter=2*(b+h)],
                                      [1,2,5,4] );
                                  |   Rectangle
                                  |
                                  |    base = 3
                                  |
          (%o3)                   |   height = 2
                                  |
                                  | perimeter = 10
                                  |
                                  |    area = 6
          (%i4) take_inference('base,sol);
          (%o4)                           3
          (%i5) take_inference(5,sol);
          (%o5)                          10
          (%i6) take_inference([1,'diagonal],sol);
          (%o6)                     [3, sqrt(13)]
          (%i7) take_inference(items_inference(sol),sol);
          (%o7)                [3, 2, sqrt(13), 6, 10]

     See also 'inference_result' and 'take_inference'.


File: maxima.info,  Node: Functions and Variables for stats,  Next: Functions and Variables for special distributions,  Prev: Functions and Variables for inference_result,  Up: Top

77.3 Functions and Variables for stats
======================================

 -- Option variable: stats_numer
     Default value: 'true'

     If 'stats_numer' is 'true', inference statistical functions return
     their results in floating point numbers.  If it is 'false', results
     are given in symbolic and rational format.

 -- Function: test_mean
          test_mean (<x>)
          test_mean (<x>, <options> ...)

     This is the mean <t>-test.  Argument <x> is a list or a column
     matrix containing a one dimensional sample.  It also performs an
     asymptotic test based on the Central Limit Theorem if option
     ''asymptotic' is 'true'.

     Options:

        * ''mean', default '0', is the mean value to be checked.

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''dev', default ''unknown', this is the value of the standard
          deviation when it is known; valid values are: ''unknown' or a
          positive expression.

        * ''conflevel', default '95/100', confidence level for the
          confidence interval; it must be an expression which takes a
          value in (0,1).

        * ''asymptotic', default 'false', indicates whether it performs
          an exact <t>-test or an asymptotic one based on the Central
          Limit Theorem; valid values are 'true' and 'false'.

     The output of function 'test_mean' is an 'inference_result' Maxima
     object showing the following results:

       1. ''mean_estimate': the sample mean.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': confidence interval for the population mean.

       4. ''method': inference procedure.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameter(s).

       8. ''p_value': p-value of the test.

     Examples:

     Performs an exact <t>-test with unknown variance.  The null
     hypothesis is H_0: mean=50 against the one sided alternative H_1:
     mean<50; according to the results, the p-value is too great, there
     are no evidence for rejecting H_0.

          (%i1) load("stats")$
          (%i2) data: [78,64,35,45,45,75,43,74,42,42]$
          (%i3) test_mean(data,'conflevel=0.9,'alternative='less,'mean=50);
                    |                 MEAN TEST
                    |
                    |            mean_estimate = 54.3
                    |
                    |              conf_level = 0.9
                    |
                    | conf_interval = [minf, 61.51314273502712]
                    |
          (%o3)     |  method = Exact t-test. Unknown variance.
                    |
                    | hypotheses = H0: mean = 50 , H1: mean < 50
                    |
                    |       statistic = .8244705235071678
                    |
                    |       distribution = [student_t, 9]
                    |
                    |        p_value = .7845100411786889

     This time Maxima performs an asymptotic test, based on the Central
     Limit Theorem.  The null hypothesis is H_0: equal(mean, 50) against
     the two sided alternative H_1: not equal(mean, 50); according to
     the results, the p-value is very small, H_0 should be rejected in
     favor of the alternative H_1.  Note that, as indicated by the
     'Method' component, this procedure should be applied to large
     samples.

          (%i1) load("stats")$
          (%i2) test_mean([36,118,52,87,35,256,56,178,57,57,89,34,25,98,35,
                        98,41,45,198,54,79,63,35,45,44,75,42,75,45,45,
                        45,51,123,54,151],
                        'asymptotic=true,'mean=50);
                    |                       MEAN TEST
                    |
                    |           mean_estimate = 74.88571428571429
                    |
                    |                   conf_level = 0.95
                    |
                    | conf_interval = [57.72848600856194, 92.04294256286663]
                    |
          (%o2)     |    method = Large sample z-test. Unknown variance.
                    |
                    |       hypotheses = H0: mean = 50 , H1: mean # 50
                    |
                    |             statistic = 2.842831192874313
                    |
                    |             distribution = [normal, 0, 1]
                    |
                    |             p_value = .004471474652002261

 -- Function: test_means_difference
          test_means_difference (<x1>, <x2>)
          test_means_difference (<x1>, <x2>, <options> ...)

     This is the difference of means <t>-test for two samples.
     Arguments <x1> and <x2> are lists or column matrices containing two
     independent samples.  In case of different unknown variances (see
     options ''dev1', ''dev2' and ''varequal' bellow), the degrees of
     freedom are computed by means of the Welch approximation.  It also
     performs an asymptotic test based on the Central Limit Theorem if
     option ''asymptotic' is set to 'true'.

     Options:

        * 
        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''dev1', default ''unknown', this is the value of the standard
          deviation of the <x1> sample when it is known; valid values
          are: ''unknown' or a positive expression.

        * ''dev2', default ''unknown', this is the value of the standard
          deviation of the <x2> sample when it is known; valid values
          are: ''unknown' or a positive expression.

        * ''varequal', default 'false', whether variances should be
          considered to be equal or not; this option takes effect only
          when ''dev1' and/or ''dev2' are ''unknown'.

        * ''conflevel', default '95/100', confidence level for the
          confidence interval; it must be an expression which takes a
          value in (0,1).

        * ''asymptotic', default 'false', indicates whether it performs
          an exact <t>-test or an asymptotic one based on the Central
          Limit Theorem; valid values are 'true' and 'false'.

     The output of function 'test_means_difference' is an
     'inference_result' Maxima object showing the following results:

       1. ''diff_estimate': the difference of means estimate.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': confidence interval for the difference of
          means.

       4. ''method': inference procedure.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameter(s).

       8. ''p_value': p-value of the test.

     Examples:

     The equality of means is tested with two small samples <x> and <y>,
     against the alternative H_1: m_1>m_2, being m_1 and m_2 the
     populations means; variances are unknown and supposed to be
     different.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: [1.2,6.9,38.7,20.4,17.2]$
          (%i4) test_means_difference(x,y,'alternative='greater);
                      |              DIFFERENCE OF MEANS TEST
                      |
                      |         diff_estimate = 20.31999999999999
                      |
                      |                 conf_level = 0.95
                      |
                      |    conf_interval = [- .04597417812882298, inf]
                      |
          (%o4)       |        method = Exact t-test. Welch approx.
                      |
                      | hypotheses = H0: mean1 = mean2 , H1: mean1 > mean2
                      |
                      |           statistic = 1.838004300728477
                      |
                      |    distribution = [student_t, 8.62758740184604]
                      |
                      |            p_value = .05032746527991905

     The same test as before, but now variances are supposed to be
     equal.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: matrix([1.2],[6.9],[38.7],[20.4],[17.2])$
          (%i4) test_means_difference(x,y,'alternative='greater,
                                                           'varequal=true);
                      |              DIFFERENCE OF MEANS TEST
                      |
                      |         diff_estimate = 20.31999999999999
                      |
                      |                 conf_level = 0.95
                      |
                      |     conf_interval = [- .7722627696897568, inf]
                      |
          (%o4)       |   method = Exact t-test. Unknown equal variances
                      |
                      | hypotheses = H0: mean1 = mean2 , H1: mean1 > mean2
                      |
                      |           statistic = 1.765996124515009
                      |
                      |           distribution = [student_t, 9]
                      |
                      |            p_value = .05560320992529344

 -- Function: test_variance
          test_variance (<x>)
          test_variance (<x>, <options>, ...)

     This is the variance <chi^2>-test.  Argument <x> is a list or a
     column matrix containing a one dimensional sample taken from a
     normal population.

     Options:

        * ''mean', default ''unknown', is the population's mean, when it
          is known.

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''variance', default '1', this is the variance value
          (positive) to be checked.

        * ''conflevel', default '95/100', confidence level for the
          confidence interval; it must be an expression which takes a
          value in (0,1).

     The output of function 'test_variance' is an 'inference_result'
     Maxima object showing the following results:

       1. ''var_estimate': the sample variance.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': confidence interval for the population
          variance.

       4. ''method': inference procedure.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameter.

       8. ''p_value': p-value of the test.

     Examples:

     It is tested whether the variance of a population with unknown mean
     is equal to or greater than 200.

          (%i1) load("stats")$
          (%i2) x: [203,229,215,220,223,233,208,228,209]$
          (%i3) test_variance(x,'alternative='greater,'variance=200);
                       |                  VARIANCE TEST
                       |
                       |              var_estimate = 110.75
                       |
                       |                conf_level = 0.95
                       |
                       |     conf_interval = [57.13433376937479, inf]
                       |
          (%o3)        | method = Variance Chi-square test. Unknown mean.
                       |
                       |    hypotheses = H0: var = 200 , H1: var > 200
                       |
                       |                 statistic = 4.43
                       |
                       |             distribution = [chi2, 8]
                       |
                       |           p_value = .8163948512777689

 -- Function: test_variance_ratio
          test_variance_ratio (<x1>, <x2>)
          test_variance_ratio (<x1>, <x2>, <options> ...)

     This is the variance ratio <F>-test for two normal populations.
     Arguments <x1> and <x2> are lists or column matrices containing two
     independent samples.

     Options:

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''mean1', default ''unknown', when it is known, this is the
          mean of the population from which <x1> was taken.

        * ''mean2', default ''unknown', when it is known, this is the
          mean of the population from which <x2> was taken.

        * ''conflevel', default '95/100', confidence level for the
          confidence interval of the ratio; it must be an expression
          which takes a value in (0,1).

     The output of function 'test_variance_ratio' is an
     'inference_result' Maxima object showing the following results:

       1. ''ratio_estimate': the sample variance ratio.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': confidence interval for the variance ratio.

       4. ''method': inference procedure.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameters.

       8. ''p_value': p-value of the test.

     Examples:

     The equality of the variances of two normal populations is checked
     against the alternative that the first is greater than the second.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: [1.2,6.9,38.7,20.4,17.2]$
          (%i4) test_variance_ratio(x,y,'alternative='greater);
                        |              VARIANCE RATIO TEST
                        |
                        |       ratio_estimate = 2.316933391522034
                        |
                        |               conf_level = 0.95
                        |
                        |    conf_interval = [.3703504689507268, inf]
                        |
          (%o4)         | method = Variance ratio F-test. Unknown means.
                        |
                        | hypotheses = H0: var1 = var2 , H1: var1 > var2
                        |
                        |         statistic = 2.316933391522034
                        |
                        |            distribution = [f, 5, 4]
                        |
                        |          p_value = .2179269692254457

 -- Function: test_proportion
          test_proportion (<x>, <n>)
          test_proportion (<x>, <n>, <options> ...)

     Inferences on a proportion.  Argument <x> is the number of
     successes in <n> trials in a Bernoulli experiment with unknown
     probability.

     Options:

        * ''proportion', default '1/2', is the value of the proportion
          to be checked.

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''conflevel', default '95/100', confidence level for the
          confidence interval; it must be an expression which takes a
          value in (0,1).

        * ''asymptotic', default 'false', indicates whether it performs
          an exact test based on the binomial distribution, or an
          asymptotic one based on the Central Limit Theorem; valid
          values are 'true' and 'false'.

        * ''correct', default 'true', indicates whether Yates correction
          is applied or not.

     The output of function 'test_proportion' is an 'inference_result'
     Maxima object showing the following results:

       1. ''sample_proportion': the sample proportion.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': Wilson confidence interval for the
          proportion.

       4. ''method': inference procedure.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameters.

       8. ''p_value': p-value of the test.

     Examples:

     Performs an exact test.  The null hypothesis is H_0: p=1/2 against
     the one sided alternative H_1: p<1/2.

          (%i1) load("stats")$
          (%i2) test_proportion(45, 103, alternative = less);
                   |            PROPORTION TEST
                   |
                   | sample_proportion = .4368932038834951
                   |
                   |           conf_level = 0.95
                   |
                   | conf_interval = [0, 0.522714149150231]
                   |
          (%o2)    |     method = Exact binomial test.
                   |
                   | hypotheses = H0: p = 0.5 , H1: p < 0.5
                   |
                   |             statistic = 45
                   |
                   |  distribution = [binomial, 103, 0.5]
                   |
                   |      p_value = .1184509388901454

     A two sided asymptotic test.  Confidence level is 99/100.

          (%i1) load("stats")$
          (%i2) fpprintprec:7$
          (%i3) test_proportion(45, 103,
                            conflevel = 99/100, asymptotic=true);
                |                 PROPORTION TEST
                |
                |           sample_proportion = .43689
                |
                |                conf_level = 0.99
                |
                |        conf_interval = [.31422, .56749]
                |
          (%o3) | method = Asympthotic test with Yates correction.
                |
                |     hypotheses = H0: p = 0.5 , H1: p # 0.5
                |
                |               statistic = .43689
                |
                |      distribution = [normal, 0.5, .048872]
                |
                |                p_value = .19662

 -- Function: test_proportions_difference
          test_proportions_difference (<x1>, <n1>, <x2>, <n2>)
          test_proportions_difference (<x1>, <n1>, <x2>, <n2>, <options>
          ...)

     Inferences on the difference of two proportions.  Argument <x1> is
     the number of successes in <n1> trials in a Bernoulli experiment in
     the first population, and <x2> and <n2> are the corresponding
     values in the second population.  Samples are independent and the
     test is asymptotic.

     Options:

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided' ('p1 # p2'),
          ''greater' ('p1 > p2') and ''less' ('p1 < p2').

        * ''conflevel', default '95/100', confidence level for the
          confidence interval; it must be an expression which takes a
          value in (0,1).

        * ''correct', default 'true', indicates whether Yates correction
          is applied or not.

     The output of function 'test_proportions_difference' is an
     'inference_result' Maxima object showing the following results:

       1. ''proportions': list with the two sample proportions.

       2. ''conf_level': confidence level selected by the user.

       3. ''conf_interval': Confidence interval for the difference of
          proportions 'p1 - p2'.

       4. ''method': inference procedure and warning message in case of
          any of the samples sizes is less than 10.

       5. ''hypotheses': null and alternative hypotheses to be tested.

       6. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       7. ''distribution': distribution of the sample statistic,
          together with its parameters.

       8. ''p_value': p-value of the test.

     Examples:

     A machine produced 10 defective articles in a batch of 250.  After
     some maintenance work, it produces 4 defective in a batch of 150.
     In order to know if the machine has improved, we test the null
     hypothesis 'H0:p1=p2', against the alternative 'H0:p1>p2', where
     'p1' and 'p2' are the probabilities for one produced article to be
     defective before and after maintenance.  According to the p value,
     there is not enough evidence to accept the alternative.

          (%i1) load("stats")$
          (%i2) fpprintprec:7$
          (%i3) test_proportions_difference(10, 250, 4, 150,
                                          alternative = greater);
                |       DIFFERENCE OF PROPORTIONS TEST
                |
                |       proportions = [0.04, .02666667]
                |
                |              conf_level = 0.95
                |
                |      conf_interval = [- .02172761, 1]
                |
          (%o3) | method = Asymptotic test. Yates correction.
                |
                |   hypotheses = H0: p1 = p2 , H1: p1 > p2
                |
                |            statistic = .01333333
                |
                |    distribution = [normal, 0, .01898069]
                |
                |             p_value = .2411936

     Exact standard deviation of the asymptotic normal distribution when
     the data are unknown.

          (%i1) load("stats")$
          (%i2) stats_numer: false$
          (%i3) sol: test_proportions_difference(x1,n1,x2,n2)$
          (%i4) last(take_inference('distribution,sol));
                         1    1                  x2 + x1
                        (-- + --) (x2 + x1) (1 - -------)
                         n2   n1                 n2 + n1
          (%o4)    sqrt(---------------------------------)
                                     n2 + n1

 -- Function: test_sign
          test_sign (<x>)
          test_sign (<x>, <options> ...)

     This is the non parametric sign test for the median of a continuous
     population.  Argument <x> is a list or a column matrix containing a
     one dimensional sample.

     Options:

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

        * ''median', default '0', is the median value to be checked.

     The output of function 'test_sign' is an 'inference_result' Maxima
     object showing the following results:

       1. ''med_estimate': the sample median.

       2. ''method': inference procedure.

       3. ''hypotheses': null and alternative hypotheses to be tested.

       4. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       5. ''distribution': distribution of the sample statistic,
          together with its parameter(s).

       6. ''p_value': p-value of the test.

     Examples:

     Checks whether the population from which the sample was taken has
     median 6, against the alternative H_1: median > 6.

          (%i1) load("stats")$
          (%i2) x: [2,0.1,7,1.8,4,2.3,5.6,7.4,5.1,6.1,6]$
          (%i3) test_sign(x,'median=6,'alternative='greater);
                         |                  SIGN TEST
                         |
                         |              med_estimate = 5.1
                         |
                         |      method = Non parametric sign test.
                         |
          (%o3)          | hypotheses = H0: median = 6 , H1: median > 6
                         |
                         |                statistic = 7
                         |
                         |      distribution = [binomial, 10, 0.5]
                         |
                         |         p_value = .05468749999999989

 -- Function: test_signed_rank
          test_signed_rank (<x>)
          test_signed_rank (<x>, <options> ...)

     This is the Wilcoxon signed rank test to make inferences about the
     median of a continuous population.  Argument <x> is a list or a
     column matrix containing a one dimensional sample.  Performs normal
     approximation if the sample size is greater than 20, or if there
     are zeroes or ties.

     See also 'pdf_rank_test' and 'cdf_rank_test'.

     Options:

        * ''median', default '0', is the median value to be checked.

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

     The output of function 'test_signed_rank' is an 'inference_result'
     Maxima object with the following results:

       1. ''med_estimate': the sample median.

       2. ''method': inference procedure.

       3. ''hypotheses': null and alternative hypotheses to be tested.

       4. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       5. ''distribution': distribution of the sample statistic,
          together with its parameter(s).

       6. ''p_value': p-value of the test.

     Examples:

     Checks the null hypothesis H_0: median = 15 against the alternative
     H_1: median > 15.  This is an exact test, since there are no ties.

          (%i1) load("stats")$
          (%i2) x: [17.1,15.9,13.7,13.4,15.5,17.6]$
          (%i3) test_signed_rank(x,median=15,alternative=greater);
                           |             SIGNED RANK TEST
                           |
                           |           med_estimate = 15.7
                           |
                           |           method = Exact test
                           |
          (%o3)            | hypotheses = H0: med = 15 , H1: med > 15
                           |
                           |              statistic = 14
                           |
                           |     distribution = [signed_rank, 6]
                           |
                           |            p_value = 0.28125

     Checks the null hypothesis H_0: equal(median, 2.5) against the
     alternative H_1: not equal(median, 2.5).  This is an approximated
     test, since there are ties.

          (%i1) load("stats")$
          (%i2) y:[1.9,2.3,2.6,1.9,1.6,3.3,4.2,4,2.4,2.9,1.5,3,2.9,4.2,3.1]$
          (%i3) test_signed_rank(y,median=2.5);
                       |                 SIGNED RANK TEST
                       |
                       |                med_estimate = 2.9
                       |
                       |          method = Asymptotic test. Ties
                       |
          (%o3)        |    hypotheses = H0: med = 2.5 , H1: med # 2.5
                       |
                       |                 statistic = 76.5
                       |
                       | distribution = [normal, 60.5, 17.58195097251724]
                       |
                       |           p_value = .3628097734643669

 -- Function: test_rank_sum
          test_rank_sum (<x1>, <x2>)
          test_rank_sum (<x1>, <x2>, <option>)

     This is the Wilcoxon-Mann-Whitney test for comparing the medians of
     two continuous populations.  The first two arguments <x1> and <x2>
     are lists or column matrices with the data of two independent
     samples.  Performs normal approximation if any of the sample sizes
     is greater than 10, or if there are ties.

     Option:

        * ''alternative', default ''twosided', is the alternative
          hypothesis; valid values are: ''twosided', ''greater' and
          ''less'.

     The output of function 'test_rank_sum' is an 'inference_result'
     Maxima object with the following results:

       1. ''method': inference procedure.

       2. ''hypotheses': null and alternative hypotheses to be tested.

       3. ''statistic': value of the sample statistic used for testing
          the null hypothesis.

       4. ''distribution': distribution of the sample statistic,
          together with its parameters.

       5. ''p_value': p-value of the test.

     Examples:

     Checks whether populations have similar medians.  Samples sizes are
     small and an exact test is made.

          (%i1) load("stats")$
          (%i2) x:[12,15,17,38,42,10,23,35,28]$
          (%i3) y:[21,18,25,14,52,65,40,43]$
          (%i4) test_rank_sum(x,y);
                        |                 RANK SUM TEST
                        |
                        |              method = Exact test
                        |
                        | hypotheses = H0: med1 = med2 , H1: med1 # med2
          (%o4)         |
                        |                 statistic = 22
                        |
                        |        distribution = [rank_sum, 9, 8]
                        |
                        |          p_value = .1995886466474702

     Now, with greater samples and ties, the procedure makes normal
     approximation.  The alternative hypothesis is H_1: median1 <
     median2.

          (%i1) load("stats")$
          (%i2) x: [39,42,35,13,10,23,15,20,17,27]$
          (%i3) y: [20,52,66,19,41,32,44,25,14,39,43,35,19,56,27,15]$
          (%i4) test_rank_sum(x,y,'alternative='less);
                       |                  RANK SUM TEST
                       |
                       |          method = Asymptotic test. Ties
                       |
                       |  hypotheses = H0: med1 = med2 , H1: med1 < med2
          (%o4)        |
                       |                 statistic = 48.5
                       |
                       | distribution = [normal, 79.5, 18.95419580097078]
                       |
                       |           p_value = .05096985666598441

 -- Function: test_normality (<x>)

     Shapiro-Wilk test for normality.  Argument <x> is a list of
     numbers, and sample size must be greater than 2 and less or equal
     than 5000, otherwise, function 'test_normality' signals an error
     message.

     Reference:

     [1] Algorithm AS R94, Applied Statistics (1995), vol.44, no.4,
     547-551

     The output of function 'test_normality' is an 'inference_result'
     Maxima object with the following results:

       1. ''statistic': value of the <W> statistic.

       2. ''p_value': p-value under normal assumption.

     Examples:

     Checks for the normality of a population, based on a sample of size
     9.

          (%i1) load("stats")$
          (%i2) x:[12,15,17,38,42,10,23,35,28]$
          (%i3) test_normality(x);
                                 |      SHAPIRO - WILK TEST
                                 |
          (%o3)                  | statistic = .9251055695162436
                                 |
                                 |  p_value = .4361763918860381

 -- Function: linear_regression
          linear_regression (<x>)
          linear_regression (<x> <option>)

     Multivariate linear regression, y_i = b0 + b1*x_1i + b2*x_2i + ...
     + bk*x_ki + u_i, where u_i are N(0,sigma) independent random
     variables.  Argument <x> must be a matrix with more than one
     column.  The last column is considered as the responses (y_i).

     Option:

        * ''conflevel', default '95/100', confidence level for the
          confidence intervals; it must be an expression which takes a
          value in (0,1).

     The output of function 'linear_regression' is an 'inference_result'
     Maxima object with the following results:

       1. ''b_estimation': regression coefficients estimates.

       2. ''b_covariances': covariance matrix of the regression
          coefficients estimates.

       3. 'b_conf_int': confidence intervals of the regression
          coefficients.

       4. 'b_statistics': statistics for testing coefficient.

       5. 'b_p_values': p-values for coefficient tests.

       6. 'b_distribution': probability distribution for coefficient
          tests.

       7. 'v_estimation': unbiased variance estimator.

       8. 'v_conf_int': variance confidence interval.

       9. 'v_distribution': probability distribution for variance test.

       10. 'residuals': residuals.

       11. 'adc': adjusted determination coefficient.

       12. 'aic': Akaike's information criterion.

       13. 'bic': Bayes's information criterion.

     Only items 1, 4, 5, 6, 7, 8, 9 and 11 above, in this order, are
     shown by default.  The rest remain hidden until the user makes use
     of functions 'items_inference' and 'take_inference'.

     Example:

     Fitting a linear model to a trivariate sample.  The last column is
     considered as the responses (y_i).

          (%i2) load("stats")$
          (%i3) X:matrix(
              [58,111,64],[84,131,78],[78,158,83],
              [81,147,88],[82,121,89],[102,165,99],
              [85,174,101],[102,169,102])$
          (%i4) fpprintprec: 4$
          (%i5) res: linear_regression(X);
                       |       LINEAR REGRESSION MODEL
                       |
                       | b_estimation = [9.054, .5203, .2397]
                       |
                       | b_statistics = [.6051, 2.246, 1.74]
                       |
                       | b_p_values = [.5715, .07466, .1423]
                       |
          (%o5)        |   b_distribution = [student_t, 5]
                       |
                       |         v_estimation = 35.27
                       |
                       |     v_conf_int = [13.74, 212.2]
                       |
                       |      v_distribution = [chi2, 5]
                       |
                       |             adc = .7922
          (%i6) items_inference(res);
          (%o6) [b_estimation, b_covariances, b_conf_int, b_statistics,
          b_p_values, b_distribution, v_estimation, v_conf_int,
          v_distribution, residuals, adc, aic, bic]
          (%i7) take_inference('b_covariances, res);
                            [  223.9    - 1.12   - .8532  ]
                            [                             ]
          (%o7)             [ - 1.12    .05367   - .02305 ]
                            [                             ]
                            [ - .8532  - .02305   .01898  ]
          (%i8) take_inference('bic, res);
          (%o8)                          30.98
          (%i9) load("draw")$
          (%i10) draw2d(
              points_joined = true,
              grid = true,
              points(take_inference('residuals, res)) )$


File: maxima.info,  Node: Functions and Variables for special distributions,  Prev: Functions and Variables for stats,  Up: Top

77.4 Functions and Variables for special distributions
======================================================

 -- Function: pdf_signed_rank (<x>, <n>)
     Probability density function of the exact distribution of the
     signed rank statistic.  Argument <x> is a real number and <n> a
     positive integer.

     See also 'test_signed_rank'.

 -- Function: cdf_signed_rank (<x>, <n>)
     Cumulative density function of the exact distribution of the signed
     rank statistic.  Argument <x> is a real number and <n> a positive
     integer.

     See also 'test_signed_rank'.

 -- Function: pdf_rank_sum (<x>, <n>, <m>)
     Probability density function of the exact distribution of the rank
     sum statistic.  Argument <x> is a real number and <n> and <m> are
     both positive integers.

     See also 'test_rank_sum'.

 -- Function: cdf_rank_sum (<x>, <n>, <m>)
     Cumulative density function of the exact distribution of the rank
     sum statistic.  Argument <x> is a real number and <n> and <m> are
     both positive integers.

     See also 'test_rank_sum'.


File: maxima.info,  Node: stirling,  Next: stringproc,  Prev: stats,  Up: Top

78 stirling
***********

* Menu:

* Functions and Variables for stirling::


File: maxima.info,  Node: Functions and Variables for stirling,  Prev: stirling,  Up: stirling

78.1 Functions and Variables for stirling
=========================================

 -- Function: stirling
          stirling (<z>,<n>)
          stirling (<z>,<n>,<pred>)

     Replace 'gamma(x)' with the O(1/x^(2n-1)) Stirling formula.  when
     <n> isn't a nonnegative integer, signal an error.  With the
     optional third argument 'pred', the Stirling formula is applied
     only when 'pred' is true.

     Reference: Abramowitz & Stegun, " Handbook of mathematical
     functions", 6.1.40.

     Examples:
          (%i1) load (stirling)$

          (%i2) stirling(gamma(%alpha+x)/gamma(x),1);
                 1/2 - x             x + %alpha - 1/2
          (%o2) x        (x + %alpha)
                                             1           1
                                      --------------- - ---- - %alpha
                                      12 (x + %alpha)   12 x
                                    %e
          (%i3) taylor(%,x,inf,1);
                              %alpha       2    %alpha
                    %alpha   x       %alpha  - x       %alpha
          (%o3)/T/ x       + -------------------------------- + . . .
                                           2 x
          (%i4) map('factor,%);
                                                 %alpha - 1
                   %alpha   (%alpha - 1) %alpha x
          (%o4)   x       + -------------------------------
                                            2

     The function 'stirling' knows the difference between the variable
     'gamma' and the function gamma:

          (%i5) stirling(gamma + gamma(x),0);
                                              x - 1/2   - x
          (%o5)    gamma + sqrt(2) sqrt(%pi) x        %e
          (%i6) stirling(gamma(y) + gamma(x),0);
                                   y - 1/2   - y
          (%o6) sqrt(2) sqrt(%pi) y        %e
                                                        x - 1/2   - x
                                   + sqrt(2) sqrt(%pi) x        %e

     To apply the Stirling formula only to terms that involve the
     variable 'k', use an optional third argument; for example
          (%i7) makegamma(pochhammer(a,k)/pochhammer(b,k));
          (%o7) (gamma(b)*gamma(k+a))/(gamma(a)*gamma(k+b))
          (%i8) stirling(%,1, lambda([s], not(freeof(k,s))));
          (%o8) (%e^(b-a)*gamma(b)*(k+a)^(k+a-1/2)*(k+b)^(-k-b+1/2))/gamma(a)
     The terms 'gamma(a)' and 'gamma(b)' are free of 'k', so the
     Stirling formula was not applied to these two terms.

     To use this function write first 'load("stirling")'.


File: maxima.info,  Node: stringproc,  Next: to_poly_solve,  Prev: stirling,  Up: Top

79 stringproc
*************

* Menu:

* Introduction to string processing::
* Functions and Variables for input and output::
* Functions and Variables for characters::
* Functions and Variables for strings::


File: maxima.info,  Node: Introduction to string processing,  Next: Functions and Variables for input and output,  Prev: stringproc,  Up: stringproc

79.1 Introduction to string processing
======================================

'stringproc.lisp' enlarges Maximas capabilities of working with strings
and adds some useful functions for file in/output.

   For questions and bugs please mail to volkervannek at gmail dot com .

   In Maxima a string is easily constructed by typing "text".  'stringp'
tests for strings.

     (%i1) m: "text";
     (%o1)                         text
     (%i2) stringp(m);
     (%o2)                         true

   Characters are represented as strings of length 1.  These are not
Lisp characters.  Tests can be done with 'charp' (respectively 'lcharp'
and conversion from Lisp to Maxima characters with 'cunlisp').

     (%i1) c: "e";
     (%o1)                           e
     (%i2) [charp(c),lcharp(c)];
     (%o2)                     [true, false]
     (%i3) supcase(c);
     (%o3)                           E
     (%i4) charp(%);
     (%o4)                         true

   All functions in 'stringproc.lisp' that return characters, return
Maxima-characters.  Due to the fact, that the introduced characters are
strings of length 1, you can use a lot of string functions also for
characters.  As seen, 'supcase' is one example.

   It is important to know, that the first character in a Maxima-string
is at position 1.  This is designed due to the fact that the first
element in a Maxima-list is at position 1 too.  See definitions of
'charat' and 'charlist' for examples.

   In applications string-functions are often used when working with
files.  You will find some useful stream- and print-functions in
'stringproc.lisp'.  The following example shows some of the here
introduced functions at work.

   Example:

   'openw' returns an output stream to a file, 'printf' then allows
formatted writing to this file.  See 'printf' for details.

     (%i1) s: openw("E:/file.txt");
     (%o1)                    #<output stream E:/file.txt>
     (%i2) for n:0 thru 10 do printf( s, "~d ", fib(n) );
     (%o2)                                done
     (%i3) printf( s, "~%~d ~f ~a ~a ~f ~e ~a~%",
                   42,1.234,sqrt(2),%pi,1.0e-2,1.0e-2,1.0b-2 );
     (%o3)                                false
     (%i4) close(s);
     (%o4)                                true

   After closing the stream you can open it again, this time with input
direction.  'readline' returns the entire line as one string.  The
'stringproc' package now offers a lot of functions for manipulating
strings.  Tokenizing can be done by 'split' or 'tokens'.

     (%i5) s: openr("E:/file.txt");
     (%o5)                     #<input stream E:/file.txt>
     (%i6) readline(s);
     (%o6)                     0 1 1 2 3 5 8 13 21 34 55
     (%i7) line: readline(s);
     (%o7)               42 1.234 sqrt(2) %pi 0.01 1.0E-2 1.0b-2
     (%i8) list: tokens(line);
     (%o8)           [42, 1.234, sqrt(2), %pi, 0.01, 1.0E-2, 1.0b-2]
     (%i9) map( parse_string, list );
     (%o9)            [42, 1.234, sqrt(2), %pi, 0.01, 0.01, 1.0b-2]
     (%i10) float(%);
     (%o10) [42.0, 1.234, 1.414213562373095, 3.141592653589793, 0.01,
                                                          0.01, 0.01]
     (%i11) readline(s);
     (%o11)                               false
     (%i12) close(s)$

   'readline' returns 'false' when the end of file occurs.


File: maxima.info,  Node: Functions and Variables for input and output,  Next: Functions and Variables for characters,  Prev: Introduction to string processing,  Up: stringproc

79.2 Functions and Variables for input and output
=================================================

Example:

     (%i1) s: openw("E:/file.txt");
     (%o1)                     #<output stream E:/file.txt>
     (%i2) control:
     "~2tAn atom: ~20t~a~%~2tand a list: ~20t~{~r ~}~%~2t\
     and an integer: ~20t~d~%"$
     (%i3) printf( s,control, 'true,[1,2,3],42 )$
     (%o3)                                false
     (%i4) close(s);
     (%o4)                                true
     (%i5) s: openr("E:/file.txt");
     (%o5)                     #<input stream E:/file.txt>
     (%i6) while stringp( tmp:readline(s) ) do print(tmp)$
       An atom:          true
       and a list:       one two three
       and an integer:   42
     (%i7) close(s)$

 -- Function: close (<stream>)
     Closes <stream> and returns 'true' if <stream> had been open.

 -- Function: flength (<stream>)
     Returns the number of elements in <stream> where <stream> has to be
     a stream from or to a file.

 -- Function: fposition
          fposition (<stream>)
          fposition (<stream>, <pos>)

     Returns the current position in <stream>, if <pos> is not used.  If
     <pos> is used, 'fposition' sets the position in <stream>.  <stream>
     has to be a stream from or to a file and <pos> has to be a positive
     number where the first element in <stream> is in position 1.

 -- Function: freshline
          freshline ()
          freshline (<stream>)

     Writes a new line (to <stream>), if the position is not at the
     beginning of a line.  See also 'newline'.

 -- Function: get_output_stream_string (<stream>)

     Returns a string containing all the characters currently present in
     <stream> which must be an open string-output stream.  The returned
     characters are removed from <stream>.

     Example: See *note make_string_output_stream:: .

 -- Function: make_string_input_stream
          make_string_input_stream (<string>)
          make_string_input_stream (<string>, <start>)
          make_string_input_stream (<string>, <start>, <end>)

     Returns an input stream which contains parts of <string> and an end
     of file.  Without optional arguments the stream contains the entire
     string and is positioned in front of the first character.  <start>
     and <end> define the substring contained in the stream.  The first
     character is available at position 1.

          (%i1) istream : make_string_input_stream("text", 1, 4);
          (%o1)              #<string-input stream from "text">
          (%i2) (while (c : readchar(istream)) # false do sprint(c), newline())$
          t e x
          (%i3) close(istream)$

 -- Function: make_string_output_stream ()

     Returns an output stream that accepts characters.  Characters
     currently present in this stream can be retrieved by *note
     get_output_stream_string::.

          (%i1) ostream : make_string_output_stream();
          (%o1)               #<string-output stream 09622ea0>
          (%i2) printf(ostream, "foo")$

          (%i3) printf(ostream, "bar")$

          (%i4) string : get_output_stream_string(ostream);
          (%o4)                            foobar
          (%i5) printf(ostream, "baz")$

          (%i6) string : get_output_stream_string(ostream);
          (%o6)                              baz
          (%i7) close(ostream)$

 -- Function: newline
          newline ()
          newline (<stream>)

     Writes a new line (to <stream>).  See 'sprint' for an example of
     using 'newline()'.  Note that there are some cases, where
     'newline()' does not work as expected.

 -- Function: opena (<file>)
     Returns an output stream to <file>.  If an existing file is opened,
     'opena' appends elements at the end of file.

 -- Function: openr (<file>)
     Returns an input stream to <file>.  If <file> does not exist, it
     will be created.

 -- Function: openw (<file>)
     Returns an output stream to <file>.  If <file> does not exist, it
     will be created.  If an existing file is opened, 'openw'
     destructively modifies <file>.

 -- Function: printf
          printf (<dest>, <string>)
          printf (<dest>, <string>, <expr_1>, ..., <expr_n>)

     Produces formatted output by outputting the characters of
     control-string <string> and observing that a tilde introduces a
     directive.  The character after the tilde, possibly preceded by
     prefix parameters and modifiers, specifies what kind of formatting
     is desired.  Most directives use one or more elements of the
     arguments <expr_1>, ..., <expr_n> to create their output.

     If <dest> is a stream or 'true', then 'printf' returns 'false'.
     Otherwise, 'printf' returns a string containing the output.

     'printf' provides the Common Lisp function 'format' in Maxima.  The
     following example illustrates the general relation between these
     two functions.

          (%i1) printf(true, "R~dD~d~%", 2, 2);
          R2D2
          (%o1)                                false
          (%i2) :lisp (format t "R~dD~d~%" 2 2)
          R2D2
          NIL

     The following description is limited to a rough sketch of the
     possibilities of 'printf'.  The Lisp function 'format' is described
     in detail in many reference books.  Of good help is e.g.  the free
     available online-manual "Common Lisp the Language" by Guy L.
     Steele.  See chapter 22.3.3 there.

             ~%       new line
             ~&       fresh line
             ~t       tab
             ~$       monetary
             ~d       decimal integer
             ~b       binary integer
             ~o       octal integer
             ~x       hexadecimal integer
             ~br      base-b integer
             ~r       spell an integer
             ~p       plural
             ~f       floating point
             ~e       scientific notation
             ~g       ~f or ~e, depending upon magnitude
             ~h       bigfloat
             ~a       uses Maxima function string
             ~s       like ~a, but output enclosed in "double quotes"
             ~~       ~
             ~<       justification, ~> terminates
             ~(       case conversion, ~) terminates
             ~[       selection, ~] terminates
             ~{       iteration, ~} terminates

     The directive ~h for bigfloat is no Lisp-standard and is therefore
     illustrated below.

     Note that the directive ~* is not supported.

     If <dest> is a stream or 'true', then 'printf' returns 'false'.
     Otherwise, 'printf' returns a string containing the output.

          (%i1) printf( false, "~a ~a ~4f ~a ~@r",
                        "String",sym,bound,sqrt(12),144), bound = 1.234;
          (%o1)                 String sym 1.23 2*sqrt(3) CXLIV
          (%i2) printf( false,"~{~a ~}",["one",2,"THREE"] );
          (%o2)                          one 2 THREE
          (%i3) printf(true,"~{~{~9,1f ~}~%~}",mat ),
                    mat = args(matrix([1.1,2,3.33],[4,5,6],[7,8.88,9]))$
                1.1       2.0       3.3
                4.0       5.0       6.0
                7.0       8.9       9.0
          (%i4) control: "~:(~r~) bird~p ~[is~;are~] singing."$
          (%i5) printf( false,control, n,n,if n=1 then 1 else 2 ), n=2;
          (%o5)                    Two birds are singing.

     The directive ~h has been introduced to handle bigfloats.

          ~w,d,e,x,o,p@H
           w : width
           d : decimal digits behind floating point
           e : minimal exponent digits
           x : preferred exponent
           o : overflow character
           p : padding character
           @ : display sign for positive numbers

          (%i1) fpprec : 1000$
          (%i2) printf(true, "|~h|~%", 2.b0^-64)$
          |0.0000000000000000000542101086242752217003726400434970855712890625|
          (%i3) fpprec : 26$
          (%i4) printf(true, "|~h|~%", sqrt(2))$
          |1.4142135623730950488016887|
          (%i5) fpprec : 24$
          (%i6) printf(true, "|~h|~%", sqrt(2))$
          |1.41421356237309504880169|
          (%i7) printf(true, "|~28h|~%", sqrt(2))$
          |   1.41421356237309504880169|
          (%i8) printf(true, "|~28,,,,,'*h|~%", sqrt(2))$
          |***1.41421356237309504880169|
          (%i9) printf(true, "|~,18h|~%", sqrt(2))$
          |1.414213562373095049|
          (%i10) printf(true, "|~,,,-3h|~%", sqrt(2))$
          |1414.21356237309504880169b-3|
          (%i11) printf(true, "|~,,2,-3h|~%", sqrt(2))$
          |1414.21356237309504880169b-03|
          (%i12) printf(true, "|~20h|~%", sqrt(2))$
          |1.41421356237309504880169|
          (%i13) printf(true, "|~20,,,,'+h|~%", sqrt(2))$
          |++++++++++++++++++++|

 -- Function: readchar (<stream>)

     Removes and returns the first character in <stream>.  If the end of
     file is encountered 'readchar' returns 'false'.

     Example: See *note make_string_input_stream::.

 -- Function: readline (<stream>)
     Returns a string containing the characters from the current
     position in <stream> up to the end of the line or 'false' if the
     end of the file is encountered.

 -- Function: sprint (<expr_1>, ..., <expr_n>)

     Evaluates and displays its arguments one after the other 'on a
     line' starting at the leftmost position.  The numbers are printed
     with the '-' right next to the number, and it disregards line
     length.  'newline()', which will be autoloaded from
     'stringproc.lisp' might be useful, if you whish to place
     intermediate line breaking.

     Example:

          (%i1) for n:0 thru 19 do sprint( fib(n) )$
          0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
          (%i2) for n:0 thru 22 do (
                   sprint(fib(n)), if mod(n,10)=9 then newline() )$
          0 1 1 2 3 5 8 13 21 34
          55 89 144 233 377 610 987 1597 2584 4181
          6765 10946 17711


File: maxima.info,  Node: Functions and Variables for characters,  Next: Functions and Variables for strings,  Prev: Functions and Variables for input and output,  Up: stringproc

79.3 Functions and Variables for characters
===========================================

 -- Function: alphacharp (<char>)
     Returns 'true' if <char> is an alphabetic character.

 -- Function: alphanumericp (<char>)
     Returns 'true' if <char> is an alphabetic character or a digit.

 -- Function: ascii (<int>)
     Returns the character corresponding to the ASCII number <int>.  (
     -1 < int < 256 )

          (%i1) for n from 0 thru 255 do (
             tmp: ascii(n), if alphacharp(tmp) then sprint(tmp),
                if n=96 then newline() )$
          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          a b c d e f g h i j k l m n o p q r s t u v w x y z

 -- Function: cequal (<char_1>, <char_2>)
     Returns 'true' if <char_1> and <char_2> are the same.

 -- Function: cequalignore (<char_1>, <char_2>)
     Like 'cequal' but ignores case.

 -- Function: cgreaterp (<char_1>, <char_2>)
     Returns 'true' if the ASCII number of <char_1> is greater than the
     number of <char_2>.

 -- Function: cgreaterpignore (<char_1>, <char_2>)
     Like 'cgreaterp' but ignores case.

 -- Function: charp (<obj>)
     Returns 'true' if <obj> is a Maxima-character.  See introduction
     for example.

 -- Function: cint (<char>)
     Returns the ASCII number of <char>.

 -- Function: clessp (<char_1>, <char_2>)
     Returns 'true' if the ASCII number of <char_1> is less than the
     number of <char_2>.

 -- Function: clesspignore (<char_1>, <char_2>)
     Like 'clessp' but ignores case.

 -- Function: constituent (<char>)
     Returns 'true' if <char> is a graphic character and not the space
     character.  A graphic character is a character one can see, plus
     the space character.  ('constituent' is defined by Paul Graham,
     ANSI Common Lisp, 1996, page 67.)

          (%i1) for n from 0 thru 255 do (
          tmp: ascii(n), if constituent(tmp) then sprint(tmp) )$
          ! " #  %  ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B
          C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c
          d e f g h i j k l m n o p q r s t u v w x y z { | } ~

 -- Function: cunlisp (<lisp_char>)
     Converts a Lisp-character into a Maxima-character.  (You won't need
     it.)

 -- Function: digitcharp (<char>)
     Returns 'true' if <char> is a digit.

 -- Function: lcharp (<obj>)
     Returns 'true' if <obj> is a Lisp-character.  (You won't need it.)

 -- Function: lowercasep (<char>)
     Returns 'true' if <char> is a lowercase character.

 -- Variable: newline
     The newline character.

 -- Variable: space
     The space character.

 -- Variable: tab
     The tab character.

 -- Function: uppercasep (<char>)
     Returns 'true' if <char> is an uppercase character.


File: maxima.info,  Node: Functions and Variables for strings,  Prev: Functions and Variables for characters,  Up: stringproc

79.4 Functions and Variables for strings
========================================

 -- Function: base64 (<string>)

     Returns the base64-representation of <string> as a string.

     Example:

          (%i1) base64 : base64("foo bar baz");
          (%o1)                       Zm9vIGJhciBiYXo=
          (%i2) string : base64_decode(base64);
          (%o2)                          foo bar baz

 -- Function: base64_decode (<base64-string>)

     Decodes the string <base64-string> coded in base64 back to the
     original string.

     Example: See *note base64::.

 -- Function: charat (<string>, <n>)
     Returns the <n>-th character of <string>.  The first character in
     <string> is returned with <n> = 1.

          (%i1) charat("Lisp",1);
          (%o1)                           L

 -- Function: charlist (<string>)
     Returns the list of all characters in <string>.

          (%i1) charlist("Lisp");
          (%o1)                     [L, i, s, p]
          (%i2) %[1];
          (%o2)                           L

 -- Function: eval_string (<str>)
     Parse the string <str> as a Maxima expression and evaluate it.  The
     string <str> may or may not have a terminator (dollar sign '$' or
     semicolon ';').  Only the first expression is parsed and evaluated,
     if there is more than one.

     Complain if <str> is not a string.

     Examples:

          (%i1) eval_string ("foo: 42; bar: foo^2 + baz");
          (%o1)                       42
          (%i2) eval_string ("(foo: 42, bar: foo^2 + baz)");
          (%o2)                   baz + 1764

     See also 'parse_string'.

 -- Function: md5sum (<string>)

     Returns the md5 checksum of a <string>.  The return value is a
     string to guarantee 32 hex characters.  To parse the returned value
     into an integer please set the input base to 16 and prefix the
     string by zero.

     Example:

          (%i1) string : md5sum("foo bar baz");
          (%o1)                  ab07acbb1e496801937adfa772424bf7
          (%i2) ibase : obase : 16.$

          (%i3) integer : parse_string(sconcat(0, string));
          (%o3)                 0ab07acbb1e496801937adfa772424bf7

 -- Function: parse_string (<str>)
     Parse the string <str> as a Maxima expression (do not evaluate it).
     The string <str> may or may not have a terminator (dollar sign '$'
     or semicolon ';').  Only the first expression is parsed, if there
     is more than one.

     Complain if <str> is not a string.

     Examples:

          (%i1) parse_string ("foo: 42; bar: foo^2 + baz");
          (%o1)                    foo : 42
          (%i2) parse_string ("(foo: 42, bar: foo^2 + baz)");
                                             2
          (%o2)          (foo : 42, bar : foo  + baz)

     See also 'eval_string'.

 -- Function: scopy (<string>)
     Returns a copy of <string> as a new string.

 -- Function: sdowncase
          sdowncase (<string>)
          sdowncase (<string>, <start>)
          sdowncase (<string>, <start>, <end>)

     Like 'supcase', but uppercase characters are converted to
     lowercase.

 -- Function: sequal (<string_1>, <string_2>)
     Returns 'true' if <string_1> and <string_2> are the same length and
     contain the same characters.

 -- Function: sequalignore (<string_1>, <string_2>)
     Like 'sequal' but ignores case.

 -- Function: sexplode (<string>)
     'sexplode' is an alias for function 'charlist'.

 -- Function: sha1sum (<string>)

     Returns the sha1 fingerprint of a <string>.  The return value is a
     string to guarantee 48 hex characters.  To parse the returned value
     into an integer please set the input base to 16 and prefix the
     string by zero.

     Example:

          (%i1) string : sha1sum("foo bar baz");
          (%o1)              c7567e8b39e2428e38bf9c9226ac68de4c67dc39
          (%i2) ibase : obase : 16.$

          (%i3) integer : parse_string(sconcat(0, string));
          (%o3)              0c7567e8b39e2428e38bf9c9226ac68de4c67dc39

 -- Function: simplode
          simplode (<list>)
          simplode (<list>, <delim>)

     'simplode' takes a list of expressions and concatenates them into a
     string.  If no delimiter <delim> is specified, 'simplode' uses no
     delimiter.  <delim> can be any string.

          (%i1) simplode(["xx[",3,"]:",expand((x+y)^3)]);
          (%o1)             xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
          (%i2) simplode( sexplode("stars")," * " );
          (%o2)                   s * t * a * r * s
          (%i3) simplode( ["One","more","coffee."]," " );
          (%o3)                   One more coffee.

 -- Function: sinsert (<seq>, <string>, <pos>)
     Returns a string that is a concatenation of 'substring (<string>,
     1, <pos> - 1)', the string <seq> and 'substring (<string>, <pos>)'.
     Note that the first character in <string> is in position 1.

          (%i1) s: "A submarine."$
          (%i2) concat( substring(s,1,3),"yellow ",substring(s,3) );
          (%o2)                  A yellow submarine.
          (%i3) sinsert("hollow ",s,3);
          (%o3)                  A hollow submarine.

 -- Function: sinvertcase
          sinvertcase (<string>)
          sinvertcase (<string>, <start>)
          sinvertcase (<string>, <start>, <end>)

     Returns <string> except that each character from position <start>
     to <end> is inverted.  If <end> is not given, all characters from
     <start> to the end of <string> are replaced.

          (%i1) sinvertcase("sInvertCase");
          (%o1)                      SiNVERTcASE

 -- Function: slength (<string>)
     Returns the number of characters in <string>.

 -- Function: smake (<num>, <char>)
     Returns a new string with a number of <num> characters <char>.

          (%i1) smake(3,"w");
          (%o1)                          www

 -- Function: smismatch
          smismatch (<string_1>, <string_2>)
          smismatch (<string_1>, <string_2>, <test>)

     Returns the position of the first character of <string_1> at which
     <string_1> and <string_2> differ or 'false'.  Default test function
     for matching is 'sequal'.  If 'smismatch' should ignore case, use
     'sequalignore' as test.

          (%i1) smismatch("seven","seventh");
          (%o1)                           6

 -- Function: split
          split (<string>)
          split (<string>, <delim>)
          split (<string>, <delim>, <multiple>)

     Returns the list of all tokens in <string>.  Each token is an
     unparsed string.  'split' uses <delim> as delimiter.  If <delim> is
     not given, the space character is the default delimiter.
     <multiple> is a boolean variable with 'true' by default.  Multiple
     delimiters are read as one.  This is useful if tabs are saved as
     multiple space characters.  If <multiple> is set to 'false', each
     delimiter is noted.

          (%i1) split("1.2   2.3   3.4   4.5");
          (%o1)                 [1.2, 2.3, 3.4, 4.5]
          (%i2) split("first;;third;fourth",";",false);
          (%o2)               [first, , third, fourth]

 -- Function: sposition (<char>, <string>)
     Returns the position of the first character in <string> which
     matches <char>.  The first character in <string> is in position 1.
     For matching characters ignoring case see 'ssearch'.

 -- Function: sremove
          sremove (<seq>, <string>)
          sremove (<seq>, <string>, <test>)
          sremove (<seq>, <string>, <test>, <start>)
          sremove (<seq>, <string>, <test>, <start>, <end>)

     Returns a string like <string> but without all substrings matching
     <seq>.  Default test function for matching is 'sequal'.  If
     'sremove' should ignore case while searching for <seq>, use
     'sequalignore' as test.  Use <start> and <end> to limit searching.
     Note that the first character in <string> is in position 1.

          (%i1) sremove("n't","I don't like coffee.");
          (%o1)                   I do like coffee.
          (%i2) sremove ("DO ",%,'sequalignore);
          (%o2)                    I like coffee.

 -- Function: sremovefirst
          sremovefirst (<seq>, <string>)
          sremovefirst (<seq>, <string>, <test>)
          sremovefirst (<seq>, <string>, <test>, <start>)
          sremovefirst (<seq>, <string>, <test>, <start>, <end>)

     Like 'sremove' except that only the first substring that matches
     <seq> is removed.

 -- Function: sreverse (<string>)
     Returns a string with all the characters of <string> in reverse
     order.

 -- Function: ssearch
          ssearch (<seq>, <string>)
          ssearch (<seq>, <string>, <test>)
          ssearch (<seq>, <string>, <test>, <start>)
          ssearch (<seq>, <string>, <test>, <start>, <end>)

     Returns the position of the first substring of <string> that
     matches the string <seq>.  Default test function for matching is
     'sequal'.  If 'ssearch' should ignore case, use 'sequalignore' as
     test.  Use <start> and <end> to limit searching.  Note that the
     first character in <string> is in position 1.

          (%i1) ssearch("~s","~{~S ~}~%",'sequalignore);
          (%o1)                                  4

 -- Function: ssort
          ssort (<string>)
          ssort (<string>, <test>)

     Returns a string that contains all characters from <string> in an
     order such there are no two successive characters <c> and <d> such
     that 'test (<c>, <d>)' is 'false' and 'test (<d>, <c>)' is 'true'.
     Default test function for sorting is <clessp>.  The set of test
     functions is '{clessp, clesspignore, cgreaterp, cgreaterpignore,
     cequal, cequalignore}'.

          (%i1) ssort("I don't like Mondays.");
          (%o1)                    '.IMaddeiklnnoosty
          (%i2) ssort("I don't like Mondays.",'cgreaterpignore);
          (%o2)                 ytsoonnMlkIiedda.'

 -- Function: ssubst
          ssubst (<new>, <old>, <string>)
          ssubst (<new>, <old>, <string>, <test>)
          ssubst (<new>, <old>, <string>, <test>, <start>)
          ssubst (<new>, <old>, <string>, <test>, <start>, <end>)

     Returns a string like <string> except that all substrings matching
     <old> are replaced by <new>.  <old> and <new> need not to be of the
     same length.  Default test function for matching is 'sequal'.  If
     'ssubst' should ignore case while searching for old, use
     'sequalignore' as test.  Use <start> and <end> to limit searching.
     Note that the first character in <string> is in position 1.

          (%i1) ssubst("like","hate","I hate Thai food. I hate green tea.");
          (%o1)          I like Thai food. I like green tea.
          (%i2) ssubst("Indian","thai",%,'sequalignore,8,12);
          (%o2)         I like Indian food. I like green tea.

 -- Function: ssubstfirst
          ssubstfirst (<new>, <old>, <string>)
          ssubstfirst (<new>, <old>, <string>, <test>)
          ssubstfirst (<new>, <old>, <string>, <test>, <start>)
          ssubstfirst (<new>, <old>, <string>, <test>, <start>, <end>)

     Like 'subst' except that only the first substring that matches
     <old> is replaced.

 -- Function: strim (<seq>,<string>)
     Returns a string like <string>, but with all characters that appear
     in <seq> removed from both ends.

          (%i1) "/* comment */"$
          (%i2) strim(" /*",%);
          (%o2)                        comment
          (%i3) slength(%);
          (%o3)                           7

 -- Function: striml (<seq>, <string>)
     Like 'strim' except that only the left end of <string> is trimmed.

 -- Function: strimr (<seq>, <string>)
     Like 'strim' except that only the right end of string is trimmed.

 -- Function: stringp (<obj>)
     Returns 'true' if <obj> is a string.  See introduction for example.

 -- Function: substring
          substring (<string>, <start>)
          substring (<string>, <start>, <end>)

     Returns the substring of <string> beginning at position <start> and
     ending at position <end>.  The character at position <end> is not
     included.  If <end> is not given, the substring contains the rest
     of the string.  Note that the first character in <string> is in
     position 1.

          (%i1) substring("substring",4);
          (%o1)                        string
          (%i2) substring(%,4,6);
          (%o2)                          in

 -- Function: supcase
          supcase (<string>)
          supcase (<string>, <start>)
          supcase (<string>, <start>, <end>)

     Returns <string> except that lowercase characters from position
     <start> to <end> are replaced by the corresponding uppercase ones.
     If <end> is not given, all lowercase characters from <start> to the
     end of <string> are replaced.

          (%i1) supcase("english",1,2);
          (%o1)                        English

 -- Function: tokens
          tokens (<string>)
          tokens (<string>, <test>)

     Returns a list of tokens, which have been extracted from <string>.
     The tokens are substrings whose characters satisfy a certain test
     function.  If test is not given, <constituent> is used as the
     default test.  '{constituent, alphacharp, digitcharp, lowercasep,
     uppercasep, charp, characterp, alphanumericp}' is the set of test
     functions.  (The Lisp-version of 'tokens' is written by Paul
     Graham.  ANSI Common Lisp, 1996, page 67.)

          (%i1) tokens("24 October 2005");
          (%o1)                  [24, October, 2005]
          (%i2) tokens("05-10-24",'digitcharp);
          (%o2)                     [05, 10, 24]
          (%i3) map(parse_string,%);
          (%o3)                      [5, 10, 24]


File: maxima.info,  Node: to_poly_solve,  Next: unit,  Prev: stringproc,  Up: Top

80 to_poly_solve
****************

* Menu:

* Functions and Variables for to_poly_solve::


File: maxima.info,  Node: Functions and Variables for to_poly_solve,  Prev: to_poly_solve,  Up: to_poly_solve

80.1 Functions and Variables for to_poly_solve
==============================================

The packages 'to_poly' and 'to_poly_solve' are experimental; the
specifications of the functions in these packages might change or the
some of the functions in these packages might be merged into other
Maxima functions.

   Barton Willis (Professor of Mathematics, University of Nebraska at
Kearney) wrote the 'to_poly' and 'to_poly_solve' packages and the
English language user documentation for these packages.

 -- Operator: %and

     The operator '%and' is a simplifying nonshort-circuited logical
     conjunction.  Maxima simplifies an '%and' expression to either
     true, false, or a logically equivalent, but simplified, expression.
     The operator '%and' is associative, commutative, and idempotent.
     Thus when '%and' returns a noun form, the arguments of '%and' form
     a non-redundant sorted list; for example

          (%i1) a %and (a %and b);
          (%o1)                       a %and b

     If one argument to a conjunction is the explicit the negation of
     another argument, '%and' returns false:

          (%i2) a %and (not a);
          (%o2)                         false

     If any member of the conjunction is false, the conjunction
     simplifies to false even if other members are manifestly
     non-boolean; for example

          (%i3) 42 %and false;
          (%o3)                         false

     Any argument of an '%and' expression that is an inequation (that
     is, an inequality or equation), is simplified using the Fourier
     elimination package.  The Fourier elimination simplifier has a
     pre-processor that converts some, but not all, nonlinear
     inequations into linear inequations; for example the Fourier
     elimination code simplifies 'abs(x) + 1 > 0' to true, so

          (%i4) (x < 1) %and (abs(x) + 1 > 0);
          (%o4)                         x < 1

     Notes
        * The option variable 'prederror' does not alter the
          simplification '%and' expressions.

        * To avoid operator precedence errors, compound expressions
          involving the operators '%and, %or', and 'not' should be fully
          parenthesized.

        * The Maxima operators 'and' and 'or' are both short-circuited.
          Thus 'and' isn't associative or commutative.

     Limitations The conjunction '%and' simplifies inequations locally,
     not globally.  This means that conjunctions such as

          (%i5) (x < 1) %and (x > 1);
          (%o5)                 (x > 1) %and (x < 1)

     do not simplify to false.  Also, the Fourier elimination code
     ignores the fact database;

          (%i6) assume(x > 5);
          (%o6)                        [x > 5]
          (%i7) (x > 1) %and (x > 2);
          (%o7)                 (x > 1) %and (x > 2)

     Finally, nonlinear inequations that aren't easily converted into an
     equivalent linear inequation aren't simplified.

     There is no support for distributing '%and' over '%or'; neither is
     there support for distributing a logical negation over '%and'.

     To use 'load(to_poly_solve)'

     Related functions '%or, %if, and, or, not'

     Status The operator '%and' is experimental; the specifications of
     this function might change and its functionality might be merged
     into other Maxima functions.

 -- Operator: %if (<bool>, <a>, <b>)

     The operator '%if' is a simplifying conditional.  The conditional
     <bool> should be boolean-valued.  When the conditional is true,
     return the second argument; when the conditional is false, return
     the third; in all other cases, return a noun form.

     Maxima inequations (either an inequality or an equality) are not
     boolean-valued; for example, Maxima does not simplify 5 < 6 to
     true, and it does not simplify 5 = 6 to false; however, in the
     context of a conditional to an '%if' statement, Maxima
     automatically attempts to determine the truth value of an
     inequation.  Examples:

          (%i1) f : %if(x # 1, 2, 8);
          (%o1)                 %if(x - 1 # 0, 2, 8)
          (%i2) [subst(x = -1,f), subst(x=1,f)];
          (%o2)                        [2, 8]

     If the conditional involves an inequation, Maxima simplifies it
     using the Fourier elimination package.

     Notes

        * If the conditional is manifestly non-boolean, Maxima returns a
          noun form:

          (%i3) %if(42,1,2);
          (%o3)                     %if(42, 1, 2)

        * The Maxima operator 'if' is nary, the operator '%if' isn't
          nary.

     Limitations The Fourier elimination code only simplifies nonlinear
     inequations that are readily convertible to an equivalent linear
     inequation.

     To use: 'load(to_poly_solve)'

     Status: The operator '%if' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Operator: %or

     The operator '%or' is a simplifying nonshort-circuited logical
     disjunction.  Maxima simplifies an '%or' expression to either true,
     false, or a logically equivalent, but simplified, expression.  The
     operator '%or' is associative, commutative, and idempotent.  Thus
     when '%or' returns a noun form, the arguments of '%or' form a
     non-redundant sorted list; for example

          (%i1) a %or (a %or b);
          (%o1)                        a %or b

     If one member of the disjunction is the explicit the negation of
     another member, '%or' returns true:

          (%i2) a %or (not a);
          (%o2)                         true

     If any member of the disjunction is true, the disjunction
     simplifies to true even if other members of the disjunction are
     manifestly non-boolean; for example

          (%i3) 42 %or true;
          (%o3)                         true

     Any argument of an '%or' expression that is an inequation (that is,
     an inequality or equation), is simplified using the Fourier
     elimination package.  The Fourier elimination code simplifies
     'abs(x) + 1 > 0' to true, so we have

          (%i4) (x < 1) %or (abs(x) + 1 > 0);
          (%o4)                         true

     Notes
        * The option variable 'prederror' does not alter the
          simplification of '%or' expressions.

        * You should parenthesize compound expressions involving the
          operators '%and, %or', and 'not'; the binding powers of these
          operators might not match your expectations.

        * The Maxima operators 'and' and 'or' are both short-circuited.
          Thus 'or' isn't associative or commutative.

     Limitations The conjunction '%or' simplifies inequations locally,
     not globally.  This means that conjunctions such as

          (%i1) (x < 1) %or (x >= 1);
          (%o1) (x > 1) %or (x >= 1)

     do not simplify to true.  Further, the Fourier elimination code
     ignores the fact database;

          (%i2) assume(x > 5);
          (%o2)                        [x > 5]
          (%i3) (x > 1) %and (x > 2);
          (%o3)                 (x > 1) %and (x > 2)

     Finally, nonlinear inequations that aren't easily converted into an
     equivalent linear inequation aren't simplified.

     The algorithm that looks for terms that cannot both be false is
     weak; also there is no support for distributing '%or' over '%and';
     neither is there support for distributing a logical negation over
     '%or'.

     To use 'load(to_poly_solve)'

     Related functions '%or, %if, and, or, not'

     Status The operator '%or' is experimental; the specifications of
     this function might change and its functionality might be merged
     into other Maxima functions.

 -- Function: complex_number_p (<x>)

     The predicate 'complex_number_p' returns true if its argument is
     either 'a + %i * b', 'a', '%i b', or '%i', where 'a' and 'b' are
     either rational or floating point numbers (including big floating
     point); for all other inputs, 'complex_number_p' returns false; for
     example

          (%i1) map('complex_number_p,[2/3, 2 + 1.5 * %i, %i]);
          (%o1)                  [true, true, true]
          (%i2) complex_number_p((2+%i)/(5-%i));
          (%o2)                         false
          (%i3) complex_number_p(cos(5 - 2 * %i));
          (%o3)                         false

     Related functions 'isreal_p'

     To use 'load(to_poly_solve)'

     Status The operator 'complex_number_p' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: compose_functions (<l>)

     The function call 'compose_functions(l)' returns a lambda form that
     is the composition of the functions in the list <l>.  The functions
     are applied from right to left; for example

          (%i1) compose_functions([cos, exp]);
                                                  %g151
          (%o1)             lambda([%g151], cos(%e     ))
          (%i2) %(x);
                                            x
          (%o2)                       cos(%e )

     When the function list is empty, return the identity function:

          (%i3) compose_functions([]);
          (%o3)                lambda([%g152], %g152)
          (%i4)  %(x);
          (%o4)                           x

     Notes
        * When Maxima determines that a list member isn't a symbol or a
          lambda form, 'funmake' (not 'compose_functions') signals an
          error:

          (%i5) compose_functions([a < b]);

          funmake: first argument must be a symbol, subscripted symbol,
          string, or lambda expression; found: a < b
          #0: compose_functions(l=[a < b])(to_poly_solve.mac line 40)
           -- an error. To debug this try: debugmode(true);

        * To avoid name conflicts, the independent variable is
          determined by the function 'new_variable'.

               (%i6) compose_functions([%g0]);
               (%o6)              lambda([%g154], %g0(%g154))
               (%i7) compose_functions([%g0]);
               (%o7)              lambda([%g155], %g0(%g155))

          Although the independent variables are different, Maxima is
          able to to deduce that these lambda forms are semantically
          equal:

               (%i8) is(equal(%o6,%o7));
               (%o8)                         true

     To use 'load(to_poly_solve)'

     Status The function 'compose_functions' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: dfloat (<x>)

     The function 'dfloat' is a similar to 'float', but the function
     'dfloat' applies 'rectform' when 'float' fails to evaluate to an
     IEEE double floating point number; thus

          (%i1) float(4.5^(1 + %i));
                                         %i + 1
          (%o1)                       4.5
          (%i2) dfloat(4.5^(1 + %i));
          (%o2)        4.48998802962884 %i + .3000124893895671

     Notes

        * The rectangular form of an expression might be poorly suited
          for numerical evaluation-for example, the rectangular form
          might needlessly involve the difference of floating point
          numbers (subtractive cancellation).

        * The identifier 'float' is both an option variable (default
          value false) and a function name.

     Related functions 'float, bfloat'

     To use 'load(to_poly_solve)'

     Status The function 'dfloat' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Function: elim (<l>, <x>)

     The function 'elim' eliminates the variables in the set or list 'x'
     from the equations in the set or list 'l'.  Each member of 'x' must
     be a symbol; the members of 'l' can either be equations, or
     expressions that are assumed to equal zero.

     The function 'elim' returns a list of two lists; the first is the
     list of expressions with the variables eliminated; the second is
     the list of pivots; thus, the second list is a list of expressions
     that 'elim' used to eliminate the variables.

     Here is a example of eliminating between linear equations:

          (%i1) elim(set(x + y + z = 1, x - y  - z = 8, x - z = 1),
                     set(x,y));
          (%o1)            [[2 z - 7], [y + 7, z - x + 1]]

     Eliminating 'x' and 'y' yields the single equation '2 z - 7 = 0';
     the equations 'y + 7 = 0' and 'z - z + 1 = 1' were used as pivots.
     Eliminating all three variables from these equations,
     triangularizes the linear system:

          (%i2) elim(set(x + y + z = 1, x - y  - z = 8, x - z = 1),
                     set(x,y,z));
          (%o2)           [[], [2 z - 7, y + 7, z - x + 1]]

     Of course, the equations needn't be linear:

          (%i3) elim(set(x^2 - 2 * y^3 = 1,  x - y = 5), [x,y]);
                               3    2
          (%o3)       [[], [2 y  - y  - 10 y - 24, y - x + 5]]

     The user doesn't control the order the variables are eliminated.
     Instead, the algorithm uses a heuristic to attempt to choose the
     best pivot and the best elimination order.

     Notes

        * Unlike the related function 'eliminate', the function 'elim'
          does not invoke 'solve' when the number of equations equals
          the number of variables.

        * The function 'elim' works by applying resultants; the option
          variable 'resultant' determines which algorithm Maxima uses.
          Using 'sqfr', Maxima factors each resultant and suppresses
          multiple zeros.

        * The 'elim' will triangularize a nonlinear set of polynomial
          equations; the solution set of the triangularized set can be
          larger than that solution set of the untriangularized set.
          Thus, the triangularized equations can have spurious
          solutions.

     Related functions elim_allbut, eliminate_using, eliminate

     Option variables resultant

     To use 'load(to_poly)'

     Status The function 'elim' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Function: elim_allbut (<l>, <x>)

     This function is similar to 'elim', except that it eliminates all
     the variables in the list of equations 'l' except for those
     variables that in in the list 'x'

          (%i1) elim_allbut([x+y = 1, x - 5*y = 1],[]);
          (%o1)                 [[], [y, y + x - 1]]
          (%i2) elim_allbut([x+y = 1, x - 5*y = 1],[x]);
          (%o2)                [[x - 1], [y + x - 1]]

     To use 'load(to_poly)'

     Option variables resultant

     Related functions elim, eliminate_using, eliminate

     Status The function 'elim_allbut' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: eliminate_using (<l>, <e>, <x>)

     Using 'e' as the pivot, eliminate the symbol 'x' from the list or
     set of equations in 'l'.  The function 'eliminate_using' returns a
     set.

          (%i1) eq : [x^2 - y^2 - z^3 , x*y - z^2 - 5, x - y + z];
                         3    2    2     2
          (%o1)      [- z  - y  + x , - z  + x y - 5, z - y + x]
          (%i2) eliminate_using(eq,first(eq),z);
                  3              2      2      3    2
          (%o2) {y  + (1 - 3 x) y  + 3 x  y - x  - x ,
                                  4    3  3       2  2             4
                                 y  - x  y  + 13 x  y  - 75 x y + x  + 125}
          (%i3) eliminate_using(eq,second(eq),z);
                  2            2       4    3  3       2  2             4
          (%o3) {y  - 3 x y + x  + 5, y  - x  y  + 13 x  y  - 75 x y + x
                                                                     + 125}
          (%i4) eliminate_using(eq, third(eq),z);
                  2            2       3              2      2      3    2
          (%o4) {y  - 3 x y + x  + 5, y  + (1 - 3 x) y  + 3 x  y - x  - x }

     Option variables resultant

     Related functions elim, eliminate, elim_allbut

     To use 'load(to_poly)'

     Status The function 'eliminate_using' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: fourier_elim ([<eq1>, <eq2>, ...], [<var1>, <var>, ...])

     Fourier elimination is the analog of Gauss elimination for linear
     inequations (equations or inequalities).  The function call
     'fourier_elim([eq1, eq2, ...], [var1, var2, ...])' does Fourier
     elimination on a list of linear inequations '[eq1, eq2, ...]' with
     respect to the variables '[var1, var2, ...]'; for example

          (%i1) fourier_elim([y-x < 5, x - y < 7, 10 < y],[x,y]);
          (%o1)            [y - 5 < x, x < y + 7, 10 < y]
          (%i2) fourier_elim([y-x < 5, x - y < 7, 10 < y],[y,x]);
          (%o2)        [max(10, x - 7) < y, y < x + 5, 5 < x]

     Eliminating first with respect to x and second with respect to y
     yields lower and upper bounds for x that depend on y, and lower and
     upper bounds for y that are numbers.  Eliminating in the other
     order gives x dependent lower and upper bounds for y, and numerical
     lower and upper bounds for x.

     When necessary, 'fourier_elim' returns a _disjunction_ of lists of
     inequations:

          (%i3) fourier_elim([x # 6],[x]);
          (%o3)                  [x < 6] or [6 < x]

     When the solution set is empty, 'fourier_elim' returns 'emptyset',
     and when the solution set is all reals, 'fourier_elim' returns
     'universalset'; for example

          (%i4) fourier_elim([x < 1, x > 1],[x]);
          (%o4)                       emptyset
          (%i5) fourier_elim([minf < x, x < inf],[x]);
          (%o5)                     universalset

     For nonlinear inequations, 'fourier_elim' returns a (somewhat)
     simplified list of inequations:

          (%i6) fourier_elim([x^3 - 1 > 0],[x]);
                         2                             2
          (%o6) [1 < x, x  + x + 1 > 0] or [x < 1, - (x  + x + 1) > 0]
          (%i7) fourier_elim([cos(x) < 1/2],[x]);
          (%o7)                  [1 - 2 cos(x) > 0]

     Instead of a list of inequations, the first argument to
     'fourier_elim' may be a logical disjunction or conjunction:

          (%i8) fourier_elim((x + y < 5) and (x - y >8),[x,y]);
                                                        3
          (%o8)            [y + 8 < x, x < 5 - y, y < - -]
                                                        2
          (%i9) fourier_elim(((x + y < 5) and x < 1) or  (x - y >8),[x,y]);
          (%o9)          [y + 8 < x] or [x < min(1, 5 - y)]

     The function 'fourier_elim' supports the inequation operators '<,
     <=, >, >=, #', and '='.

     The Fourier elimination code has a preprocessor that converts some
     nonlinear inequations that involve the absolute value, minimum, and
     maximum functions into linear in equations.  Additionally, the
     preprocessor handles some expressions that are the product or
     quotient of linear terms:

          (%i10) fourier_elim([max(x,y) > 6, x # 8, abs(y-1) > 12],[x,y]);
          (%o10) [6 < x, x < 8, y < - 11] or [8 < x, y < - 11]
           or [x < 8, 13 < y] or [x = y, 13 < y] or [8 < x, x < y, 13 < y]
           or [y < x, 13 < y]
          (%i11) fourier_elim([(x+6)/(x-9) <= 6],[x]);
          (%o11)           [x = 12] or [12 < x] or [x < 9]
          (%i12) fourier_elim([x^2 - 1 # 0],[x]);
          (%o12)      [- 1 < x, x < 1] or [1 < x] or [x < - 1]

     To use 'load(fourier_elim)'

 -- Function: isreal_p (<e>)

     The predicate 'isreal_p' returns true when Maxima is able to
     determine that 'e' is real-valued on the entire real line; it
     returns false when Maxima is able to determine that 'e' isn't
     real-valued on some nonempty subset of the real line; and it
     returns a noun form for all other cases.

          (%i1) map('isreal_p, [-1, 0, %i, %pi]);
          (%o1)               [true, true, false, true]

     Maxima variables are assumed to be real; thus

          (%i2) isreal_p(x);
          (%o2)                         true

     The function 'isreal_p' examines the fact database:

          (%i3) declare(z,complex)$

          (%i4) isreal_p(z);
          (%o4)                      isreal_p(z)

     Limitations Too often, 'isreal_p' returns a noun form when it
     should be able to return false; a simple example: the logarithm
     function isn't real-valued on the entire real line, so
     'isreal_p(log(x))' should return false; however

          (%i5) isreal_p(log(x));
          (%o5)                   isreal_p(log(x))

     To use 'load(to_poly_solve)'

     Related functions complex_number_p

     Status The function 'isreal_p' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Function: new_variable (type)

     Return a unique symbol of the form '%[z,n,r,c,g]k', where 'k' is an
     integer.  The allowed values for type are integer, natural_number,
     real, natural_number, and general.  (By natural number, we mean the
     nonnegative integers; thus zero is a natural number.  Some, but not
     all,definitions of natural number exclude zero.)

     When type isn't one of the allowed values, type defaults to
     general.  For integers, natural numbers, and complex numbers,
     Maxima automatically appends this information to the fact database.

          (%i1) map('new_variable,
                    ['integer, 'natural_number, 'real, 'complex, 'general]);
          (%o1)          [%z144, %n145, %r146, %c147, %g148]
          (%i2) nicedummies(%);
          (%o2)               [%z0, %n0, %r0, %c0, %g0]
          (%i3) featurep(%z0, 'integer);
          (%o3)                         true
          (%i4) featurep(%n0, 'integer);
          (%o4)                         true
          (%i5) is(%n0 >= 0);
          (%o5)                         true
          (%i6) featurep(%c0, 'complex);
          (%o6)                         true

     Note Generally, the argument to 'new_variable' should be quoted.
     The quote will protect against errors similar to

          (%i7) integer : 12$

          (%i8) new_variable(integer);
          (%o8)                         %g149
          (%i9) new_variable('integer);
          (%o9)                         %z150

     Related functions nicedummies

     To use 'load(to_poly_solve)'

     Status The function 'new_variable' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: nicedummies

     Starting with zero, the function 'nicedummies' re-indexes the
     variables in an expression that were introduced by 'new_variable';

          (%i1) new_variable('integer) + 52 * new_variable('integer);
          (%o1)                   52 %z136 + %z135
          (%i2) new_variable('integer) - new_variable('integer);
          (%o2)                     %z137 - %z138
          (%i3) nicedummies(%);
          (%o3)                       %z0 - %z1

     Related functions new_variable

     To use 'load(to_poly_solve)'

     Status The function 'nicedummies' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: parg (<x>)

     The function 'parg' is a simplifying version of the complex
     argument function 'carg'; thus

          (%i1) map('parg,[1,1+%i,%i, -1 + %i, -1]);
                                  %pi  %pi  3 %pi
          (%o1)               [0, ---, ---, -----, %pi]
                                   4    2     4

     Generally, for a non-constant input, 'parg' returns a noun form;
     thus

          (%i2) parg(x + %i * sqrt(x));
          (%o2)                 parg(x + %i sqrt(x))

     When 'sign' can determine that the input is a positive or negative
     real number, 'parg' will return a non-noun form for a non-constant
     input.  Here are two examples:

          (%i3) parg(abs(x));
          (%o3) 0
          (%i4) parg(-x^2-1);
          (%o4)                          %pi

     Note The 'sign' function mostly ignores the variables that are
     declared to be complex ('declare(x,complex)'); for variables that
     are declared to be complex, the 'parg' can return incorrect values;
     for example

          (%i1) declare(x,complex)$

          (%i2) parg(x^2 + 1);
          (%o2) 0

     Related function carg, isreal_p

     To use 'load(to_poly_solve)'

     Status The function 'parg' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Function: real_imagpart_to_conjugate (<e>)

     The function 'real_imagpart_to_conjugate' replaces all occurrences
     of 'realpart' and 'imagpart' to algebraically equivalent
     expressions involving the 'conjugate'.

          (%i1) declare(x, complex)$

          (%i2) real_imagpart_to_conjugate(realpart(x) +  imagpart(x) = 3);
                    conjugate(x) + x   %i (x - conjugate(x))
          (%o2)     ---------------- - --------------------- = 3
                           2                     2

     To use 'load(to_poly_solve)'

     Status The function 'real_imagpart_to_conjugate' is experimental;
     its specifications might change and its functionality might be
     merged into other Maxima functions.

 -- Function: rectform_log_if_constant (<e>)

     The function 'rectform_log_if_constant' converts all terms of the
     form ' log(c)' to 'rectform(log(c))', where 'c' is either a
     declared constant expression or explicitly declared constant

          (%i1) rectform_log_if_constant(log(1-%i) - log(x - %i));
                                           log(2)   %i %pi
          (%o1)            - log(x - %i) + ------ - ------
                                             2        4
          (%i2) declare(a,constant, b,constant)$

          (%i3) rectform_log_if_constant(log(a + %i*b));
                                 2    2
                            log(b  + a )
          (%o3)             ------------ + %i atan2(b, a)
                                 2

     To use 'load(to_poly_solve)'

     Status The function 'rectform_log_if_constant' is experimental; the
     specifications of this function might change might change and its
     functionality might be merged into other Maxima functions.

 -- Function: simp_inequality (<e>)

     The function 'simp_inequality' applies some simplifications to
     conjunctions and disjunctions of inequations.

     Limitations The function 'simp_inequality' is limited in at least
     two ways; first, the simplifications are local; thus

          (%i1) simp_inequality((x > minf) %and (x < 0));
          (%o1) (x>1) %and (x<1)

     And second, 'simp_inequality' doesn't consult the fact database:

          (%i2) assume(x > 0)$

          (%i3) simp_inequality(x > 0);
          (%o3)                         x > 0

     To use 'load(fourier_elim)'

     Status The function 'simp_inequality' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: standardize_inverse_trig (<e>)

     This function applies the identities 'cot(x) = atan(1/x), acsc(x) =
     asin(1/x),' and similarly for 'asec, acoth, acsch' and 'asech' to
     an expression.  See Abramowitz and Stegun, Eqs.  4.4.6 through
     4.4.8 and 4.6.4 through 4.6.6.

     To use 'load(to_poly_solve)'

     Status The function 'standardize_inverse_trig' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.

 -- Function: subst_parallel (<l>, <e>)

     When 'l' is a single equation or a list of equations, substitute
     the right hand side of each equation for the left hand side.  The
     substitutions are made in parallel; for example

          (%i1) load(to_poly_solve)$

          (%i2) subst_parallel([x=y,y=x], [x,y]);
          (%o2)                        [y, x]

     Compare this to substitutions made serially:

          (%i3) subst([x=y,y=x],[x,y]);
          (%o3)                        [x, x]

     The function 'subst_parallel' is similar to 'sublis' except that
     'subst_parallel' allows for substitution of nonatoms; for example

          (%i4) subst_parallel([x^2 = a, y = b], x^2 * y);
          (%o4)                          a b
          (%i5) sublis([x^2 = a, y = b], x^2 * y);

                                                                       2
          sublis: left-hand side of equation must be a symbol; found: x
           -- an error. To debug this try: debugmode(true);

     The substitutions made by 'subst_parallel' are literal, not
     semantic; thus 'subst_parallel' does not recognize that x * y is a
     subexpression of x^2 * y

          (%i6) subst_parallel([x * y = a], x^2 * y);
                                         2
          (%o6)                         x  y

     The function 'subst_parallel' completes all substitutions before
     simplifications.  This allows for substitutions into conditional
     expressions where errors might occur if the simplifications were
     made earlier:

          (%i7) subst_parallel([x = 0], %if(x < 1, 5, log(x)));
          (%o7)                           5
          (%i8) subst([x = 0], %if(x < 1, 5, log(x)));

          log: encountered log(0).
           -- an error. To debug this try: debugmode(true);

     Related functions subst, sublis, ratsubst

     To use 'load(to_poly_solve_extra.lisp)'

     Status The function 'subst_parallel' is experimental; the
     specifications of this function might change might change and its
     functionality might be merged into other Maxima functions.

 -- Function: to_poly (<e>, <l>)

     The function 'to_poly' attempts to convert the equation 'e' into a
     polynomial system along with inequality constraints; the solutions
     to the polynomial system that satisfy the constraints are solutions
     to the equation 'e'.  Informally, 'to_poly' attempts to
     polynomialize the equation <e>; an example might clarify:

          (%i1) load(to_poly_solve)$

          (%i2) to_poly(sqrt(x) = 3, [x]);
                                      2
          (%o2) [[%g130 - 3, x = %g130 ],
                                %pi                               %pi
                             [- --- < parg(%g130), parg(%g130) <= ---], []]
                                 2                                 2

     The conditions '-%pi/2<parg(%g130),parg(%g130)<=%pi/2' tell us that
     '%g130' is in the range of the square root function.  When this is
     true, the solution set to 'sqrt(x) = 3' is the same as the solution
     set to '%g130-3,x=%g130^2'.

     To polynomialize trigonometric expressions, it is necessary to
     introduce a non algebraic substitution; these non algebraic
     substitutions are returned in the third list returned by 'to_poly';
     for example

          (%i3) to_poly(cos(x),[x]);
                          2                                 %i x
          (%o3)    [[%g131  + 1], [2 %g131 # 0], [%g131 = %e    ]]

     Constant terms aren't polynomializied unless the number one is a
     member of the variable list; for example

          (%i4) to_poly(x = sqrt(5),[x]);
          (%o4)                [[x - sqrt(5)], [], []]
          (%i5) to_poly(x = sqrt(5),[1,x]);
                                      2
          (%o5) [[x - %g132, 5 = %g132 ],
                                %pi                               %pi
                             [- --- < parg(%g132), parg(%g132) <= ---], []]
                                 2                                 2

     To generate a polynomial with sqrt(5) + sqrt(7) as one of its
     roots, use the commands

          (%i6) first(elim_allbut(first(to_poly(x = sqrt(5) + sqrt(7),
                                                [1,x])), [x]));
                                    4       2
          (%o6)                   [x  - 24 x  + 4]

     Related functions to_poly_solve

     To use 'load(to_poly)'

     Status: The function 'to_poly' is experimental; its specifications
     might change and its functionality might be merged into other
     Maxima functions.

 -- Function: to_poly_solve (<e>, <l>, [options])

     The function 'to_poly_solve' tries to solve the equations e for the
     variables l.  The equation(s) e can either be a single expression
     or a set or list of expressions; similarly, l can either be a
     single symbol or a list of set of symbols.  When a member of e
     isn't explicitly an equation, for example x^2 -1, the solver
     asummes that the expression vanishes.

     The basic strategy of 'to_poly_solve' is to convert the input into
     a polynomial form and to call 'algsys' on the polynomial system.
     Internally 'to_poly_solve' defaults 'algexact' to true.  To change
     the default for 'algexact', append 'algexact=false to the
     'to_poly_solve' argument list.

     When 'to_poly_solve' is able to determine the solution set, each
     member of the solution set is a list in a '%union' object:

          (%i1) load(to_poly_solve)$

          (%i2) to_poly_solve(x*(x-1) = 0, x);
          (%o2)               %union([x = 0], [x = 1])

     When 'to_poly_solve' is unable to determine the solution set, a
     '%solve' nounform is returned (in this case, a warning is printed)

          (%i3) to_poly_solve(x^k + 2* x + 1 = 0, x);

          Nonalgebraic argument given to 'to_poly'
          unable to solve
                                    k
          (%o3)            %solve([x  + 2 x + 1 = 0], [x])

     Subsitution into a '%solve' nounform can sometimes result in the
     solution

          (%i4) subst(k = 2, %);
          (%o4)                   %union([x = - 1])

     Especially for trigonometric equations, the solver sometimes needs
     to introduce an arbitary integer.  These arbitary integers have the
     form '%zXXX', where 'XXX' is an integer; for example

          (%i5) to_poly_solve(sin(x) = 0, x);
          (%o5)   %union([x = 2 %pi %z33 + %pi], [x = 2 %pi %z35])

     To re-index these variables to zero, use 'nicedummies':

          (%i6) nicedummies(%);
          (%o6)    %union([x = 2 %pi %z0 + %pi], [x = 2 %pi %z1])

     Occasionally, the solver introduces an arbitary complex number of
     the form '%cXXX' or an arbitary real number of the form '%rXXX'.
     The function 'nicedummies' will re-index these identifiers to zero.

     The solution set sometimes involves simplifing versions of various
     of logical operators including '%and', '%or', or '%if' for
     conjunction, disjuntion, and implication, respectively; for example

          (%i7) sol : to_poly_solve(abs(x) = a, x);
          (%o7) %union(%if(isnonnegative_p(a), [x = - a], %union()),
                                %if(isnonnegative_p(a), [x = a], %union()))
          (%i8) subst(a = 42, sol);
          (%o8)             %union([x = - 42], [x = 42])
          (%i9) subst(a = -42, sol);
          (%o9)                       %union()

     The empty set is represented by '%union'.

     The function 'to_poly_solve' is able to solve some, but not all,
     equations involving rational powers, some nonrational powers,
     absolute values, trigonometric functions, and minimum and maximum.
     Also, some it can solve some equations that are solvable in in
     terms of the Lambert W function; some examples:

          (%i1) load(to_poly_solve)$

          (%i2) to_poly_solve(set(max(x,y) = 5, x+y = 2), set(x,y));
          (%o2)      %union([x = - 3, y = 5], [x = 5, y = - 3])
          (%i3) to_poly_solve(abs(1-abs(1-x)) = 10,x);
          (%o3)             %union([x = - 10], [x = 12])
          (%i4) to_poly_solve(set(sqrt(x) + sqrt(y) = 5, x + y = 10),
                              set(x,y));
                               3/2               3/2
                              5    %i - 10      5    %i + 10
          (%o4) %union([x = - ------------, y = ------------],
                                   2                 2
                                          3/2                 3/2
                                         5    %i + 10        5    %i - 10
                                    [x = ------------, y = - ------------])
                                              2                   2
          (%i5) to_poly_solve(cos(x) * sin(x) = 1/2,x,
                              'simpfuncs = ['expand, 'nicedummies]);
                                                   %pi
          (%o5)              %union([x = %pi %z0 + ---])
                                                    4
          (%i6) to_poly_solve(x^(2*a) + x^a + 1,x);
                                                  2 %i %pi %z81
                                                  -------------
                                            1/a         a
                            (sqrt(3) %i - 1)    %e
          (%o6) %union([x = -----------------------------------],
                                            1/a
                                           2
                                                            2 %i %pi %z83
                                                            -------------
                                                      1/a         a
                                    (- sqrt(3) %i - 1)    %e
                               [x = -------------------------------------])
                                                     1/a
                                                    2
          (%i7) to_poly_solve(x * exp(x) = a, x);
          (%o7)              %union([x = lambert_w(a)])

     For linear inequalities, 'to_poly_solve' automatically does Fourier
     elimination:

          (%i8) to_poly_solve([x + y < 1, x - y >= 8], [x,y]);
                                         7
          (%o8) %union([x = y + 8, y < - -],
                                         2
                                                                        7
                                           [y + 8 < x, x < 1 - y, y < - -])
                                                                        2

     Each optional argument to 'to_poly_solve' must be an equation;
     generally, the order of these options does not matter.

        * 'simpfuncs = l', where 'l' is a list of functions.  Apply the
          composition of the members of l to each solution.

               (%i1) to_poly_solve(x^2=%i,x);
                                              1/4             1/4
               (%o1)       %union([x = - (- 1)   ], [x = (- 1)   ])
               (%i2) to_poly_solve(x^2= %i,x, 'simpfuncs = ['rectform]);
                                     %i         1             %i         1
               (%o2) %union([x = - ------- - -------], [x = ------- + -------])
                                   sqrt(2)   sqrt(2)        sqrt(2)   sqrt(2)

          Sometimes additional simplification can revert a
          simplification; for example

               (%i3) to_poly_solve(x^2=1,x);
               (%o3)              %union([x = - 1], [x = 1])
               (%i4) to_poly_solve(x^2= 1,x, 'simpfuncs = [polarform]);
                                                       %i %pi
               (%o4)            %union([x = 1], [x = %e      ]

          Maxima doesn't try to check that each member of the function
          list 'l' is purely a simplification; thus

               (%i5) to_poly_solve(x^2 = %i,x, 'simpfuncs = [lambda([s],s^2)]);
               (%o5)                   %union([x = %i])

          To convert each solution to a double float, use 'simpfunc =
          ['dfloat]':

               (%i6) to_poly_solve(x^3 +x + 1 = 0,x,
                                   'simpfuncs = ['dfloat]), algexact : true;
               (%o6) %union([x = - .6823278038280178],
               [x = .3411639019140089 - 1.161541399997251 %i],
               [x = 1.161541399997251 %i + .3411639019140089])

        * 'use_grobner = true' With this option, the function
          'poly_reduced_grobner' is applied to the equations before
          attempting their solution.  Primarily, this option provides a
          workaround for weakness in the function 'algsys'.  Here is an
          example of such a workaround:

               (%i7) to_poly_solve([x^2+y^2=2^2,(x-1)^2+(y-1)^2=2^2],[x,y],
                                   'use_grobner = true);
                                   sqrt(7) - 1      sqrt(7) + 1
               (%o7) %union([x = - -----------, y = -----------],
                                        2                2
                                                sqrt(7) + 1        sqrt(7) - 1
                                           [x = -----------, y = - -----------])
                                                     2                  2
               (%i8) to_poly_solve([x^2+y^2=2^2,(x-1)^2+(y-1)^2=2^2],[x,y]);
               (%o8)                       %union()

        * 'maxdepth = k', where 'k' is a positive integer.  This
          function controls the maximum recursion depth for the solver.
          The default value for 'maxdepth' is five.  When the recursions
          depth is exceeded, the solver signals an error:

               (%i9) to_poly_solve(cos(x) = x,x, 'maxdepth = 2);

               Unable to solve
               Unable to solve
               (%o9)        %solve([cos(x) = x], [x], maxdepth = 2)

        * 'parameters = l', where 'l' is a list of symbols.  The solver
          attempts to return a solution that is valid for all members of
          the list 'l'; for example:

               (%i10) to_poly_solve(a * x = x, x);
               (%o10)                   %union([x = 0])
               (%i11) to_poly_solve(a * x = x, x, 'parameters = [a]);
               (%o11) %union(%if(a - 1 = 0, [x = %c111], %union()),
                                              %if(a - 1 # 0, [x = 0], %union()))

          In '(%o2)', the solver introduced a dummy variable; to
          re-index the these dummy variables, use the function
          'nicedummies':

               (%i12) nicedummies(%);
               (%o12) %union(%if(a - 1 = 0, [x = %c0], %union()),
                                              %if(a - 1 # 0, [x = 0], %union()))

     The 'to_poly_solve' uses data stored in the hashed array
     'one_to_one_reduce' to solve equations of the form f(a) = f(b).
     The assignment 'one_to_one_reduce['f,'f] : lambda([a,b], a=b)'
     tells 'to_poly_solve' that the solution set of f(a) = f(b) equals
     the solution set of a=b; for example

          (%i13) one_to_one_reduce['f,'f] : lambda([a,b], a=b)$

          (%i14) to_poly_solve(f(x^2-1) = f(0),x);
          (%o14)             %union([x = - 1], [x = 1])

     More generally, the assignment 'one_to_one_reduce['f,'g] :
     lambda([a,b], w(a, b) = 0' tells 'to_poly_solve' that the solution
     set of f(a) = f(b) equals the solution set of w(a,b) = 0; for
     example

          (%i15) one_to_one_reduce['f,'g] : lambda([a,b], a = 1 + b/2)$

          (%i16) to_poly_solve(f(x) - g(x),x);
          (%o16)                   %union([x = 2])

     Additionally, the function 'to_poly_solve' uses data stored in the
     hashed array 'function_inverse' to solve equations of the form f(a)
     = b.  The assignment 'function_inverse['f] : lambda([s], g(s))'
     informs 'to_poly_solve' that the solution set to 'f(x) = b' equals
     the solution set to 'x = g(b)'; two examples:

          (%i17) function_inverse['Q] : lambda([s], P(s))$

          (%i18) to_poly_solve(Q(x-1) = 2009,x);
          (%o18)              %union([x = P(2009) + 1])
          (%i19) function_inverse['G] : lambda([s], s+new_variable(integer));
          (%o19)       lambda([s], s + new_variable(integer))
          (%i20) to_poly_solve(G(x - a) = b,x);
          (%o20)             %union([x = b + a + %z125])

     Notes

        * The solve variables needn't be symbols; when 'fullratsubst' is
          able to appropriately make substitutions, the solve variables
          can be nonsymbols:

          (%i1) to_poly_solve([x^2 + y^2 + x * y = 5, x * y = 8],
                              [x^2 + y^2, x * y]);
                                            2    2
          (%o1)           %union([x y = 8, y  + x  = - 3])

        * For equations that involve complex conjugates, the solver
          automatically appends the conjugate equations; for example

          (%i1) declare(x,complex)$

          (%i2) to_poly_solve(x + (5 + %i) * conjugate(x) = 1, x);
                                             %i + 21
          (%o2)              %union([x = - -----------])
                                           25 %i - 125
          (%i3) declare(y,complex)$

          (%i4) to_poly_solve(set(conjugate(x) - y = 42 + %i,
                                  x + conjugate(y) = 0), set(x,y));
                                     %i - 42        %i + 42
          (%o4)        %union([x = - -------, y = - -------])
                                        2              2

        * For an equation that involves the absolute value function, the
          'to_poly_solve' consults the fact database to decide if the
          argument to the absolute value is complex valued.  When

               (%i1) to_poly_solve(abs(x) = 6, x);
               (%o1)              %union([x = - 6], [x = 6])
               (%i2) declare(z,complex)$

               (%i3) to_poly_solve(abs(z) = 6, z);
               (%o3) %union(%if((%c11 # 0) %and (%c11 conjugate(%c11) - 36 =
                                                      0), [z = %c11], %union()))

          This is the only situation that the solver consults the fact
          database.  If a solve variable is declared to be an integer,
          for example, 'to_poly_solve' ignores this declaration.

     Relevant option variables algexact, resultant, algebraic

     Related functions to_poly

     To use 'load(to_poly_solve)'

     Status: The function 'to_poly_solve' is experimental; its
     specifications might change and its functionality might be merged
     into other Maxima functions.


File: maxima.info,  Node: unit,  Next: zeilberger,  Prev: to_poly_solve,  Up: Top

81 unit
*******

* Menu:

* Introduction to Units::
* Functions and Variables for Units::


File: maxima.info,  Node: Introduction to Units,  Next: Functions and Variables for Units,  Prev: unit,  Up: unit

81.1 Introduction to Units
==========================

The _unit_ package enables the user to convert between arbitrary units
and work with dimensions in equations.  The functioning of this package
is radically different from the original Maxima units package - whereas
the original was a basic list of definitions, this package uses rulesets
to allow the user to chose, on a per dimension basis, what unit final
answers should be rendered in.  It will separate units instead of
intermixing them in the display, allowing the user to readily identify
the units associated with a particular answer.  It will allow a user to
simplify an expression to its fundamental Base Units, as well as
providing fine control over simplifying to derived units.  Dimensional
analysis is possible, and a variety of tools are available to manage
conversion and simplification options.  In addition to customizable
automatic conversion, _units_ also provides a traditional manual
conversion option.

   Note - when unit conversions are inexact Maxima will make
approximations resulting in fractions.  This is a consequence of the
techniques used to simplify units.  The messages warning of this type of
substitution are disabled by default in the case of units (normally they
are on) since this situation occurs frequently and the warnings clutter
the output.  (The existing state of ratprint is restored after unit
conversions, so user changes to that setting will be preserved
otherwise.)  If the user needs this information for units, they can set
_unitverbose:on_ to reactivate the printing of warnings from the unit
conversion process.

   _unit_ is included in Maxima in the share/contrib/unit directory.  It
obeys normal Maxima package loading conventions:

     (%i1) load("unit")$
     *******************************************************************
     *                       Units version 0.50                        *
     *          Definitions based on the NIST Reference on             *
     *              Constants, Units, and Uncertainty                  *
     *       Conversion factors from various sources including         *
     *                   NIST and the GNU units package                *
     *******************************************************************

     Redefining necessary functions...
     WARNING: DEFUN/DEFMACRO: redefining function TOPLEVEL-MACSYMA-EVAL ...
     WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...
     WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...
     WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...
     Initializing unit arrays...
     Done.

   The WARNING messages are expected and not a cause for concern - they
indicate the _unit_ package is redefining functions already defined in
Maxima proper.  This is necessary in order to properly handle units.
The user should be aware that if other changes have been made to these
functions by other packages those changes will be overwritten by this
loading process.

   The _unit.mac_ file also loads a lisp file _unit-functions.lisp_
which contains the lisp functions needed for the package.

   Clifford Yapp is the primary author.  He has received valuable
assistance from Barton Willis of the University of Nebraska at Kearney
(UNK), Robert Dodier, and other intrepid folk of the Maxima mailing
list.

   There are probably lots of bugs.  Let me know.  'float' and 'numer'
don't do what is expected.

   TODO : dimension functionality, handling of temperature, showabbr and
friends.  Show examples with addition of quantities containing units.


File: maxima.info,  Node: Functions and Variables for Units,  Prev: Introduction to Units,  Up: unit

81.2 Functions and Variables for Units
======================================

 -- Function: setunits (<list>)
     By default, the _unit_ package does not use any derived dimensions,
     but will convert all units to the seven fundamental dimensions
     using MKS units.
          (%i2) N;
                                               kg m
          (%o2)                                ----
                                                 2
                                                s
          (%i3) dyn;
                                             1      kg m
          (%o3)                           (------) (----)
                                           100000     2
                                                     s
          (%i4) g;
                                              1
          (%o4)                             (----) (kg)
                                             1000
          (%i5) centigram*inch/minutes^2;
                                            127        kg m
          (%o5)                       (-------------) (----)
                                       1800000000000     2
                                                        s

     In some cases this is the desired behavior.  If the user wishes to
     use other units, this is achieved with the 'setunits' command:
          (%i6) setunits([centigram,inch,minute]);
          (%o6)                                done
          (%i7) N;
                                      1800000000000   %in cg
          (%o7)                      (-------------) (------)
                                           127            2
                                                      %min
          (%i8) dyn;
                                         18000000   %in cg
          (%o8)                         (--------) (------)
                                           127          2
                                                    %min
          (%i9) g;
          (%o9)                             (100) (cg)
          (%i10) centigram*inch/minutes^2;
                                              %in cg
          (%o10)                              ------
                                                  2
                                              %min

     The setting of units is quite flexible.  For example, if we want to
     get back to kilograms, meters, and seconds as defaults for those
     dimensions we can do:
          (%i11) setunits([kg,m,s]);
          (%o11)                               done
          (%i12) centigram*inch/minutes^2;
                                            127        kg m
          (%o12)                      (-------------) (----)
                                       1800000000000     2
                                                        s

     Derived units are also handled by this command:
          (%i17) setunits(N);
          (%o17)                               done
          (%i18) N;
          (%o18)                                 N
          (%i19) dyn;
                                              1
          (%o19)                           (------) (N)
                                            100000
          (%i20) kg*m/s^2;
          (%o20)                                 N
          (%i21) centigram*inch/minutes^2;
                                              127
          (%o21)                        (-------------) (N)
                                         1800000000000

     Notice that the _unit_ package recognized the non MKS combination
     of mass, length, and inverse time squared as a force, and converted
     it to Newtons.  This is how Maxima works in general.  If, for
     example, we prefer dyne to Newtons, we simply do the following:
          (%i22) setunits(dyn);
          (%o22)                               done
          (%i23) kg*m/s^2;
          (%o23)                          (100000) (dyn)
          (%i24) centigram*inch/minutes^2;
                                            127
          (%o24)                         (--------) (dyn)
                                          18000000

     To discontinue simplifying to any force, we use the uforget
     command:
          (%i26) uforget(dyn);
          (%o26)                               false
          (%i27) kg*m/s^2;
                                               kg m
          (%o27)                               ----
                                                 2
                                                s
          (%i28) centigram*inch/minutes^2;
                                            127        kg m
          (%o28)                      (-------------) (----)
                                       1800000000000     2
                                                        s
     This would have worked equally well with 'uforget(N)' or
     'uforget(%force)'.

     See also 'uforget'.  To use this function write first
     'load("unit")'.

 -- Function: uforget (<list>)
     By default, the _unit_ package converts all units to the seven
     fundamental dimensions using MKS units.  This behavior can be
     changed with the 'setunits' command.  After that, the user can
     restore the default behavior for a particular dimension by means of
     the 'uforget' command:
          (%i13) setunits([centigram,inch,minute]);
          (%o13)                               done
          (%i14) centigram*inch/minutes^2;
                                              %in cg
          (%o14)                              ------
                                                  2
                                              %min
          (%i15) uforget([cg,%in,%min]);
          (%o15)                      [false, false, false]
          (%i16) centigram*inch/minutes^2;
                                            127        kg m
          (%o16)                      (-------------) (----)
                                       1800000000000     2
                                                        s

     'uforget' operates on dimensions, not units, so any unit of a
     particular dimension will work.  The dimension itself is also a
     legal argument.

     See also 'setunits'.  To use this function write first
     'load("unit")'.

 -- Function: convert (<expr>, <list>)
     When resetting the global environment is overkill, there is the
     'convert' command, which allows one time conversions.  It can
     accept either a single argument or a list of units to use in
     conversion.  When a convert operation is done, the normal global
     evaluation system is bypassed, in order to avoid the desired result
     being converted again.  As a consequence, for inexact calculations
     "rat" warnings will be visible if the global environment
     controlling this behavior ('ratprint') is true.  This is also
     useful for spot-checking the accuracy of a global conversion.
     Another feature is 'convert' will allow a user to do Base Dimension
     conversions even if the global environment is set to simplify to a
     Derived Dimension.

          (%i2) kg*m/s^2;
                                               kg m
          (%o2)                                ----
                                                 2
                                                s
          (%i3) convert(kg*m/s^2,[g,km,s]);
                                               g km
          (%o3)                                ----
                                                 2
                                                s
          (%i4) convert(kg*m/s^2,[g,inch,minute]);

          `rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748
                                        18000000000   %in g
          (%o4)                        (-----------) (-----)
                                            127           2
                                                      %min
          (%i5) convert(kg*m/s^2,[N]);
          (%o5)                                  N
          (%i6) convert(kg*m^2/s^2,[N]);
          (%o6)                                 m N
          (%i7) setunits([N,J]);
          (%o7)                                done
          (%i8) convert(kg*m^2/s^2,[N]);
          (%o8)                                 m N
          (%i9) convert(kg*m^2/s^2,[N,inch]);

          `rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748
                                           5000
          (%o9)                           (----) (%in N)
                                           127
          (%i10) convert(kg*m^2/s^2,[J]);
          (%o10)                                 J
          (%i11) kg*m^2/s^2;
          (%o11)                                 J
          (%i12) setunits([g,inch,s]);
          (%o12)                               done
          (%i13) kg*m/s^2;
          (%o13)                                 N
          (%i14) uforget(N);
          (%o14)                               false
          (%i15) kg*m/s^2;
                                          5000000   %in g
          (%o15)                         (-------) (-----)
                                            127       2
                                                     s
          (%i16) convert(kg*m/s^2,[g,inch,s]);

          `rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748
                                          5000000   %in g
          (%o16)                         (-------) (-----)
                                            127       2
                                                     s

     See also 'setunits' and 'uforget'.  To use this function write
     first 'load("unit")'.

 -- Optional variable: usersetunits
     Default value: none

     If a user wishes to have a default unit behavior other than that
     described, they can make use of _maxima-init.mac_ and the
     _usersetunits_ variable.  The _unit_ package will check on startup
     to see if this variable has been assigned a list.  If it has, it
     will use setunits on that list and take the units from that list to
     be defaults.  'uforget' will revert to the behavior defined by
     usersetunits over its own defaults.  For example, if we have a
     _maxima-init.mac_ file containing:
          usersetunits : [N,J];
     we would see the following behavior:
          (%i1) load("unit")$
          *******************************************************************
          *                       Units version 0.50                        *
          *          Definitions based on the NIST Reference on             *
          *              Constants, Units, and Uncertainty                  *
          *       Conversion factors from various sources including         *
          *                   NIST and the GNU units package                *
          *******************************************************************

          Redefining necessary functions...
          WARNING: DEFUN/DEFMACRO: redefining function
           TOPLEVEL-MACSYMA-EVAL ...
          WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...
          WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...
          WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...
          Initializing unit arrays...
          Done.
          User defaults found...
          User defaults initialized.
          (%i2) kg*m/s^2;
          (%o2)                                  N
          (%i3) kg*m^2/s^2;
          (%o3)                                  J
          (%i4) kg*m^3/s^2;
          (%o4)                                 J m
          (%i5) kg*m*km/s^2;
          (%o5)                             (1000) (J)
          (%i6) setunits([dyn,eV]);
          (%o6)                                done
          (%i7) kg*m/s^2;
          (%o7)                           (100000) (dyn)
          (%i8) kg*m^2/s^2;
          (%o8)                     (6241509596477042688) (eV)
          (%i9) kg*m^3/s^2;
          (%o9)                    (6241509596477042688) (eV m)
          (%i10) kg*m*km/s^2;
          (%o10)                   (6241509596477042688000) (eV)
          (%i11) uforget([dyn,eV]);
          (%o11)                           [false, false]
          (%i12) kg*m/s^2;
          (%o12)                                 N
          (%i13) kg*m^2/s^2;
          (%o13)                                 J
          (%i14) kg*m^3/s^2;
          (%o14)                                J m
          (%i15) kg*m*km/s^2;
          (%o15)                            (1000) (J)
     Without 'usersetunits', the initial inputs would have been
     converted to MKS, and uforget would have resulted in a return to
     MKS rules.  Instead, the user preferences are respected in both
     cases.  Notice these can still be overridden if desired.  To
     completely eliminate this simplification - i.e.  to have the user
     defaults reset to factory defaults - the 'dontusedimension' command
     can be used.  'uforget' can restore user settings again, but only
     if 'usedimension' frees it for use.  Alternately,
     'kill(usersetunits)' will completely remove all knowledge of the
     user defaults from the session.  Here are some examples of how
     these various options work.
          (%i2) kg*m/s^2;
          (%o2)                                  N
          (%i3) kg*m^2/s^2;
          (%o3)                                  J
          (%i4) setunits([dyn,eV]);
          (%o4)                                done
          (%i5) kg*m/s^2;
          (%o5)                           (100000) (dyn)
          (%i6) kg*m^2/s^2;
          (%o6)                     (6241509596477042688) (eV)
          (%i7) uforget([dyn,eV]);
          (%o7)                          [false, false]
          (%i8) kg*m/s^2;
          (%o8)                                  N
          (%i9) kg*m^2/s^2;
          (%o9)                                  J
          (%i10) dontusedimension(N);
          (%o10)                             [%force]
          (%i11) dontusedimension(J);
          (%o11)                         [%energy, %force]
          (%i12) kg*m/s^2;
                                               kg m
          (%o12)                               ----
                                                 2
                                                s
          (%i13) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o13)                               -----
                                                 2
                                                s
          (%i14) setunits([dyn,eV]);
          (%o14)                               done
          (%i15) kg*m/s^2;
                                               kg m
          (%o15)                               ----
                                                 2
                                                s
          (%i16) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o16)                               -----
                                                 2
                                                s
          (%i17) uforget([dyn,eV]);
          (%o17)                         [false, false]
          (%i18) kg*m/s^2;
                                               kg m
          (%o18)                               ----
                                                 2
                                                s
          (%i19) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o19)                               -----
                                                 2
                                                s
          (%i20) usedimension(N);
          Done.  To have Maxima simplify to this dimension, use
          setunits([unit]) to select a unit.
          (%o20)                               true
          (%i21) usedimension(J);
          Done.  To have Maxima simplify to this dimension, use
          setunits([unit]) to select a unit.
          (%o21)                               true
          (%i22) kg*m/s^2;
                                               kg m
          (%o22)                               ----
                                                 2
                                                s
          (%i23) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o23)                               -----
                                                 2
                                                s
          (%i24) setunits([dyn,eV]);
          (%o24)                               done
          (%i25) kg*m/s^2;
          (%o25)                          (100000) (dyn)
          (%i26) kg*m^2/s^2;
          (%o26)                    (6241509596477042688) (eV)
          (%i27) uforget([dyn,eV]);
          (%o27)                           [false, false]
          (%i28) kg*m/s^2;
          (%o28)                                 N
          (%i29) kg*m^2/s^2;
          (%o29)                                 J
          (%i30) kill(usersetunits);
          (%o30)                               done
          (%i31) uforget([dyn,eV]);
          (%o31)                          [false, false]
          (%i32) kg*m/s^2;
                                               kg m
          (%o32)                               ----
                                                 2
                                                s
          (%i33) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o33)                               -----
                                                 2
                                                s
     Unfortunately this wide variety of options is a little confusing at
     first, but once the user grows used to them they should find they
     have very full control over their working environment.

 -- Function: metricexpandall (<x>)
     Rebuilds global unit lists automatically creating all desired
     metric units.  <x> is a numerical argument which is used to specify
     how many metric prefixes the user wishes defined.  The arguments
     are as follows, with each higher number defining all lower numbers'
     units:
                     0 - none. Only base units
                     1 - kilo, centi, milli
          (default)  2 - giga, mega, kilo, hecto, deka, deci, centi, milli,
                         micro, nano
                     3 - peta, tera, giga, mega, kilo, hecto, deka, deci,
                         centi, milli, micro, nano, pico, femto
                     4 - all
     Normally, Maxima will not define the full expansion since this
     results in a very large number of units, but 'metricexpandall' can
     be used to rebuild the list in a more or less complete fashion.
     The relevant variable in the _unit.mac_ file is <%unitexpand>.

 -- Variable: %unitexpand
     Default value: '2'

     This is the value supplied to 'metricexpandall' during the initial
     loading of _unit_.


File: maxima.info,  Node: zeilberger,  Next: Function and Variable Index,  Prev: unit,  Up: Top

82 zeilberger
*************

* Menu:

* Introduction to zeilberger::
* Functions and Variables for zeilberger::


File: maxima.info,  Node: Introduction to zeilberger,  Next: Functions and Variables for zeilberger,  Prev: zeilberger,  Up: zeilberger

82.1 Introduction to zeilberger
===============================

'zeilberger' is a implementation of Zeilberger's algorithm for definite
hypergeometric summation, and also Gosper's algorithm for indefinite
hypergeometric summation.

   'zeilberger' makes use of the "filtering" optimization method
developed by Axel Riese.

   'zeilberger' was developed by Fabrizio Caruso.

   'load (zeilberger)' loads this package.

82.1.1 The indefinite summation problem
---------------------------------------

'zeilberger' implements Gosper's algorithm for indefinite hypergeometric
summation.  Given a hypergeometric term F_k in k we want to find its
hypergeometric anti-difference, that is, a hypergeometric term f_k such
that

   F_k = f_(k+1) - f_k.

82.1.2 The definite summation problem
-------------------------------------

'zeilberger' implements Zeilberger's algorithm for definite
hypergeometric summation.  Given a proper hypergeometric term (in n and
k) F_(n,k) and a positive integer d we want to find a d-th order linear
recurrence with polynomial coefficients (in n) for F_(n,k) and a
rational function R in n and k such that

   a_0 F_(n,k) + ... + a_d F_(n+d),k = Delta_k(R(n,k) F_(n,k)),

   where Delta_k is the k-forward difference operator, i.e.,
Delta_k(t_k) := t_(k+1) - t_k.

82.1.3 Verbosity levels
-----------------------

There are also verbose versions of the commands which are called by
adding one of the following prefixes:

'Summary'
     Just a summary at the end is shown
'Verbose'
     Some information in the intermidiate steps
'VeryVerbose'
     More information
'Extra'
     Even more information including information on the linear system in
     Zeilberger's algorithm

   For example:
'GosperVerbose', 'parGosperVeryVerbose', 'ZeilbergerExtra',
'AntiDifferenceSummary'.


File: maxima.info,  Node: Functions and Variables for zeilberger,  Prev: Introduction to zeilberger,  Up: zeilberger

82.2 Functions and Variables for zeilberger
===========================================

 -- Function: AntiDifference (F_k, <k>)

     Returns the hypergeometric anti-difference of F_k, if it exists.
     Otherwise 'AntiDifference' returns 'no_hyp_antidifference'.

 -- Function: Gosper (F_k, <k>)
     Returns the rational certificate R(k) for F_k, that is, a rational
     function such that F_k = R(k+1) F_(k+1) - R(k) F_k, if it exists.
     Otherwise, 'Gosper' returns 'no_hyp_sol'.

 -- Function: GosperSum (F_k, <k>, <a>, <b>)

     Returns the summmation of F_k from <k> = <a> to <k> = <b> if F_k
     has a hypergeometric anti-difference.  Otherwise, 'GosperSum'
     returns 'nongosper_summable'.

     Examples:

          (%i1) load (zeilberger)$
          (%i2) GosperSum ((-1)^k*k / (4*k^2 - 1), k, 1, n);
          Dependent equations eliminated:  (1)
                                     3       n + 1
                                (n + -) (- 1)
                                     2               1
          (%o2)               - ------------------ - -
                                            2        4
                                2 (4 (n + 1)  - 1)
          (%i3) GosperSum (1 / (4*k^2 - 1), k, 1, n);
                                          3
                                    - n - -
                                          2       1
          (%o3)                  -------------- + -
                                          2       2
                                 4 (n + 1)  - 1
          (%i4) GosperSum (x^k, k, 1, n);
                                    n + 1
                                   x          x
          (%o4)                    ------ - -----
                                   x - 1    x - 1
          (%i5) GosperSum ((-1)^k*a! / (k!*(a - k)!), k, 1, n);
                                          n + 1
                          a! (n + 1) (- 1)              a!
          (%o5)       - ------------------------- - ----------
                        a (- n + a - 1)! (n + 1)!   a (a - 1)!
          (%i6) GosperSum (k*k!, k, 1, n);
          Dependent equations eliminated:  (1)
          (%o6)                     (n + 1)! - 1
          (%i7) GosperSum ((k + 1)*k! / (k + 1)!, k, 1, n);
                            (n + 1) (n + 2) (n + 1)!
          (%o7)             ------------------------ - 1
                                    (n + 2)!
          (%i8) GosperSum (1 / ((a - k)!*k!), k, 1, n);
          (%o8)                  NON_GOSPER_SUMMABLE

 -- Function: parGosper (F_(n,k), <k>, <n>, <d>)

     Attempts to find a <d>-th order recurrence for F_(n,k).

     The algorithm yields a sequence [s_1, s_2, ..., s_m] of solutions.
     Each solution has the form

     [R(n, k), [a_0, a_1, ..., a_d]].

     'parGosper' returns '[]' if it fails to find a recurrence.

 -- Function: Zeilberger (F_(n,k), <k>, <n>)

     Attempts to compute the indefinite hypergeometric summation of
     F_(n,k).

     'Zeilberger' first invokes 'Gosper', and if that fails to find a
     solution, then invokes 'parGosper' with order 1, 2, 3, ..., up to
     'MAX_ORD'.  If Zeilberger finds a solution before reaching
     'MAX_ORD', it stops and returns the solution.

     The algorithms yields a sequence [s_1, s_2, ..., s_m] of solutions.
     Each solution has the form

     [R(n,k), [a_0, a_1, ..., a_d]].

     'Zeilberger' returns '[]' if it fails to find a solution.

     'Zeilberger' invokes 'Gosper' only if 'Gosper_in_Zeilberger' is
     'true'.

82.3 General global variables
=============================

 -- Global variable: MAX_ORD
     Default value: 5

     'MAX_ORD' is the maximum recurrence order attempted by
     'Zeilberger'.

 -- Global variable: simplified_output
     Default value: 'false'

     When 'simplified_output' is 'true', functions in the 'zeilberger'
     package attempt further simplification of the solution.

 -- Global variable: linear_solver
     Default value: 'linsolve'

     'linear_solver' names the solver which is used to solve the system
     of equations in Zeilberger's algorithm.

 -- Global variable: warnings
     Default value: 'true'

     When 'warnings' is 'true', functions in the 'zeilberger' package
     print warning messages during execution.

 -- Global variable: Gosper_in_Zeilberger
     Default value: 'true'

     When 'Gosper_in_Zeilberger' is 'true', the 'Zeilberger' function
     calls 'Gosper' before calling 'parGosper'.  Otherwise, 'Zeilberger'
     goes immediately to 'parGosper'.

 -- Global variable: trivial_solutions
     Default value: 'true'

     When 'trivial_solutions' is 'true', 'Zeilberger' returns solutions
     which have certificate equal to zero, or all coefficients equal to
     zero.

82.4 Variables related to the modular test
==========================================

 -- Global variable: mod_test
     Default value: 'false'

     When 'mod_test' is 'true', 'parGosper' executes a modular test for
     discarding systems with no solutions.

 -- Global variable: modular_linear_solver
     Default value: 'linsolve'

     'modular_linear_solver' names the linear solver used by the modular
     test in 'parGosper'.

 -- Global variable: ev_point
     Default value: 'big_primes[10]'

     'ev_point' is the value at which the variable <n> is evaluated when
     executing the modular test in 'parGosper'.

 -- Global variable: mod_big_prime
     Default value: 'big_primes[1]'

     'mod_big_prime' is the modulus used by the modular test in
     'parGosper'.

 -- Global variable: mod_threshold
     Default value: 4

     'mod_threshold' is the greatest order for which the modular test in
     'parGosper' is attempted.


File: maxima.info,  Node: Function and Variable Index,  Prev: zeilberger,  Up: Top

Appendix A Function and Variable Index
**************************************

 [index ]
* Menu:

* !:                                     Combinatorial Functions.
                                                             (line   74)
* !!:                                    Combinatorial Functions.
                                                             (line    6)
* #:                                     Operators for Equations.
                                                             (line    6)
* $:                                     Functions and Variables for Command Line.
                                                             (line  203)
* %:                                     Functions and Variables for Command Line.
                                                             (line   91)
* %%:                                    Functions and Variables for Command Line.
                                                             (line  105)
* %and:                                  Functions and Variables for to_poly_solve.
                                                             (line   15)
* %c:                                    Functions and Variables for contrib_ode.
                                                             (line   76)
* %e:                                    Functions and Variables for Constants.
                                                             (line    6)
* %edispflag:                            Functions and Variables for Display.
                                                             (line    6)
* %emode:                                Root Exponential and Logarithmic Functions.
                                                             (line   15)
* %enumer:                               Root Exponential and Logarithmic Functions.
                                                             (line   55)
* %e_to_numlog:                          Root Exponential and Logarithmic Functions.
                                                             (line    6)
* %f:                                    Hypergeometric Functions.
                                                             (line   19)
* %gamma:                                Functions and Variables for Constants.
                                                             (line   21)
* %i:                                    Functions and Variables for Constants.
                                                             (line   12)
* %iargs:                                Functions and Variables for Trigonometric.
                                                             (line   52)
* %if:                                   Functions and Variables for to_poly_solve.
                                                             (line   89)
* %k1:                                   Functions and Variables for contrib_ode.
                                                             (line   80)
* %k2:                                   Functions and Variables for contrib_ode.
                                                             (line   84)
* %m:                                    Hypergeometric Functions.
                                                             (line   12)
* %or:                                   Functions and Variables for to_poly_solve.
                                                             (line  132)
* %phi:                                  Functions and Variables for Constants.
                                                             (line   48)
* %pi:                                   Functions and Variables for Constants.
                                                             (line  103)
* %piargs:                               Functions and Variables for Trigonometric.
                                                             (line    6)
* %rnum_list:                            Functions and Variables for Equations.
                                                             (line    6)
* %s:                                    Bessel Functions.   (line  167)
* %th:                                   Functions and Variables for Command Line.
                                                             (line  152)
* %unitexpand:                           Functions and Variables for Units.
                                                             (line  407)
* %w:                                    Hypergeometric Functions.
                                                             (line   16)
* ':                                     Functions and Variables for Evaluation.
                                                             (line    6)
* '':                                    Functions and Variables for Evaluation.
                                                             (line  132)
* *:                                     Arithmetic operators.
                                                             (line    8)
* **:                                    Arithmetic operators.
                                                             (line  165)
* +:                                     Arithmetic operators.
                                                             (line    6)
* -:                                     Arithmetic operators.
                                                             (line    7)
* .:                                     Arithmetic operators.
                                                             (line  207)
* /:                                     Arithmetic operators.
                                                             (line    9)
* ::                                     Assignment operators.
                                                             (line    6)
* :::                                    Assignment operators.
                                                             (line   89)
* ::=:                                   Assignment operators.
                                                             (line  115)
* :=:                                    Assignment operators.
                                                             (line  188)
* ;:                                     Functions and Variables for Command Line.
                                                             (line  218)
* <:                                     Relational operators.
                                                             (line    6)
* <=:                                    Relational operators.
                                                             (line    7)
* =:                                     Operators for Equations.
                                                             (line   30)
* >:                                     Relational operators.
                                                             (line    9)
* >=:                                    Relational operators.
                                                             (line    8)
* ?:                                     Functions and Variables for Command Line.
                                                             (line  182)
* ??:                                    Functions and Variables for Command Line.
                                                             (line  195)
* @:                                     Functions and Variables for Structures.
                                                             (line   72)
* [:                                     Functions and Variables for Lists.
                                                             (line    6)
* \\:                                    Introduction to Strings.
                                                             (line    6)
* ]:                                     Functions and Variables for Lists.
                                                             (line    7)
* ^:                                     Arithmetic operators.
                                                             (line   10)
* ^^:                                    Arithmetic operators.
                                                             (line  188)
* _:                                     Functions and Variables for Command Line.
                                                             (line   46)
* __:                                    Functions and Variables for Command Line.
                                                             (line    6)
* `:                                     Functions and Variables for ezunits.
                                                             (line    6)
* ` <1>:                                 Functions and Variables for ezunits.
                                                             (line   92)
* |:                                     Functions and Variables for itensor.
                                                             (line 1445)
* ~:                                     Functions and Variables for itensor.
                                                             (line 1411)
* abasep:                                Functions and Variables for atensor.
                                                             (line  133)
* abs:                                   Functions for Numbers.
                                                             (line    6)
* absboxchar:                            Functions and Variables for Display.
                                                             (line   25)
* absint:                                Functions and Variables for Fourier series.
                                                             (line   33)
* absolute_real_time:                    Functions and Variables for Runtime Environment.
                                                             (line  186)
* acos:                                  Functions and Variables for Trigonometric.
                                                             (line   81)
* acosh:                                 Functions and Variables for Trigonometric.
                                                             (line   85)
* acot:                                  Functions and Variables for Trigonometric.
                                                             (line   89)
* acoth:                                 Functions and Variables for Trigonometric.
                                                             (line   93)
* acsc:                                  Functions and Variables for Trigonometric.
                                                             (line   97)
* acsch:                                 Functions and Variables for Trigonometric.
                                                             (line  101)
* activate:                              Functions and Variables for Facts.
                                                             (line    6)
* activecontexts:                        Functions and Variables for Facts.
                                                             (line   16)
* adapt_depth:                           Plotting Options.   (line   14)
* adapt_depth <1>:                       Functions and Variables for draw.
                                                             (line  193)
* addcol:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line    6)
* Addition:                              Arithmetic operators.
                                                             (line    6)
* additive:                              Functions and Variables for Simplification.
                                                             (line    6)
* addmatrices:                           Functions and Variables for linearalgebra.
                                                             (line    6)
* addrow:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line   11)
* add_edge:                              Functions and Variables for graphs.
                                                             (line 1127)
* add_edges:                             Functions and Variables for graphs.
                                                             (line 1140)
* add_vertex:                            Functions and Variables for graphs.
                                                             (line 1154)
* add_vertices:                          Functions and Variables for graphs.
                                                             (line 1168)
* adim:                                  Functions and Variables for atensor.
                                                             (line   76)
* adjacency_matrix:                      Functions and Variables for graphs.
                                                             (line  316)
* adjoin:                                Functions and Variables for Sets.
                                                             (line    6)
* adjoint:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line   16)
* af:                                    Functions and Variables for atensor.
                                                             (line  101)
* aform:                                 Functions and Variables for atensor.
                                                             (line   83)
* agd:                                   Package functs.     (line  145)
* airy_ai:                               Airy Functions.     (line   15)
* airy_bi:                               Airy Functions.     (line   27)
* airy_dai:                              Airy Functions.     (line   22)
* airy_dbi:                              Airy Functions.     (line   34)
* algebraic:                             Functions and Variables for Polynomials.
                                                             (line    6)
* algepsilon:                            Functions and Variables for Equations.
                                                             (line   29)
* algexact:                              Functions and Variables for Equations.
                                                             (line   34)
* algsys:                                Functions and Variables for Equations.
                                                             (line   49)
* alg_type:                              Functions and Variables for atensor.
                                                             (line   71)
* alias:                                 Functions and Variables for Expressions.
                                                             (line    6)
* aliases:                               Functions and Variables for Expressions.
                                                             (line   12)
* allbut:                                Functions and Variables for Expressions.
                                                             (line   19)
* allocation:                            Functions and Variables for draw.
                                                             (line  201)
* allroots:                              Functions and Variables for Equations.
                                                             (line  151)
* allsym:                                Functions and Variables for itensor.
                                                             (line  528)
* all_dotsimp_denoms:                    Functions and Variables for Affine.
                                                             (line  132)
* alphabetic:                            Functions and Variables for Properties.
                                                             (line    6)
* alphacharp:                            Functions and Variables for characters.
                                                             (line    6)
* alphanumericp:                         Functions and Variables for characters.
                                                             (line    9)
* amortization:                          Functions and Variables for finance.
                                                             (line  105)
* and:                                   Logical operators.  (line    6)
* animation:                             Visualization with VTK.
                                                             (line  169)
* annuity_fv:                            Functions and Variables for finance.
                                                             (line   66)
* annuity_pv:                            Functions and Variables for finance.
                                                             (line   53)
* antid:                                 Functions and Variables for Differentiation.
                                                             (line    6)
* antidiff:                              Functions and Variables for Differentiation.
                                                             (line   60)
* AntiDifference:                        Functions and Variables for zeilberger.
                                                             (line    6)
* antisymmetric:                         Functions and Variables for Simplification.
                                                             (line   30)
* append:                                Functions and Variables for Lists.
                                                             (line   40)
* appendfile:                            Functions and Variables for File Input and Output.
                                                             (line    6)
* apply:                                 Functions and Variables for Function Definition.
                                                             (line    6)
* apply1:                                Functions and Variables for Rules and Patterns.
                                                             (line    6)
* apply2:                                Functions and Variables for Rules and Patterns.
                                                             (line   21)
* applyb1:                               Functions and Variables for Rules and Patterns.
                                                             (line   34)
* apropos:                               Functions and Variables for Help.
                                                             (line    6)
* args:                                  Functions and Variables for Expressions.
                                                             (line   48)
* arithmetic:                            Package functs.     (line  104)
* arithsum:                              Package functs.     (line  122)
* arit_amortization:                     Functions and Variables for finance.
                                                             (line  130)
* array:                                 Functions and Variables for Arrays.
                                                             (line    6)
* arrayapply:                            Functions and Variables for Arrays.
                                                             (line   36)
* arrayinfo:                             Functions and Variables for Arrays.
                                                             (line   44)
* arraymake:                             Functions and Variables for Arrays.
                                                             (line  142)
* arrays:                                Functions and Variables for Arrays.
                                                             (line  187)
* arraysetapply:                         Functions and Variables for Arrays.
                                                             (line  215)
* ascii:                                 Functions and Variables for characters.
                                                             (line   12)
* asec:                                  Functions and Variables for Trigonometric.
                                                             (line  105)
* asech:                                 Functions and Variables for Trigonometric.
                                                             (line  109)
* asin:                                  Functions and Variables for Trigonometric.
                                                             (line  113)
* asinh:                                 Functions and Variables for Trigonometric.
                                                             (line  117)
* askexp:                                Functions and Variables for Miscellaneous Options.
                                                             (line    6)
* askinteger:                            Functions and Variables for Facts.
                                                             (line   23)
* asksign:                               Functions and Variables for Facts.
                                                             (line   39)
* Assignment operator:                   Assignment operators.
                                                             (line    7)
* Assignment operator (evaluates left-hand side): Assignment operators.
                                                             (line   90)
* assoc:                                 Functions and Variables for Lists.
                                                             (line   49)
* assoc_legendre_p:                      Functions and Variables for orthogonal polynomials.
                                                             (line    6)
* assoc_legendre_q:                      Functions and Variables for orthogonal polynomials.
                                                             (line   13)
* assume:                                Functions and Variables for Facts.
                                                             (line   48)
* assumescalar:                          Functions and Variables for Facts.
                                                             (line  106)
* assume_external_byte_order:            Functions and Variables for binary input and output.
                                                             (line    6)
* assume_pos:                            Functions and Variables for Facts.
                                                             (line  128)
* assume_pos_pred:                       Functions and Variables for Facts.
                                                             (line  151)
* asymbol:                               Functions and Variables for atensor.
                                                             (line   89)
* asympa:                                Introduction to asympa.
                                                             (line    6)
* at:                                    Functions and Variables for Differentiation.
                                                             (line  110)
* atan:                                  Functions and Variables for Trigonometric.
                                                             (line  121)
* atan2:                                 Functions and Variables for Trigonometric.
                                                             (line  125)
* atanh:                                 Functions and Variables for Trigonometric.
                                                             (line  130)
* atensimp:                              Functions and Variables for atensor.
                                                             (line   62)
* atom:                                  Functions and Variables for Expressions.
                                                             (line   61)
* atomgrad:                              Functions and Variables for Differentiation.
                                                             (line  157)
* atrig1:                                Functions and Variables for Trigonometric.
                                                             (line  134)
* atvalue:                               Functions and Variables for Differentiation.
                                                             (line  162)
* augcoefmatrix:                         Functions and Variables for Matrices and Linear Algebra.
                                                             (line   21)
* augmented_lagrangian_method:           Functions and Variables for augmented_lagrangian.
                                                             (line    6)
* av:                                    Functions and Variables for atensor.
                                                             (line  108)
* average_degree:                        Functions and Variables for graphs.
                                                             (line  331)
* axes:                                  Plotting Options.   (line   20)
* axis_3d:                               Functions and Variables for draw.
                                                             (line  240)
* axis_bottom:                           Functions and Variables for draw.
                                                             (line  258)
* axis_left:                             Functions and Variables for draw.
                                                             (line  274)
* axis_right:                            Functions and Variables for draw.
                                                             (line  290)
* axis_top:                              Functions and Variables for draw.
                                                             (line  306)
* azimuth:                               Plotting Options.   (line   30)
* azimuth <1>:                           Visualization with VTK.
                                                             (line   62)
* background:                            Visualization with VTK.
                                                             (line   70)
* background_color:                      Functions and Variables for draw.
                                                             (line  322)
* backslash:                             Introduction to Strings.
                                                             (line    6)
* backsubst:                             Functions and Variables for Equations.
                                                             (line  222)
* backtrace:                             Functions and Variables for Program Flow.
                                                             (line    6)
* bars:                                  Functions and Variables for draw.
                                                             (line 2752)
* barsplot:                              Functions and Variables for statistical graphs.
                                                             (line    6)
* barsplot_description:                  Functions and Variables for statistical graphs.
                                                             (line  119)
* Base of natural logarithm:             Functions and Variables for Constants.
                                                             (line    7)
* base64:                                Functions and Variables for strings.
                                                             (line    6)
* base64_decode:                         Functions and Variables for strings.
                                                             (line   17)
* bashindices:                           Functions and Variables for Sums and Products.
                                                             (line    6)
* batch:                                 Functions and Variables for File Input and Output.
                                                             (line   15)
* batchload:                             Functions and Variables for File Input and Output.
                                                             (line   68)
* bc2:                                   Functions and Variables for Differential Equations.
                                                             (line    6)
* bdvac:                                 Functions and Variables for ctensor.
                                                             (line  793)
* belln:                                 Functions and Variables for Sets.
                                                             (line   24)
* benefit_cost:                          Functions and Variables for finance.
                                                             (line  239)
* berlefact:                             Functions and Variables for Polynomials.
                                                             (line   12)
* bern:                                  Functions and Variables for Number Theory.
                                                             (line    6)
* bernpoly:                              Functions and Variables for Number Theory.
                                                             (line   24)
* bernstein_approx:                      Functions and Variables for Bernstein.
                                                             (line   74)
* bernstein_expand:                      Functions and Variables for Bernstein.
                                                             (line  101)
* bernstein_explicit:                    Functions and Variables for Bernstein.
                                                             (line   49)
* bernstein_poly:                        Functions and Variables for Bernstein.
                                                             (line    6)
* besselexpand:                          Bessel Functions.   (line  127)
* bessel_i:                              Bessel Functions.   (line   34)
* bessel_j:                              Bessel Functions.   (line    6)
* bessel_k:                              Bessel Functions.   (line   50)
* bessel_y:                              Bessel Functions.   (line   22)
* beta:                                  Gamma and factorial Functions.
                                                             (line  214)
* beta_args_sum_to_integer:              Gamma and factorial Functions.
                                                             (line  706)
* beta_expand:                           Gamma and factorial Functions.
                                                             (line  700)
* beta_incomplete:                       Gamma and factorial Functions.
                                                             (line  330)
* beta_incomplete_generalized:           Gamma and factorial Functions.
                                                             (line  578)
* beta_incomplete_regularized:           Gamma and factorial Functions.
                                                             (line  479)
* bezout:                                Functions and Variables for Polynomials.
                                                             (line   19)
* bfallroots:                            Functions and Variables for Equations.
                                                             (line  211)
* bffac:                                 Gamma and factorial Functions.
                                                             (line   10)
* bfhzeta:                               Functions and Variables for Number Theory.
                                                             (line   34)
* bfloat:                                Functions and Variables for Numbers.
                                                             (line    6)
* bfloatp:                               Functions and Variables for Numbers.
                                                             (line   16)
* bfpsi:                                 Gamma and factorial Functions.
                                                             (line   16)
* bfpsi0:                                Gamma and factorial Functions.
                                                             (line   17)
* bftorat:                               Functions and Variables for Numbers.
                                                             (line   20)
* bftrunc:                               Functions and Variables for Numbers.
                                                             (line   47)
* bfzeta:                                Functions and Variables for Number Theory.
                                                             (line   28)
* bf_find_root:                          Functions for numerical solution of equations.
                                                             (line   36)
* bf_find_root <1>:                      Functions for numerical solution of equations.
                                                             (line   37)
* bf_fmin_cobyla:                        Functions and Variables for cobyla.
                                                             (line   59)
* biconnected_components:                Functions and Variables for graphs.
                                                             (line  341)
* bimetric:                              Functions and Variables for ctensor.
                                                             (line  817)
* bindtest:                              Functions and Variables for Properties.
                                                             (line   25)
* binomial:                              Combinatorial Functions.
                                                             (line   23)
* bipartition:                           Functions and Variables for graphs.
                                                             (line  356)
* block:                                 Functions and Variables for Function Definition.
                                                             (line   65)
* blockmatrixp:                          Functions and Variables for linearalgebra.
                                                             (line   21)
* bode_gain:                             Functions and Variables for bode.
                                                             (line    6)
* bode_phase:                            Functions and Variables for bode.
                                                             (line   51)
* border:                                Functions and Variables for draw.
                                                             (line  336)
* bothcoef:                              Functions and Variables for Polynomials.
                                                             (line   37)
* boundaries_array:                      Functions and Variables for worldmap.
                                                             (line   11)
* box:                                   Functions and Variables for Expressions.
                                                             (line   67)
* box <1>:                               Plotting Options.   (line   42)
* boxchar:                               Functions and Variables for Expressions.
                                                             (line  118)
* boxplot:                               Functions and Variables for statistical graphs.
                                                             (line  145)
* boxplot_description:                   Functions and Variables for statistical graphs.
                                                             (line  199)
* break:                                 Functions and Variables for Function Definition.
                                                             (line  119)
* breakup:                               Functions and Variables for Equations.
                                                             (line  240)
* bug_report:                            Functions and Variables for Bug Detection and Reporting.
                                                             (line   61)
* buildq:                                Macros.             (line    6)
* build_info:                            Functions and Variables for Bug Detection and Reporting.
                                                             (line   72)
* build_sample:                          Functions and Variables for data manipulation.
                                                             (line    6)
* burn:                                  Functions and Variables for Number Theory.
                                                             (line   52)
* cabs:                                  Functions for Complex Numbers.
                                                             (line    6)
* canform:                               Functions and Variables for itensor.
                                                             (line  592)
* canten:                                Functions and Variables for itensor.
                                                             (line  510)
* capping:                               Visualization with VTK.
                                                             (line  182)
* cardinality:                           Functions and Variables for Sets.
                                                             (line   51)
* carg:                                  Functions for Complex Numbers.
                                                             (line   70)
* cartan:                                Functions and Variables for Differentiation.
                                                             (line  220)
* cartesian_product:                     Functions and Variables for Sets.
                                                             (line   69)
* catch:                                 Functions and Variables for Function Definition.
                                                             (line  125)
* cauchysum:                             Functions and Variables for Series.
                                                             (line    6)
* cauchy_matrix:                         Functions and Variables for Matrices and Linear Algebra.
                                                             (line   36)
* cbffac:                                Gamma and factorial Functions.
                                                             (line   26)
* cbrange:                               Functions and Variables for draw.
                                                             (line  355)
* cbtics:                                Functions and Variables for draw.
                                                             (line  382)
* cdf_bernoulli:                         Functions and Variables for discrete distributions.
                                                             (line  230)
* cdf_beta:                              Functions and Variables for continuous distributions.
                                                             (line  823)
* cdf_binomial:                          Functions and Variables for discrete distributions.
                                                             (line  101)
* cdf_cauchy:                            Functions and Variables for continuous distributions.
                                                             (line 1311)
* cdf_chi2:                              Functions and Variables for continuous distributions.
                                                             (line  276)
* cdf_continuous_uniform:                Functions and Variables for continuous distributions.
                                                             (line  881)
* cdf_discrete_uniform:                  Functions and Variables for discrete distributions.
                                                             (line  385)
* cdf_exp:                               Functions and Variables for continuous distributions.
                                                             (line  548)
* cdf_f:                                 Functions and Variables for continuous distributions.
                                                             (line  462)
* cdf_gamma:                             Functions and Variables for continuous distributions.
                                                             (line  758)
* cdf_general_finite_discrete:           Functions and Variables for discrete distributions.
                                                             (line   24)
* cdf_geometric:                         Functions and Variables for discrete distributions.
                                                             (line  335)
* cdf_gumbel:                            Functions and Variables for continuous distributions.
                                                             (line 1338)
* cdf_hypergeometric:                    Functions and Variables for discrete distributions.
                                                             (line  445)
* cdf_laplace:                           Functions and Variables for continuous distributions.
                                                             (line 1261)
* cdf_logistic:                          Functions and Variables for continuous distributions.
                                                             (line  934)
* cdf_lognormal:                         Functions and Variables for continuous distributions.
                                                             (line  690)
* cdf_negative_binomial:                 Functions and Variables for discrete distributions.
                                                             (line  509)
* cdf_noncentral_chi2:                   Functions and Variables for continuous distributions.
                                                             (line  408)
* cdf_noncentral_student_t:              Functions and Variables for continuous distributions.
                                                             (line  173)
* cdf_normal:                            Functions and Variables for continuous distributions.
                                                             (line   11)
* cdf_pareto:                            Functions and Variables for continuous distributions.
                                                             (line  984)
* cdf_poisson:                           Functions and Variables for discrete distributions.
                                                             (line  162)
* cdf_rank_sum:                          Functions and Variables for special distributions.
                                                             (line   27)
* cdf_rayleigh:                          Functions and Variables for continuous distributions.
                                                             (line 1099)
* cdf_signed_rank:                       Functions and Variables for special distributions.
                                                             (line   13)
* cdf_student_t:                         Functions and Variables for continuous distributions.
                                                             (line   82)
* cdf_weibull:                           Functions and Variables for continuous distributions.
                                                             (line 1035)
* cdisplay:                              Functions and Variables for ctensor.
                                                             (line  848)
* ceiling:                               Functions for Numbers.
                                                             (line   94)
* center:                                Visualization with VTK.
                                                             (line  189)
* central_moment:                        Functions and Variables for descriptive statistics.
                                                             (line  147)
* cequal:                                Functions and Variables for characters.
                                                             (line   22)
* cequalignore:                          Functions and Variables for characters.
                                                             (line   25)
* cf:                                    Functions and Variables for Number Theory.
                                                             (line   94)
* cfdisrep:                              Functions and Variables for Number Theory.
                                                             (line  162)
* cfexpand:                              Functions and Variables for Number Theory.
                                                             (line  179)
* cflength:                              Functions and Variables for Number Theory.
                                                             (line  196)
* cframe_flag:                           Functions and Variables for ctensor.
                                                             (line 1094)
* cgeodesic:                             Functions and Variables for ctensor.
                                                             (line  787)
* cgreaterp:                             Functions and Variables for characters.
                                                             (line   28)
* cgreaterpignore:                       Functions and Variables for characters.
                                                             (line   32)
* changename:                            Functions and Variables for itensor.
                                                             (line   24)
* changevar:                             Functions and Variables for Integration.
                                                             (line    6)
* chaosgame:                             Graphical analysis of discrete dynamical systems.
                                                             (line    6)
* charat:                                Functions and Variables for strings.
                                                             (line   24)
* charfun:                               Functions and Variables for Predicates.
                                                             (line    6)
* charfun2:                              Functions and Variables for interpol.
                                                             (line  105)
* charlist:                              Functions and Variables for strings.
                                                             (line   31)
* charp:                                 Functions and Variables for characters.
                                                             (line   35)
* charpoly:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line   69)
* chebyshev_t:                           Functions and Variables for orthogonal polynomials.
                                                             (line   19)
* chebyshev_u:                           Functions and Variables for orthogonal polynomials.
                                                             (line   24)
* checkdiv:                              Functions and Variables for ctensor.
                                                             (line  778)
* check_overlaps:                        Functions and Variables for Affine.
                                                             (line   88)
* chinese:                               Functions and Variables for Number Theory.
                                                             (line   73)
* cholesky:                              Functions and Variables for linearalgebra.
                                                             (line   71)
* christof:                              Functions and Variables for ctensor.
                                                             (line  200)
* chromatic_index:                       Functions and Variables for graphs.
                                                             (line  368)
* chromatic_number:                      Functions and Variables for graphs.
                                                             (line  377)
* cint:                                  Functions and Variables for characters.
                                                             (line   39)
* circulant_graph:                       Functions and Variables for graphs.
                                                             (line   70)
* clear_edge_weight:                     Functions and Variables for graphs.
                                                             (line  387)
* clear_rules:                           Functions and Variables for Rules and Patterns.
                                                             (line  851)
* clear_vertex_label:                    Functions and Variables for graphs.
                                                             (line  400)
* clebsch_gordan:                        Functions and Variables for clebsch_gordan.
                                                             (line    6)
* clebsch_graph:                         Functions and Variables for graphs.
                                                             (line   90)
* clessp:                                Functions and Variables for characters.
                                                             (line   42)
* clesspignore:                          Functions and Variables for characters.
                                                             (line   46)
* close:                                 Functions and Variables for input and output.
                                                             (line   25)
* closefile:                             Functions and Variables for File Input and Output.
                                                             (line   84)
* cmetric:                               Functions and Variables for ctensor.
                                                             (line   14)
* cnonmet_flag:                          Functions and Variables for ctensor.
                                                             (line 1109)
* coeff:                                 Functions and Variables for Polynomials.
                                                             (line   52)
* coefmatrix:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  106)
* cograd:                                Functions and Variables for ctensor.
                                                             (line  726)
* col:                                   Functions and Variables for Matrices and Linear Algebra.
                                                             (line  116)
* collapse:                              Functions and Variables for Expressions.
                                                             (line  128)
* collectterms:                          Package facexp.     (line   99)
* color:                                 Plotting Options.   (line   48)
* color <1>:                             Functions and Variables for draw.
                                                             (line  405)
* color <2>:                             Visualization with VTK.
                                                             (line  197)
* colorbox:                              Functions and Variables for draw.
                                                             (line  454)
* color_bar:                             Plotting Options.   (line   62)
* color_bar_tics:                        Plotting Options.   (line   70)
* columnop:                              Functions and Variables for linearalgebra.
                                                             (line   26)
* columns:                               Functions and Variables for draw.
                                                             (line  485)
* columnspace:                           Functions and Variables for linearalgebra.
                                                             (line   37)
* columnswap:                            Functions and Variables for linearalgebra.
                                                             (line   32)
* columnvector:                          Functions and Variables for Matrices and Linear Algebra.
                                                             (line  121)
* combination:                           Package functs.     (line  171)
* combine:                               Functions and Variables for Simplification.
                                                             (line   57)
* commutative:                           Functions and Variables for Simplification.
                                                             (line   73)
* comp2pui:                              Functions and Variables for Symmetries.
                                                             (line    9)
* compare:                               Functions and Variables for Predicates.
                                                             (line   23)
* compfile:                              Functions and Variables for Function Definition.
                                                             (line  149)
* compile:                               Functions and Variables for Function Definition.
                                                             (line  168)
* compile_file:                          Functions and Variables for Function Definition.
                                                             (line 1306)
* complement_graph:                      Functions and Variables for graphs.
                                                             (line   93)
* complete_bipartite_graph:              Functions and Variables for graphs.
                                                             (line   96)
* complete_graph:                        Functions and Variables for graphs.
                                                             (line   99)
* complex:                               Functions and Variables for Properties.
                                                             (line  543)
* Complex infinity:                      Functions and Variables for Constants.
                                                             (line   41)
* complex_number_p:                      Functions and Variables for to_poly_solve.
                                                             (line  206)
* components:                            Functions and Variables for itensor.
                                                             (line  203)
* compose_functions:                     Functions and Variables for to_poly_solve.
                                                             (line  229)
* concan:                                Functions and Variables for itensor.
                                                             (line  522)
* concat:                                Functions and Variables for Strings.
                                                             (line    6)
* conditional evaluation:                Functions and Variables for to_poly_solve.
                                                             (line   90)
* cone:                                  Visualization with VTK.
                                                             (line  126)
* conjugate:                             Functions for Complex Numbers.
                                                             (line  100)
* conmetderiv:                           Functions and Variables for itensor.
                                                             (line  789)
* connected_components:                  Functions and Variables for graphs.
                                                             (line  413)
* connect_vertices:                      Functions and Variables for graphs.
                                                             (line 1171)
* cons:                                  Functions and Variables for Lists.
                                                             (line   80)
* constant:                              Functions and Variables for Properties.
                                                             (line   42)
* constantp:                             Functions and Variables for Properties.
                                                             (line   61)
* constituent:                           Functions and Variables for characters.
                                                             (line   49)
* constvalue:                            Functions and Variables for ezunits.
                                                             (line  253)
* cont2part:                             Functions and Variables for Symmetries.
                                                             (line  209)
* content:                               Functions and Variables for Polynomials.
                                                             (line  142)
* context:                               Functions and Variables for Facts.
                                                             (line  220)
* contexts:                              Functions and Variables for Facts.
                                                             (line  234)
* continuous_freq:                       Functions and Variables for data manipulation.
                                                             (line   62)
* contortion:                            Functions and Variables for ctensor.
                                                             (line  660)
* contour:                               Functions and Variables for draw.
                                                             (line  504)
* contour_levels:                        Functions and Variables for draw.
                                                             (line  533)
* contour_plot:                          Functions and Variables for Plotting.
                                                             (line    6)
* contract:                              Functions and Variables for itensor.
                                                             (line  187)
* contract <1>:                          Functions and Variables for Symmetries.
                                                             (line  220)
* Contraction with a vector:             Functions and Variables for itensor.
                                                             (line 1446)
* contract_edge:                         Functions and Variables for graphs.
                                                             (line 1189)
* contragrad:                            Functions and Variables for ctensor.
                                                             (line  731)
* contrib_ode:                           Functions and Variables for contrib_ode.
                                                             (line    6)
* convert:                               Functions and Variables for Units.
                                                             (line  140)
* coord:                                 Functions and Variables for itensor.
                                                             (line  767)
* copy:                                  Functions and Variables for linearalgebra.
                                                             (line   44)
* copylist:                              Functions and Variables for Lists.
                                                             (line  113)
* copymatrix:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  148)
* copy_graph:                            Functions and Variables for graphs.
                                                             (line   67)
* cor:                                   Functions and Variables for descriptive statistics.
                                                             (line  622)
* cos:                                   Functions and Variables for Trigonometric.
                                                             (line  143)
* cosh:                                  Functions and Variables for Trigonometric.
                                                             (line  147)
* cosnpiflag:                            Functions and Variables for Fourier series.
                                                             (line   64)
* cot:                                   Functions and Variables for Trigonometric.
                                                             (line  151)
* coth:                                  Functions and Variables for Trigonometric.
                                                             (line  155)
* cov:                                   Functions and Variables for descriptive statistics.
                                                             (line  520)
* cov1:                                  Functions and Variables for descriptive statistics.
                                                             (line  549)
* covdiff:                               Functions and Variables for itensor.
                                                             (line  939)
* covect:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  122)
* covers:                                Package functs.     (line  156)
* create_graph:                          Functions and Variables for graphs.
                                                             (line    9)
* create_list:                           Functions and Variables for Lists.
                                                             (line  117)
* csc:                                   Functions and Variables for Trigonometric.
                                                             (line  159)
* csch:                                  Functions and Variables for Trigonometric.
                                                             (line  163)
* csetup:                                Functions and Variables for ctensor.
                                                             (line    9)
* cspline:                               Functions and Variables for interpol.
                                                             (line  178)
* ctaylor:                               Functions and Variables for ctensor.
                                                             (line  333)
* ctaypov:                               Functions and Variables for ctensor.
                                                             (line 1128)
* ctaypt:                                Functions and Variables for ctensor.
                                                             (line 1133)
* ctayswitch:                            Functions and Variables for ctensor.
                                                             (line 1116)
* ctayvar:                               Functions and Variables for ctensor.
                                                             (line 1123)
* ctorsion_flag:                         Functions and Variables for ctensor.
                                                             (line 1103)
* ctransform:                            Functions and Variables for ctensor.
                                                             (line  673)
* ctranspose:                            Functions and Variables for linearalgebra.
                                                             (line   80)
* ctrgsimp:                              Functions and Variables for ctensor.
                                                             (line 1088)
* ct_coords:                             Functions and Variables for ctensor.
                                                             (line 1265)
* ct_coordsys:                           Functions and Variables for ctensor.
                                                             (line   35)
* cube:                                  Visualization with VTK.
                                                             (line  143)
* cube_graph:                            Functions and Variables for graphs.
                                                             (line  111)
* cuboctahedron_graph:                   Functions and Variables for graphs.
                                                             (line  108)
* cunlisp:                               Functions and Variables for characters.
                                                             (line   61)
* Current input expression:              Functions and Variables for Command Line.
                                                             (line    7)
* current_let_rule_package:              Functions and Variables for Rules and Patterns.
                                                             (line   51)
* cv:                                    Functions and Variables for descriptive statistics.
                                                             (line  173)
* cycle_digraph:                         Functions and Variables for graphs.
                                                             (line  102)
* cycle_graph:                           Functions and Variables for graphs.
                                                             (line  105)
* cylinder:                              Visualization with VTK.
                                                             (line  150)
* cylindrical:                           Functions and Variables for draw.
                                                             (line 2779)
* data_file_name:                        Functions and Variables for draw.
                                                             (line  584)
* days360:                               Functions and Variables for finance.
                                                             (line    6)
* dblint:                                Functions and Variables for Integration.
                                                             (line   59)
* deactivate:                            Functions and Variables for Facts.
                                                             (line  263)
* debugmode:                             Functions and Variables for Debugging.
                                                             (line    6)
* declare:                               Functions and Variables for Properties.
                                                             (line   94)
* declare_constvalue:                    Functions and Variables for ezunits.
                                                             (line  276)
* declare_dimensions:                    Functions and Variables for ezunits.
                                                             (line  487)
* declare_fundamental_dimensions:        Functions and Variables for ezunits.
                                                             (line  519)
* declare_fundamental_units:             Functions and Variables for ezunits.
                                                             (line  550)
* declare_qty:                           Functions and Variables for ezunits.
                                                             (line  386)
* declare_translated:                    Functions and Variables for Function Definition.
                                                             (line 1337)
* declare_units:                         Functions and Variables for ezunits.
                                                             (line  336)
* declare_unit_conversion:               Functions and Variables for ezunits.
                                                             (line  444)
* declare_weights:                       Functions and Variables for Affine.
                                                             (line   57)
* decreasing:                            Functions and Variables for Properties.
                                                             (line  235)
* decsym:                                Functions and Variables for itensor.
                                                             (line  537)
* default_let_rule_package:              Functions and Variables for Rules and Patterns.
                                                             (line   63)
* defcon:                                Functions and Variables for itensor.
                                                             (line  161)
* define:                                Functions and Variables for Function Definition.
                                                             (line  184)
* define_alt_display:                    Functions and Variables for alt-display.
                                                             (line    6)
* define_variable:                       Functions and Variables for Function Definition.
                                                             (line  278)
* defint:                                Functions and Variables for Integration.
                                                             (line  104)
* defmatch:                              Functions and Variables for Rules and Patterns.
                                                             (line   70)
* defrule:                               Functions and Variables for Rules and Patterns.
                                                             (line  173)
* defstruct:                             Functions and Variables for Structures.
                                                             (line   11)
* deftaylor:                             Functions and Variables for Series.
                                                             (line   38)
* degree_sequence:                       Functions and Variables for graphs.
                                                             (line  450)
* del:                                   Functions and Variables for Differentiation.
                                                             (line  232)
* delay:                                 Functions and Variables for draw.
                                                             (line  596)
* delete:                                Functions and Variables for Lists.
                                                             (line  147)
* deleten:                               Functions and Variables for ctensor.
                                                             (line 1064)
* delta:                                 Functions and Variables for Differentiation.
                                                             (line  252)
* demo:                                  Functions and Variables for Help.
                                                             (line   32)
* demoivre:                              Functions and Variables for Simplification.
                                                             (line   94)
* demoivre <1>:                          Functions and Variables for Simplification.
                                                             (line   95)
* denom:                                 Functions and Variables for Polynomials.
                                                             (line  155)
* dependencies:                          Functions and Variables for Differentiation.
                                                             (line  267)
* dependencies <1>:                      Functions and Variables for Differentiation.
                                                             (line  268)
* depends:                               Functions and Variables for Differentiation.
                                                             (line  305)
* derivabbrev:                           Functions and Variables for Differentiation.
                                                             (line  364)
* derivdegree:                           Functions and Variables for Differentiation.
                                                             (line  371)
* derivlist:                             Functions and Variables for Differentiation.
                                                             (line  388)
* derivsubst:                            Functions and Variables for Differentiation.
                                                             (line  393)
* describe:                              Functions and Variables for Help.
                                                             (line   69)
* desolve:                               Functions and Variables for Differential Equations.
                                                             (line   17)
* determinant:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  159)
* detout:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  170)
* dfloat:                                Functions and Variables for to_poly_solve.
                                                             (line  282)
* dgauss_a:                              Functions and Variables for contrib_ode.
                                                             (line  104)
* dgauss_b:                              Functions and Variables for contrib_ode.
                                                             (line  108)
* dgeev:                                 Functions and Variables for lapack.
                                                             (line    6)
* dgemm:                                 Functions and Variables for lapack.
                                                             (line  297)
* dgeqrf:                                Functions and Variables for lapack.
                                                             (line   73)
* dgesv:                                 Functions and Variables for lapack.
                                                             (line  104)
* dgesvd:                                Functions and Variables for lapack.
                                                             (line  176)
* diag:                                  Functions and Variables for diag.
                                                             (line    6)
* diagmatrix:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  197)
* diagmatrixp:                           Functions and Variables for ctensor.
                                                             (line  827)
* diagmetric:                            Functions and Variables for ctensor.
                                                             (line 1078)
* diag_matrix:                           Functions and Variables for linearalgebra.
                                                             (line   86)
* diameter:                              Functions and Variables for graphs.
                                                             (line  423)
* diff:                                  Functions and Variables for Differentiation.
                                                             (line  478)
* diff <1>:                              Functions and Variables for Differentiation.
                                                             (line  399)
* diff <2>:                              Functions and Variables for itensor.
                                                             (line  614)
* digitcharp:                            Functions and Variables for characters.
                                                             (line   65)
* dim:                                   Functions and Variables for ctensor.
                                                             (line 1071)
* dimacs_export:                         Functions and Variables for graphs.
                                                             (line 1239)
* dimacs_import:                         Functions and Variables for graphs.
                                                             (line 1246)
* dimension:                             Functions and Variables for Equations.
                                                             (line  310)
* dimensionless:                         Functions and Variables for ezunits.
                                                             (line  671)
* dimensions:                            Functions and Variables for draw.
                                                             (line  623)
* dimensions <1>:                        Functions and Variables for ezunits.
                                                             (line  591)
* dimensions_as_list:                    Functions and Variables for ezunits.
                                                             (line  592)
* direct:                                Functions and Variables for Symmetries.
                                                             (line  273)
* directory:                             Functions and Variables for File Input and Output.
                                                             (line  303)
* discrete_freq:                         Functions and Variables for data manipulation.
                                                             (line  106)
* disjoin:                               Functions and Variables for Sets.
                                                             (line   87)
* disjointp:                             Functions and Variables for Sets.
                                                             (line  106)
* disolate:                              Functions and Variables for Expressions.
                                                             (line  139)
* disp:                                  Functions and Variables for Display.
                                                             (line   37)
* dispcon:                               Functions and Variables for itensor.
                                                             (line    9)
* dispflag:                              Functions and Variables for Equations.
                                                             (line  318)
* dispform:                              Functions and Variables for Expressions.
                                                             (line  149)
* dispfun:                               Functions and Variables for Function Definition.
                                                             (line  369)
* dispJordan:                            Functions and Variables for diag.
                                                             (line  113)
* display:                               Functions and Variables for Display.
                                                             (line   60)
* display2d:                             Functions and Variables for Display.
                                                             (line   86)
* display_format_internal:               Functions and Variables for Display.
                                                             (line  106)
* disprule:                              Functions and Variables for Rules and Patterns.
                                                             (line  187)
* dispterms:                             Functions and Variables for Display.
                                                             (line  129)
* distrib:                               Functions and Variables for Simplification.
                                                             (line  111)
* distribute_over:                       Functions and Variables for Simplification.
                                                             (line  133)
* divide:                                Functions and Variables for Polynomials.
                                                             (line  159)
* Division:                              Arithmetic operators.
                                                             (line    6)
* divisors:                              Functions and Variables for Sets.
                                                             (line  118)
* divsum:                                Functions and Variables for Number Theory.
                                                             (line  213)
* dkummer_m:                             Functions and Variables for contrib_ode.
                                                             (line  130)
* dkummer_u:                             Functions and Variables for contrib_ode.
                                                             (line  133)
* dlange:                                Functions and Variables for lapack.
                                                             (line  278)
* do:                                    Functions and Variables for Program Flow.
                                                             (line   54)
* doallmxops:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  210)
* dodecahedron_graph:                    Functions and Variables for graphs.
                                                             (line  114)
* domain:                                Functions and Variables for Simplification.
                                                             (line  193)
* domxexpt:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  217)
* domxmxops:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line  249)
* domxnctimes:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  256)
* dontfactor:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  262)
* doscmxops:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line  272)
* doscmxplus:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  278)
* dot0nscsimp:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  284)
* dot0simp:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  290)
* dot1simp:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  296)
* dotassoc:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  302)
* dotconstrules:                         Functions and Variables for Matrices and Linear Algebra.
                                                             (line  308)
* dotdistrib:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  316)
* dotexptsimp:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  322)
* dotident:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  328)
* dotproduct:                            Functions and Variables for linearalgebra.
                                                             (line  108)
* dotscrules:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line  333)
* dotsimp:                               Functions and Variables for Affine.
                                                             (line   69)
* Double factorial:                      Combinatorial Functions.
                                                             (line    7)
* dpart:                                 Functions and Variables for Expressions.
                                                             (line  203)
* draw:                                  Functions and Variables for draw.
                                                             (line   54)
* draw2d:                                Functions and Variables for draw.
                                                             (line  101)
* draw3d:                                Functions and Variables for draw.
                                                             (line  112)
* drawdf:                                Functions and Variables for drawdf.
                                                             (line    9)
* draw_file:                             Functions and Variables for draw.
                                                             (line  123)
* draw_graph:                            Functions and Variables for graphs.
                                                             (line 1289)
* draw_graph_program:                    Functions and Variables for graphs.
                                                             (line 1395)
* draw_realpart:                         Functions and Variables for draw.
                                                             (line  667)
* dscalar:                               Functions and Variables for Differentiation.
                                                             (line  483)
* dscalar <1>:                           Functions and Variables for ctensor.
                                                             (line  758)
* e:                                     Functions and Variables for Constants.
                                                             (line    7)
* echelon:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line  339)
* edges:                                 Functions and Variables for graphs.
                                                             (line  463)
* edge_color:                            Functions and Variables for graphs.
                                                             (line 1461)
* edge_coloring:                         Functions and Variables for graphs.
                                                             (line 1490)
* edge_coloring <1>:                     Functions and Variables for graphs.
                                                             (line  431)
* edge_connectivity:                     Functions and Variables for graphs.
                                                             (line  458)
* edge_partition:                        Functions and Variables for graphs.
                                                             (line 1485)
* edge_type:                             Functions and Variables for graphs.
                                                             (line 1467)
* edge_width:                            Functions and Variables for graphs.
                                                             (line 1464)
* eigens_by_jacobi:                      Functions and Variables for linearalgebra.
                                                             (line  114)
* eigenvalues:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  370)
* eigenvectors:                          Functions and Variables for Matrices and Linear Algebra.
                                                             (line  397)
* eighth:                                Functions and Variables for Lists.
                                                             (line  212)
* einstein:                              Functions and Variables for ctensor.
                                                             (line  235)
* eivals:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  371)
* eivects:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line  398)
* elapsed_real_time:                     Functions and Variables for Runtime Environment.
                                                             (line  200)
* elapsed_run_time:                      Functions and Variables for Runtime Environment.
                                                             (line  216)
* ele2comp:                              Functions and Variables for Symmetries.
                                                             (line   27)
* ele2polynome:                          Functions and Variables for Symmetries.
                                                             (line  495)
* ele2pui:                               Functions and Variables for Symmetries.
                                                             (line   21)
* elem:                                  Functions and Variables for Symmetries.
                                                             (line   33)
* elementp:                              Functions and Variables for Sets.
                                                             (line  161)
* elevation:                             Plotting Options.   (line   79)
* elevation <1>:                         Visualization with VTK.
                                                             (line   77)
* elevation_grid:                        Functions and Variables for draw.
                                                             (line 2800)
* elim:                                  Functions and Variables for to_poly_solve.
                                                             (line  312)
* eliminate:                             Functions and Variables for Polynomials.
                                                             (line  176)
* eliminate_using:                       Functions and Variables for to_poly_solve.
                                                             (line  397)
* elim_allbut:                           Functions and Variables for to_poly_solve.
                                                             (line  376)
* ellipse:                               Functions and Variables for draw.
                                                             (line 2827)
* elliptic_e:                            Functions and Variables for Elliptic Integrals.
                                                             (line   13)
* elliptic_ec:                           Functions and Variables for Elliptic Integrals.
                                                             (line   49)
* elliptic_eu:                           Functions and Variables for Elliptic Integrals.
                                                             (line   20)
* elliptic_f:                            Functions and Variables for Elliptic Integrals.
                                                             (line    6)
* elliptic_kc:                           Functions and Variables for Elliptic Integrals.
                                                             (line   41)
* elliptic_pi:                           Functions and Variables for Elliptic Integrals.
                                                             (line   34)
* ematrix:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line  508)
* emptyp:                                Functions and Variables for Sets.
                                                             (line  173)
* empty_graph:                           Functions and Variables for graphs.
                                                             (line  117)
* endcons:                               Functions and Variables for Lists.
                                                             (line  217)
* endphi:                                Visualization with VTK.
                                                             (line  203)
* endtheta:                              Visualization with VTK.
                                                             (line  214)
* enhanced3d:                            Functions and Variables for draw.
                                                             (line  690)
* entermatrix:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  513)
* entertensor:                           Functions and Variables for itensor.
                                                             (line   17)
* entier:                                Functions for Numbers.
                                                             (line  175)
* epsilon_lp:                            Functions and Variables for simplex.
                                                             (line    6)
* equal:                                 Functions and Variables for Predicates.
                                                             (line   54)
* Equal (syntactic equality):            Operators for Equations.
                                                             (line   31)
* equalp:                                Functions and Variables for Fourier series.
                                                             (line    6)
* Equation operator:                     Operators for Equations.
                                                             (line   31)
* equiv_classes:                         Functions and Variables for Sets.
                                                             (line  184)
* erf:                                   Error Function.     (line    9)
* erfc:                                  Error Function.     (line   15)
* erfflag:                               Functions and Variables for Integration.
                                                             (line  117)
* erfi:                                  Error Function.     (line   20)
* erf_generalized:                       Error Function.     (line   25)
* erf_representation:                    Error Function.     (line   52)
* errcatch:                              Functions and Variables for Program Flow.
                                                             (line  242)
* error:                                 Functions and Variables for Program Flow.
                                                             (line  254)
* error <1>:                             Functions and Variables for Program Flow.
                                                             (line  255)
* errormsg:                              Functions and Variables for Program Flow.
                                                             (line  333)
* errormsg <1>:                          Functions and Variables for Program Flow.
                                                             (line  328)
* errors:                                Functions and Variables for draw.
                                                             (line 2858)
* error_size:                            Functions and Variables for Program Flow.
                                                             (line  269)
* error_syms:                            Functions and Variables for Program Flow.
                                                             (line  313)
* error_type:                            Functions and Variables for draw.
                                                             (line  828)
* euler:                                 Functions and Variables for Number Theory.
                                                             (line  231)
* Euler's number:                        Functions and Variables for Constants.
                                                             (line    7)
* Euler-Mascheroni constant:             Functions and Variables for Constants.
                                                             (line   22)
* ev:                                    Functions and Variables for Evaluation.
                                                             (line  268)
* eval:                                  Functions and Variables for Evaluation.
                                                             (line  436)
* eval_string:                           Functions and Variables for strings.
                                                             (line   39)
* even:                                  Functions and Variables for Properties.
                                                             (line  255)
* evenfun:                               Functions and Variables for Simplification.
                                                             (line  199)
* evenp:                                 Functions and Variables for Numbers.
                                                             (line   55)
* every:                                 Functions and Variables for Sets.
                                                             (line  219)
* evflag:                                Functions and Variables for Evaluation.
                                                             (line  454)
* evfun:                                 Functions and Variables for Evaluation.
                                                             (line  518)
* evolution:                             Graphical analysis of discrete dynamical systems.
                                                             (line   22)
* evolution2d:                           Graphical analysis of discrete dynamical systems.
                                                             (line   40)
* evundiff:                              Functions and Variables for itensor.
                                                             (line  687)
* ev_point:                              Functions and Variables for zeilberger.
                                                             (line  147)
* example:                               Functions and Variables for Help.
                                                             (line  134)
* exp:                                   Root Exponential and Logarithmic Functions.
                                                             (line   86)
* expand:                                Functions and Variables for Simplification.
                                                             (line  220)
* expandwrt:                             Functions and Variables for Simplification.
                                                             (line  313)
* expandwrt_denom:                       Functions and Variables for Simplification.
                                                             (line  326)
* expandwrt_factored:                    Functions and Variables for Simplification.
                                                             (line  335)
* expintegral_chi:                       Exponential Integrals.
                                                             (line   30)
* expintegral_ci:                        Exponential Integrals.
                                                             (line   24)
* expintegral_e:                         Exponential Integrals.
                                                             (line   18)
* expintegral_e1:                        Exponential Integrals.
                                                             (line    9)
* expintegral_ei:                        Exponential Integrals.
                                                             (line   12)
* expintegral_li:                        Exponential Integrals.
                                                             (line   15)
* expintegral_shi:                       Exponential Integrals.
                                                             (line   27)
* expintegral_si:                        Exponential Integrals.
                                                             (line   21)
* expintexpand:                          Exponential Integrals.
                                                             (line   40)
* expintrep:                             Exponential Integrals.
                                                             (line   33)
* explicit:                              Functions and Variables for draw.
                                                             (line 2897)
* explose:                               Functions and Variables for Symmetries.
                                                             (line  237)
* expon:                                 Functions and Variables for Simplification.
                                                             (line  343)
* exponentialize:                        Functions and Variables for Simplification.
                                                             (line  351)
* exponentialize <1>:                    Functions and Variables for Simplification.
                                                             (line  352)
* Exponentiation:                        Arithmetic operators.
                                                             (line    6)
* expop:                                 Functions and Variables for Simplification.
                                                             (line  366)
* express:                               Functions and Variables for Differentiation.
                                                             (line  489)
* expt:                                  Functions and Variables for Display.
                                                             (line  156)
* exptdispflag:                          Functions and Variables for Display.
                                                             (line  165)
* exptisolate:                           Functions and Variables for Expressions.
                                                             (line  218)
* exptsubst:                             Functions and Variables for Expressions.
                                                             (line  224)
* exsec:                                 Package functs.     (line  161)
* extdiff:                               Functions and Variables for itensor.
                                                             (line 1476)
* extract_linear_equations:              Functions and Variables for Affine.
                                                             (line  113)
* extremal_subset:                       Functions and Variables for Sets.
                                                             (line  287)
* ezgcd:                                 Functions and Variables for Polynomials.
                                                             (line  204)
* f90:                                   Functions and Variables for f90.
                                                             (line    6)
* facexpand:                             Functions and Variables for Polynomials.
                                                             (line  236)
* facsum:                                Package facexp.     (line   27)
* facsum_combine:                        Package facexp.     (line   78)
* factcomb:                              Combinatorial Functions.
                                                             (line   47)
* factlim:                               Combinatorial Functions.
                                                             (line  159)
* factor:                                Functions and Variables for Polynomials.
                                                             (line  243)
* factorfacsum:                          Package facexp.     (line   93)
* factorflag:                            Functions and Variables for Polynomials.
                                                             (line  376)
* factorial:                             Combinatorial Functions.
                                                             (line   73)
* factorial_expand:                      Combinatorial Functions.
                                                             (line  165)
* factorout:                             Functions and Variables for Polynomials.
                                                             (line  382)
* factorsum:                             Functions and Variables for Polynomials.
                                                             (line  401)
* factors_only:                          Functions and Variables for Number Theory.
                                                             (line  245)
* facts:                                 Functions and Variables for Facts.
                                                             (line  267)
* false:                                 Functions and Variables for Constants.
                                                             (line   16)
* fasttimes:                             Functions and Variables for Polynomials.
                                                             (line  421)
* fast_central_elements:                 Functions and Variables for Affine.
                                                             (line   76)
* fast_linsolve:                         Functions and Variables for Affine.
                                                             (line    6)
* fb:                                    Functions and Variables for ctensor.
                                                             (line 1215)
* feature:                               Functions and Variables for Properties.
                                                             (line  276)
* featurep:                              Functions and Variables for Properties.
                                                             (line  286)
* features:                              Functions and Variables for Properties.
                                                             (line  303)
* fernfale:                              Definitions for IFS fractals.
                                                             (line   42)
* Fetch documentation:                   Functions and Variables for Command Line.
                                                             (line  183)
* Fetch documentation (inexact search):  Functions and Variables for Command Line.
                                                             (line  196)
* fft:                                   Functions and Variables for fast Fourier transform.
                                                             (line  105)
* fib:                                   Functions and Variables for Number Theory.
                                                             (line  255)
* fibtophi:                              Functions and Variables for Number Theory.
                                                             (line  267)
* fifth:                                 Functions and Variables for Lists.
                                                             (line  246)
* filename_merge:                        Functions and Variables for File Input and Output.
                                                             (line  102)
* file_name:                             Functions and Variables for draw.
                                                             (line  838)
* file_name <1>:                         Functions and Variables for graphs.
                                                             (line 1520)
* file_output_append:                    Functions and Variables for File Input and Output.
                                                             (line   88)
* file_search:                           Functions and Variables for File Input and Output.
                                                             (line  111)
* file_search_demo:                      Functions and Variables for File Input and Output.
                                                             (line  154)
* file_search_lisp:                      Functions and Variables for File Input and Output.
                                                             (line  153)
* file_search_maxima:                    Functions and Variables for File Input and Output.
                                                             (line  152)
* file_search_tests:                     Functions and Variables for File Input and Output.
                                                             (line  156)
* file_search_usage:                     Functions and Variables for File Input and Output.
                                                             (line  155)
* file_type:                             Functions and Variables for File Input and Output.
                                                             (line  190)
* file_type_lisp:                        Functions and Variables for File Input and Output.
                                                             (line  212)
* file_type_maxima:                      Functions and Variables for File Input and Output.
                                                             (line  220)
* fillarray:                             Functions and Variables for Arrays.
                                                             (line  222)
* filled_func:                           Functions and Variables for draw.
                                                             (line  874)
* fill_color:                            Functions and Variables for draw.
                                                             (line  858)
* fill_density:                          Functions and Variables for draw.
                                                             (line  866)
* findde:                                Functions and Variables for ctensor.
                                                             (line  679)
* find_root:                             Functions for numerical solution of equations.
                                                             (line   34)
* find_root <1>:                         Functions for numerical solution of equations.
                                                             (line   35)
* find_root_abs:                         Functions for numerical solution of equations.
                                                             (line   39)
* find_root_error:                       Functions for numerical solution of equations.
                                                             (line   38)
* find_root_rel:                         Functions for numerical solution of equations.
                                                             (line   40)
* first:                                 Functions and Variables for Lists.
                                                             (line  251)
* fix:                                   Functions for Numbers.
                                                             (line  228)
* fixed_vertices:                        Functions and Variables for graphs.
                                                             (line 1531)
* flatten:                               Functions and Variables for Sets.
                                                             (line  309)
* flength:                               Functions and Variables for input and output.
                                                             (line   28)
* flipflag:                              Functions and Variables for itensor.
                                                             (line  147)
* float:                                 Functions and Variables for Numbers.
                                                             (line   60)
* float2bf:                              Functions and Variables for Numbers.
                                                             (line   67)
* floatnump:                             Functions and Variables for Numbers.
                                                             (line   74)
* floor:                                 Functions for Numbers.
                                                             (line  181)
* flower_snark:                          Functions and Variables for graphs.
                                                             (line  120)
* flush:                                 Functions and Variables for itensor.
                                                             (line  743)
* flush1deriv:                           Functions and Variables for itensor.
                                                             (line  891)
* flushd:                                Functions and Variables for itensor.
                                                             (line  747)
* flushnd:                               Functions and Variables for itensor.
                                                             (line  751)
* fmin_cobyla:                           Functions and Variables for cobyla.
                                                             (line    6)
* font:                                  Functions and Variables for draw.
                                                             (line  906)
* font_size:                             Functions and Variables for draw.
                                                             (line  992)
* for:                                   Functions and Variables for Program Flow.
                                                             (line  368)
* forget:                                Functions and Variables for Facts.
                                                             (line  280)
* fortindent:                            Functions and Variables for Fortran Output.
                                                             (line    6)
* fortran:                               Functions and Variables for Fortran Output.
                                                             (line   14)
* fortspaces:                            Functions and Variables for Fortran Output.
                                                             (line   70)
* fourcos:                               Functions and Variables for Fourier series.
                                                             (line   75)
* fourexpand:                            Functions and Variables for Fourier series.
                                                             (line   69)
* fourier:                               Functions and Variables for Fourier series.
                                                             (line   49)
* fourier_elim:                          Functions and Variables for to_poly_solve.
                                                             (line  429)
* fourint:                               Functions and Variables for Fourier series.
                                                             (line   90)
* fourintcos:                            Functions and Variables for Fourier series.
                                                             (line   95)
* fourintsin:                            Functions and Variables for Fourier series.
                                                             (line  100)
* foursimp:                              Functions and Variables for Fourier series.
                                                             (line   54)
* foursin:                               Functions and Variables for Fourier series.
                                                             (line   80)
* fourth:                                Functions and Variables for Lists.
                                                             (line  265)
* fposition:                             Functions and Variables for input and output.
                                                             (line   32)
* fpprec:                                Functions and Variables for Numbers.
                                                             (line   79)
* fpprintprec:                           Functions and Variables for Numbers.
                                                             (line   88)
* frame_bracket:                         Functions and Variables for ctensor.
                                                             (line  468)
* freeof:                                Functions and Variables for Expressions.
                                                             (line  244)
* freshline:                             Functions and Variables for input and output.
                                                             (line   41)
* fresnel_c:                             Error Function.     (line   28)
* fresnel_s:                             Error Function.     (line   40)
* from_adjacency_matrix:                 Functions and Variables for graphs.
                                                             (line  129)
* frucht_graph:                          Functions and Variables for graphs.
                                                             (line  132)
* fullmap:                               Functions and Variables for Function Definition.
                                                             (line  454)
* fullmapl:                              Functions and Variables for Function Definition.
                                                             (line  473)
* fullratsimp:                           Functions and Variables for Polynomials.
                                                             (line  430)
* fullratsubst:                          Functions and Variables for Polynomials.
                                                             (line  469)
* fullsetify:                            Functions and Variables for Sets.
                                                             (line  390)
* full_listify:                          Functions and Variables for Sets.
                                                             (line  376)
* funcsolve:                             Functions and Variables for Equations.
                                                             (line  326)
* Function definition operator:          Assignment operators.
                                                             (line  189)
* functions:                             Functions and Variables for Function Definition.
                                                             (line  483)
* fundamental_dimensions:                Functions and Variables for ezunits.
                                                             (line  521)
* fundamental_units:                     Functions and Variables for ezunits.
                                                             (line  635)
* fundef:                                Functions and Variables for Function Definition.
                                                             (line  528)
* funmake:                               Functions and Variables for Function Definition.
                                                             (line  548)
* funp:                                  Functions and Variables for Fourier series.
                                                             (line   22)
* fv:                                    Functions and Variables for finance.
                                                             (line   17)
* gamma:                                 Gamma and factorial Functions.
                                                             (line   31)
* gammalim:                              Gamma and factorial Functions.
                                                             (line  199)
* gamma_expand:                          Gamma and factorial Functions.
                                                             (line  180)
* gamma_greek:                           Gamma and factorial Functions.
                                                             (line  119)
* gamma_incomplete:                      Gamma and factorial Functions.
                                                             (line  133)
* gamma_incomplete_generalized:          Gamma and factorial Functions.
                                                             (line  165)
* gamma_incomplete_regularized:          Gamma and factorial Functions.
                                                             (line  151)
* gaussprob:                             Package functs.     (line  134)
* gauss_a:                               Functions and Variables for contrib_ode.
                                                             (line   88)
* gauss_b:                               Functions and Variables for contrib_ode.
                                                             (line  101)
* gcd:                                   Functions and Variables for Polynomials.
                                                             (line  516)
* gcdex:                                 Functions and Variables for Polynomials.
                                                             (line  563)
* gcdivide:                              Package functs.     (line   61)
* gcfac:                                 Package scifac.     (line    6)
* gcfactor:                              Functions and Variables for Polynomials.
                                                             (line  605)
* gd:                                    Package functs.     (line  140)
* gdet:                                  Functions and Variables for ctensor.
                                                             (line 1138)
* generalized_lambert_w:                 Functions and Variables for Special Functions.
                                                             (line  154)
* genfact:                               Combinatorial Functions.
                                                             (line  172)
* genindex:                              Functions and Variables for Miscellaneous Options.
                                                             (line   14)
* genmatrix:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line  552)
* gensumnum:                             Functions and Variables for Miscellaneous Options.
                                                             (line   20)
* gensym:                                Functions and Variables for Miscellaneous Options.
                                                             (line   27)
* gen_laguerre:                          Functions and Variables for orthogonal polynomials.
                                                             (line   29)
* geomap:                                Functions and Variables for worldmap.
                                                             (line  146)
* geometric:                             Package functs.     (line  110)
* geometric_mean:                        Functions and Variables for descriptive statistics.
                                                             (line  393)
* geosum:                                Package functs.     (line  127)
* geo_amortization:                      Functions and Variables for finance.
                                                             (line  159)
* geo_annuity_fv:                        Functions and Variables for finance.
                                                             (line   92)
* geo_annuity_pv:                        Functions and Variables for finance.
                                                             (line   79)
* get:                                   Functions and Variables for Properties.
                                                             (line  343)
* get_edge_weight:                       Functions and Variables for graphs.
                                                             (line  471)
* get_lu_factors:                        Functions and Variables for linearalgebra.
                                                             (line  174)
* get_output_stream_string:              Functions and Variables for input and output.
                                                             (line   48)
* get_pixel:                             Functions and Variables for pictures.
                                                             (line    6)
* get_plot_option:                       Functions and Variables for Plotting.
                                                             (line   32)
* get_tex_environment:                   Functions and Variables for TeX Output.
                                                             (line  211)
* get_tex_environment_default:           Functions and Variables for TeX Output.
                                                             (line  251)
* get_vertex_label:                      Functions and Variables for graphs.
                                                             (line  491)
* gfactor:                               Functions and Variables for Polynomials.
                                                             (line  612)
* gfactorsum:                            Functions and Variables for Polynomials.
                                                             (line  623)
* ggf:                                   Functions and Variables for ggf.
                                                             (line   35)
* GGFCFMAX:                              Functions and Variables for ggf.
                                                             (line   21)
* GGFINFINITY:                           Functions and Variables for ggf.
                                                             (line    6)
* girth:                                 Functions and Variables for graphs.
                                                             (line  557)
* globalsolve:                           Functions and Variables for Equations.
                                                             (line  348)
* global_variances:                      Functions and Variables for descriptive statistics.
                                                             (line  578)
* gnuplot_close:                         Gnuplot_pipes Format Functions.
                                                             (line   12)
* gnuplot_command:                       Functions and Variables for Plotting.
                                                             (line   42)
* gnuplot_curve_styles:                  Gnuplot Options.    (line  150)
* gnuplot_curve_titles:                  Gnuplot Options.    (line  145)
* gnuplot_default_term_command:          Gnuplot Options.    (line   97)
* gnuplot_dumb_term_command:             Gnuplot Options.    (line  104)
* gnuplot_file_args:                     Functions and Variables for Plotting.
                                                             (line   53)
* gnuplot_file_name:                     Functions and Variables for draw.
                                                             (line 1005)
* gnuplot_out_file:                      Gnuplot Options.    (line   59)
* gnuplot_pdf_term_command:              Gnuplot Options.    (line  112)
* gnuplot_pm3d:                          Gnuplot Options.    (line   78)
* gnuplot_png_term_command:              Gnuplot Options.    (line  120)
* gnuplot_postamble:                     Gnuplot Options.    (line   90)
* gnuplot_preamble:                      Gnuplot Options.    (line   83)
* gnuplot_ps_term_command:               Gnuplot Options.    (line  128)
* gnuplot_replot:                        Gnuplot_pipes Format Functions.
                                                             (line   22)
* gnuplot_reset:                         Gnuplot_pipes Format Functions.
                                                             (line   30)
* gnuplot_restart:                       Gnuplot_pipes Format Functions.
                                                             (line   17)
* gnuplot_start:                         Gnuplot_pipes Format Functions.
                                                             (line    6)
* gnuplot_svg_term_command:              Gnuplot Options.    (line  137)
* gnuplot_term:                          Gnuplot Options.    (line   13)
* gnuplot_view_args:                     Functions and Variables for Plotting.
                                                             (line   62)
* go:                                    Functions and Variables for Program Flow.
                                                             (line  373)
* Golden mean:                           Functions and Variables for Constants.
                                                             (line   49)
* Gosper:                                Functions and Variables for zeilberger.
                                                             (line   11)
* GosperSum:                             Functions and Variables for zeilberger.
                                                             (line   16)
* Gosper_in_Zeilberger:                  Functions and Variables for zeilberger.
                                                             (line  118)
* gr2d:                                  Functions and Variables for draw.
                                                             (line    9)
* gr3d:                                  Functions and Variables for draw.
                                                             (line   29)
* gradef:                                Functions and Variables for Differentiation.
                                                             (line  549)
* gradefs:                               Functions and Variables for Differentiation.
                                                             (line  596)
* gramschmidt:                           Functions and Variables for Matrices and Linear Algebra.
                                                             (line  613)
* graph6_decode:                         Functions and Variables for graphs.
                                                             (line 1250)
* graph6_encode:                         Functions and Variables for graphs.
                                                             (line 1254)
* graph6_export:                         Functions and Variables for graphs.
                                                             (line 1258)
* graph6_import:                         Functions and Variables for graphs.
                                                             (line 1263)
* graph_center:                          Functions and Variables for graphs.
                                                             (line  511)
* graph_charpoly:                        Functions and Variables for graphs.
                                                             (line  500)
* graph_eigenvalues:                     Functions and Variables for graphs.
                                                             (line  520)
* graph_flow:                            Functions and Variables for finance.
                                                             (line   41)
* graph_order:                           Functions and Variables for graphs.
                                                             (line  548)
* graph_periphery:                       Functions and Variables for graphs.
                                                             (line  530)
* graph_product:                         Functions and Variables for graphs.
                                                             (line  135)
* graph_size:                            Functions and Variables for graphs.
                                                             (line  539)
* graph_union:                           Functions and Variables for graphs.
                                                             (line  143)
* Greater than:                          Relational operators.
                                                             (line    6)
* Greater than or equal:                 Relational operators.
                                                             (line    6)
* great_rhombicosidodecahedron_graph:    Functions and Variables for graphs.
                                                             (line  149)
* great_rhombicuboctahedron_graph:       Functions and Variables for graphs.
                                                             (line  152)
* grid:                                  Plotting Options.   (line   91)
* grid <1>:                              Functions and Variables for draw.
                                                             (line 1027)
* grid2d:                                Plotting Options.   (line   98)
* grid_graph:                            Functions and Variables for graphs.
                                                             (line  146)
* grind:                                 Functions and Variables for Display.
                                                             (line  275)
* grind <1>:                             Functions and Variables for Display.
                                                             (line  186)
* grobner_basis:                         Functions and Variables for Affine.
                                                             (line   22)
* grotzch_graph:                         Functions and Variables for graphs.
                                                             (line  155)
* halfangles:                            Functions and Variables for Trigonometric.
                                                             (line  167)
* hamilton_cycle:                        Functions and Variables for graphs.
                                                             (line  566)
* hamilton_path:                         Functions and Variables for graphs.
                                                             (line  577)
* hankel:                                Functions and Variables for linearalgebra.
                                                             (line  181)
* hankel_1:                              Bessel Functions.   (line   63)
* hankel_2:                              Bessel Functions.   (line  108)
* harmonic:                              Package functs.     (line  116)
* harmonic_mean:                         Functions and Variables for descriptive statistics.
                                                             (line  365)
* hav:                                   Package functs.     (line  166)
* head_angle:                            Functions and Variables for draw.
                                                             (line 1041)
* head_angle <1>:                        Functions and Variables for graphs.
                                                             (line 1500)
* head_both:                             Functions and Variables for draw.
                                                             (line 1076)
* head_length:                           Functions and Variables for draw.
                                                             (line 1096)
* head_length <1>:                       Functions and Variables for graphs.
                                                             (line 1505)
* head_type:                             Functions and Variables for draw.
                                                             (line 1119)
* heawood_graph:                         Functions and Variables for graphs.
                                                             (line  158)
* height:                                Visualization with VTK.
                                                             (line   85)
* height <1>:                            Visualization with VTK.
                                                             (line  225)
* Help:                                  Functions and Variables for Help.
                                                             (line   69)
* hermite:                               Functions and Variables for orthogonal polynomials.
                                                             (line   34)
* hessian:                               Functions and Variables for linearalgebra.
                                                             (line  189)
* hgfred:                                Functions and Variables for Special Functions.
                                                             (line   98)
* hilbertmap:                            Definitions for Peano maps.
                                                             (line    9)
* hilbert_matrix:                        Functions and Variables for linearalgebra.
                                                             (line  216)
* hipow:                                 Functions and Variables for Polynomials.
                                                             (line  628)
* histogram:                             Functions and Variables for statistical graphs.
                                                             (line  204)
* histogram_description:                 Functions and Variables for statistical graphs.
                                                             (line  271)
* hodge:                                 Functions and Variables for itensor.
                                                             (line 1508)
* horner:                                Functions for numerical solution of equations.
                                                             (line    6)
* hypergeometric:                        Hypergeometric Functions.
                                                             (line   23)
* hypergeometric_representation:         Error Function.     (line   58)
* i:                                     Functions and Variables for Constants.
                                                             (line   13)
* ibase:                                 Functions and Variables for Display.
                                                             (line  287)
* ic1:                                   Functions and Variables for Differential Equations.
                                                             (line   70)
* ic2:                                   Functions and Variables for Differential Equations.
                                                             (line   79)
* icc1:                                  Functions and Variables for itensor.
                                                             (line 1139)
* icc2:                                  Functions and Variables for itensor.
                                                             (line 1156)
* ichr1:                                 Functions and Variables for itensor.
                                                             (line  913)
* ichr2:                                 Functions and Variables for itensor.
                                                             (line  921)
* icosahedron_graph:                     Functions and Variables for graphs.
                                                             (line  161)
* icosidodecahedron_graph:               Functions and Variables for graphs.
                                                             (line  164)
* icounter:                              Functions and Variables for itensor.
                                                             (line  358)
* icurvature:                            Functions and Variables for itensor.
                                                             (line  928)
* ic_convert:                            Functions and Variables for itensor.
                                                             (line 1601)
* ident:                                 Functions and Variables for Matrices and Linear Algebra.
                                                             (line  669)
* identfor:                              Functions and Variables for linearalgebra.
                                                             (line  221)
* identity:                              Functions and Variables for Sets.
                                                             (line  407)
* idiff:                                 Functions and Variables for itensor.
                                                             (line  638)
* idim:                                  Functions and Variables for itensor.
                                                             (line  908)
* idummy:                                Functions and Variables for itensor.
                                                             (line  346)
* idummyx:                               Functions and Variables for itensor.
                                                             (line  353)
* ieqn:                                  Functions and Variables for Equations.
                                                             (line  403)
* ieqnprint:                             Functions and Variables for Equations.
                                                             (line  434)
* if:                                    Functions and Variables for Program Flow.
                                                             (line  386)
* ifactors:                              Functions and Variables for Number Theory.
                                                             (line  293)
* ifb:                                   Functions and Variables for itensor.
                                                             (line 1107)
* ifc1:                                  Functions and Variables for itensor.
                                                             (line 1174)
* ifc2:                                  Functions and Variables for itensor.
                                                             (line 1189)
* ifg:                                   Functions and Variables for itensor.
                                                             (line 1214)
* ifgi:                                  Functions and Variables for itensor.
                                                             (line 1219)
* ifr:                                   Functions and Variables for itensor.
                                                             (line 1203)
* iframes:                               Functions and Variables for itensor.
                                                             (line 1101)
* iframe_bracket_form:                   Functions and Variables for itensor.
                                                             (line 1224)
* ifri:                                  Functions and Variables for itensor.
                                                             (line 1208)
* ifs:                                   Graphical analysis of discrete dynamical systems.
                                                             (line   65)
* igcdex:                                Functions and Variables for Number Theory.
                                                             (line  315)
* igeodesic_coords:                      Functions and Variables for itensor.
                                                             (line  989)
* igeowedge_flag:                        Functions and Variables for itensor.
                                                             (line 1547)
* ikt1:                                  Functions and Variables for itensor.
                                                             (line 1279)
* ikt2:                                  Functions and Variables for itensor.
                                                             (line 1294)
* ilt:                                   Functions and Variables for Integration.
                                                             (line  124)
* image:                                 Functions and Variables for draw.
                                                             (line 2948)
* imaginary:                             Functions and Variables for Properties.
                                                             (line  542)
* Imaginary unit:                        Functions and Variables for Constants.
                                                             (line   13)
* imagpart:                              Functions for Complex Numbers.
                                                             (line  120)
* imetric:                               Functions and Variables for itensor.
                                                             (line  899)
* imetric <1>:                           Functions and Variables for itensor.
                                                             (line  900)
* implicit:                              Functions and Variables for draw.
                                                             (line 3036)
* implicit_derivative:                   Functions and Variables for impdiff.
                                                             (line    6)
* implicit_plot:                         Functions and Variables for Plotting.
                                                             (line   89)
* in:                                    Functions and Variables for Program Flow.
                                                             (line   55)
* inchar:                                Functions and Variables for Command Line.
                                                             (line  229)
* increasing:                            Functions and Variables for Properties.
                                                             (line  236)
* ind:                                   Functions and Variables for Constants.
                                                             (line   25)
* Indeterminate:                         Functions and Variables for Constants.
                                                             (line   26)
* indexed_tensor:                        Functions and Variables for itensor.
                                                             (line  197)
* indices:                               Functions and Variables for itensor.
                                                             (line   56)
* induced_subgraph:                      Functions and Variables for graphs.
                                                             (line  167)
* inf:                                   Functions and Variables for Constants.
                                                             (line   36)
* inferencep:                            Functions and Variables for inference_result.
                                                             (line   48)
* inference_result:                      Functions and Variables for inference_result.
                                                             (line    6)
* infeval:                               Functions and Variables for Evaluation.
                                                             (line  587)
* infinity:                              Functions and Variables for Constants.
                                                             (line   40)
* infix:                                 User defined operators.
                                                             (line    6)
* inflag:                                Functions and Variables for Expressions.
                                                             (line  334)
* infolists:                             Functions and Variables for Command Line.
                                                             (line  254)
* info_display:                          Functions and Variables for alt-display.
                                                             (line   43)
* init_atensor:                          Functions and Variables for atensor.
                                                             (line    6)
* init_ctensor:                          Functions and Variables for ctensor.
                                                             (line  155)
* inm:                                   Functions and Variables for itensor.
                                                             (line 1237)
* inmc1:                                 Functions and Variables for itensor.
                                                             (line 1249)
* inmc2:                                 Functions and Variables for itensor.
                                                             (line 1263)
* innerproduct:                          Functions and Variables for Matrices and Linear Algebra.
                                                             (line  673)
* inpart:                                Functions and Variables for Expressions.
                                                             (line  351)
* inprod:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  674)
* Input terminator (with display):       Functions and Variables for Command Line.
                                                             (line  219)
* Input terminator (without display):    Functions and Variables for Command Line.
                                                             (line  204)
* inrt:                                  Functions and Variables for Number Theory.
                                                             (line  336)
* intanalysis:                           Functions and Variables for Integration.
                                                             (line  168)
* integer:                               Functions and Variables for Properties.
                                                             (line  370)
* integerp:                              Functions and Variables for Numbers.
                                                             (line  110)
* integervalued:                         Functions and Variables for Properties.
                                                             (line  387)
* integer_partitions:                    Functions and Variables for Sets.
                                                             (line  419)
* integrate:                             Functions and Variables for Integration.
                                                             (line  206)
* integrate_use_rootsof:                 Functions and Variables for Integration.
                                                             (line  441)
* integration_constant:                  Functions and Variables for Integration.
                                                             (line  380)
* integration_constant_counter:          Functions and Variables for Integration.
                                                             (line  405)
* interpolate_color:                     Functions and Variables for draw.
                                                             (line 1143)
* intersect:                             Functions and Variables for Sets.
                                                             (line  465)
* intersection:                          Functions and Variables for Sets.
                                                             (line  469)
* intervalp:                             Functions and Variables for orthogonal polynomials.
                                                             (line   39)
* intfaclim:                             Functions and Variables for Polynomials.
                                                             (line  652)
* intopois:                              Functions and Variables for Poisson series.
                                                             (line    6)
* intosum:                               Functions and Variables for Sums and Products.
                                                             (line   35)
* invariant1:                            Functions and Variables for ctensor.
                                                             (line  803)
* invariant2:                            Functions and Variables for ctensor.
                                                             (line  809)
* inverse_fft:                           Functions and Variables for fast Fourier transform.
                                                             (line   44)
* inverse_jacobi_cd:                     Functions and Variables for Elliptic Functions.
                                                             (line   66)
* inverse_jacobi_cn:                     Functions and Variables for Elliptic Functions.
                                                             (line   45)
* inverse_jacobi_cs:                     Functions and Variables for Elliptic Functions.
                                                             (line   63)
* inverse_jacobi_dc:                     Functions and Variables for Elliptic Functions.
                                                             (line   75)
* inverse_jacobi_dn:                     Functions and Variables for Elliptic Functions.
                                                             (line   48)
* inverse_jacobi_ds:                     Functions and Variables for Elliptic Functions.
                                                             (line   72)
* inverse_jacobi_nc:                     Functions and Variables for Elliptic Functions.
                                                             (line   60)
* inverse_jacobi_nd:                     Functions and Variables for Elliptic Functions.
                                                             (line   69)
* inverse_jacobi_ns:                     Functions and Variables for Elliptic Functions.
                                                             (line   51)
* inverse_jacobi_sc:                     Functions and Variables for Elliptic Functions.
                                                             (line   54)
* inverse_jacobi_sd:                     Functions and Variables for Elliptic Functions.
                                                             (line   57)
* inverse_jacobi_sn:                     Functions and Variables for Elliptic Functions.
                                                             (line   42)
* invert:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  693)
* invert_by_adjoint:                     Functions and Variables for Matrices and Linear Algebra.
                                                             (line  686)
* invert_by_lu:                          Functions and Variables for linearalgebra.
                                                             (line  237)
* inv_mod:                               Functions and Variables for Number Theory.
                                                             (line  344)
* in_neighbors:                          Functions and Variables for graphs.
                                                             (line  600)
* ip_grid:                               Functions and Variables for draw.
                                                             (line 1208)
* ip_grid_in:                            Functions and Variables for draw.
                                                             (line 1215)
* irr:                                   Functions and Variables for finance.
                                                             (line  226)
* irrational:                            Functions and Variables for Properties.
                                                             (line  534)
* is:                                    Functions and Variables for Facts.
                                                             (line  291)
* ishow:                                 Functions and Variables for itensor.
                                                             (line   48)
* isolate:                               Functions and Variables for Expressions.
                                                             (line  379)
* isolate_wrt_times:                     Functions and Variables for Expressions.
                                                             (line  398)
* isomorphism:                           Functions and Variables for graphs.
                                                             (line  588)
* isqrt:                                 Functions and Variables for Number Theory.
                                                             (line  356)
* isreal_p:                              Functions and Variables for to_poly_solve.
                                                             (line  502)
* is_biconnected:                        Functions and Variables for graphs.
                                                             (line  612)
* is_bipartite:                          Functions and Variables for graphs.
                                                             (line  622)
* is_connected:                          Functions and Variables for graphs.
                                                             (line  633)
* is_digraph:                            Functions and Variables for graphs.
                                                             (line  642)
* is_edge_in_graph:                      Functions and Variables for graphs.
                                                             (line  652)
* is_graph:                              Functions and Variables for graphs.
                                                             (line  668)
* is_graph_or_digraph:                   Functions and Variables for graphs.
                                                             (line  678)
* is_isomorphic:                         Functions and Variables for graphs.
                                                             (line  689)
* is_planar:                             Functions and Variables for graphs.
                                                             (line  702)
* is_sconnected:                         Functions and Variables for graphs.
                                                             (line  718)
* is_tree:                               Functions and Variables for graphs.
                                                             (line  741)
* is_vertex_in_graph:                    Functions and Variables for graphs.
                                                             (line  729)
* items_inference:                       Functions and Variables for inference_result.
                                                             (line   53)
* iterations:                            Plotting Options.   (line  106)
* itr:                                   Functions and Variables for itensor.
                                                             (line 1307)
* jacobi:                                Functions and Variables for Number Theory.
                                                             (line  361)
* jacobian:                              Functions and Variables for linearalgebra.
                                                             (line  242)
* jacobi_cd:                             Functions and Variables for Elliptic Functions.
                                                             (line   30)
* jacobi_cn:                             Functions and Variables for Elliptic Functions.
                                                             (line    9)
* jacobi_cs:                             Functions and Variables for Elliptic Functions.
                                                             (line   27)
* jacobi_dc:                             Functions and Variables for Elliptic Functions.
                                                             (line   39)
* jacobi_dn:                             Functions and Variables for Elliptic Functions.
                                                             (line   12)
* jacobi_ds:                             Functions and Variables for Elliptic Functions.
                                                             (line   36)
* jacobi_nc:                             Functions and Variables for Elliptic Functions.
                                                             (line   24)
* jacobi_nd:                             Functions and Variables for Elliptic Functions.
                                                             (line   33)
* jacobi_ns:                             Functions and Variables for Elliptic Functions.
                                                             (line   15)
* jacobi_p:                              Functions and Variables for orthogonal polynomials.
                                                             (line   43)
* jacobi_sc:                             Functions and Variables for Elliptic Functions.
                                                             (line   18)
* jacobi_sd:                             Functions and Variables for Elliptic Functions.
                                                             (line   21)
* jacobi_sn:                             Functions and Variables for Elliptic Functions.
                                                             (line    6)
* JF:                                    Functions and Variables for diag.
                                                             (line   40)
* join:                                  Functions and Variables for Lists.
                                                             (line  270)
* jordan:                                Functions and Variables for diag.
                                                             (line   63)
* julia:                                 Functions and Variables for Plotting.
                                                             (line  112)
* julia_parameter:                       Definitions for complex fractals.
                                                             (line   40)
* julia_set:                             Definitions for complex fractals.
                                                             (line   22)
* julia_sin:                             Definitions for complex fractals.
                                                             (line   47)
* kdels:                                 Functions and Variables for itensor.
                                                             (line  380)
* kdelta:                                Functions and Variables for itensor.
                                                             (line  365)
* keepfloat:                             Functions and Variables for Polynomials.
                                                             (line  668)
* key:                                   Functions and Variables for draw.
                                                             (line 1223)
* key_pos:                               Functions and Variables for draw.
                                                             (line 1245)
* kill:                                  Functions and Variables for Command Line.
                                                             (line  300)
* killcontext:                           Functions and Variables for Facts.
                                                             (line  344)
* kinvariant:                            Functions and Variables for ctensor.
                                                             (line 1219)
* kostka:                                Functions and Variables for Symmetries.
                                                             (line  447)
* kronecker_product:                     Functions and Variables for linearalgebra.
                                                             (line  265)
* kron_delta:                            Functions and Variables for Sets.
                                                             (line  494)
* kt:                                    Functions and Variables for ctensor.
                                                             (line 1247)
* kummer_m:                              Functions and Variables for contrib_ode.
                                                             (line  112)
* kummer_u:                              Functions and Variables for contrib_ode.
                                                             (line  123)
* kurtosis:                              Functions and Variables for descriptive statistics.
                                                             (line  419)
* kurtosis_bernoulli:                    Functions and Variables for discrete distributions.
                                                             (line  300)
* kurtosis_beta:                         Functions and Variables for continuous distributions.
                                                             (line  858)
* kurtosis_binomial:                     Functions and Variables for discrete distributions.
                                                             (line  139)
* kurtosis_chi2:                         Functions and Variables for continuous distributions.
                                                             (line  372)
* kurtosis_continuous_uniform:           Functions and Variables for continuous distributions.
                                                             (line  911)
* kurtosis_discrete_uniform:             Functions and Variables for discrete distributions.
                                                             (line  417)
* kurtosis_exp:                          Functions and Variables for continuous distributions.
                                                             (line  657)
* kurtosis_f:                            Functions and Variables for continuous distributions.
                                                             (line  509)
* kurtosis_gamma:                        Functions and Variables for continuous distributions.
                                                             (line  794)
* kurtosis_general_finite_discrete:      Functions and Variables for discrete distributions.
                                                             (line   74)
* kurtosis_geometric:                    Functions and Variables for discrete distributions.
                                                             (line  364)
* kurtosis_gumbel:                       Functions and Variables for continuous distributions.
                                                             (line 1381)
* kurtosis_hypergeometric:               Functions and Variables for discrete distributions.
                                                             (line  484)
* kurtosis_laplace:                      Functions and Variables for continuous distributions.
                                                             (line 1290)
* kurtosis_logistic:                     Functions and Variables for continuous distributions.
                                                             (line  963)
* kurtosis_lognormal:                    Functions and Variables for continuous distributions.
                                                             (line  736)
* kurtosis_negative_binomial:            Functions and Variables for discrete distributions.
                                                             (line  548)
* kurtosis_noncentral_chi2:              Functions and Variables for continuous distributions.
                                                             (line  442)
* kurtosis_noncentral_student_t:         Functions and Variables for continuous distributions.
                                                             (line  228)
* kurtosis_normal:                       Functions and Variables for continuous distributions.
                                                             (line   59)
* kurtosis_pareto:                       Functions and Variables for continuous distributions.
                                                             (line 1014)
* kurtosis_poisson:                      Functions and Variables for discrete distributions.
                                                             (line  196)
* kurtosis_rayleigh:                     Functions and Variables for continuous distributions.
                                                             (line 1221)
* kurtosis_student_t:                    Functions and Variables for continuous distributions.
                                                             (line  126)
* kurtosis_weibull:                      Functions and Variables for continuous distributions.
                                                             (line 1064)
* label:                                 Plotting Options.   (line  111)
* label <1>:                             Functions and Variables for draw.
                                                             (line 3089)
* labels:                                Functions and Variables for Command Line.
                                                             (line  384)
* labels <1>:                            Functions and Variables for Command Line.
                                                             (line  362)
* label_alignment:                       Functions and Variables for draw.
                                                             (line 1275)
* label_alignment <1>:                   Functions and Variables for graphs.
                                                             (line 1411)
* label_orientation:                     Functions and Variables for draw.
                                                             (line 1300)
* lagrange:                              Functions and Variables for interpol.
                                                             (line    6)
* laguerre:                              Functions and Variables for orthogonal polynomials.
                                                             (line   52)
* lambda:                                Functions and Variables for Function Definition.
                                                             (line  634)
* lambert_w:                             Functions and Variables for Special Functions.
                                                             (line  150)
* laplace:                               Functions and Variables for Differentiation.
                                                             (line  604)
* laplacian_matrix:                      Functions and Variables for graphs.
                                                             (line  751)
* lassociative:                          Functions and Variables for Simplification.
                                                             (line  376)
* last:                                  Functions and Variables for Lists.
                                                             (line  291)
* lbfgs:                                 Functions and Variables for lbfgs.
                                                             (line    6)
* lbfgs_ncorrections:                    Functions and Variables for lbfgs.
                                                             (line  276)
* lbfgs_nfeval_max:                      Functions and Variables for lbfgs.
                                                             (line  268)
* lc2kdt:                                Functions and Variables for itensor.
                                                             (line  408)
* lcharp:                                Functions and Variables for characters.
                                                             (line   68)
* lcm:                                   Functions and Variables for Number Theory.
                                                             (line  369)
* lc_l:                                  Functions and Variables for itensor.
                                                             (line  479)
* lc_u:                                  Functions and Variables for itensor.
                                                             (line  503)
* ldefint:                               Functions and Variables for Integration.
                                                             (line  491)
* ldisp:                                 Functions and Variables for Display.
                                                             (line  344)
* ldisplay:                              Functions and Variables for Display.
                                                             (line  375)
* leftjust:                              Functions and Variables for Display.
                                                             (line  409)
* legend:                                Plotting Options.   (line  116)
* legendre_p:                            Functions and Variables for orthogonal polynomials.
                                                             (line   58)
* legendre_q:                            Functions and Variables for orthogonal polynomials.
                                                             (line   64)
* leinstein:                             Functions and Variables for ctensor.
                                                             (line  245)
* length:                                Functions and Variables for Lists.
                                                             (line  295)
* Less than:                             Relational operators.
                                                             (line    6)
* Less than or equal:                    Relational operators.
                                                             (line    6)
* let:                                   Functions and Variables for Rules and Patterns.
                                                             (line  224)
* letrat:                                Functions and Variables for Rules and Patterns.
                                                             (line  305)
* letrules:                              Functions and Variables for Rules and Patterns.
                                                             (line  329)
* letsimp:                               Functions and Variables for Rules and Patterns.
                                                             (line  344)
* let_rule_packages:                     Functions and Variables for Rules and Patterns.
                                                             (line  361)
* levi_civita:                           Functions and Variables for itensor.
                                                             (line  402)
* lfg:                                   Functions and Variables for ctensor.
                                                             (line 1169)
* lfreeof:                               Functions and Variables for Expressions.
                                                             (line  467)
* lg:                                    Functions and Variables for ctensor.
                                                             (line 1202)
* lgtreillis:                            Functions and Variables for Symmetries.
                                                             (line  454)
* lhospitallim:                          Functions and Variables for Limits.
                                                             (line    6)
* lhs:                                   Functions and Variables for Equations.
                                                             (line  451)
* li:                                    Root Exponential and Logarithmic Functions.
                                                             (line  112)
* liediff:                               Functions and Variables for itensor.
                                                             (line  652)
* limit:                                 Functions and Variables for Limits.
                                                             (line   13)
* limsubst:                              Functions and Variables for Limits.
                                                             (line   58)
* Lindstedt:                             Functions and Variables for lindstedt.
                                                             (line    6)
* linear:                                Functions and Variables for Simplification.
                                                             (line  382)
* linear <1>:                            Package functs.     (line   44)
* linearinterpol:                        Functions and Variables for interpol.
                                                             (line  109)
* linear_program:                        Functions and Variables for simplex.
                                                             (line   13)
* linear_regression:                     Functions and Variables for stats.
                                                             (line  814)
* linear_solver:                         Functions and Variables for zeilberger.
                                                             (line  106)
* linechar:                              Functions and Variables for Command Line.
                                                             (line  390)
* linel:                                 Functions and Variables for Display.
                                                             (line  427)
* linenum:                               Functions and Variables for Command Line.
                                                             (line  408)
* linewidth:                             Visualization with VTK.
                                                             (line  231)
* line_graph:                            Functions and Variables for graphs.
                                                             (line  185)
* line_type:                             Functions and Variables for draw.
                                                             (line 1325)
* line_width:                            Functions and Variables for draw.
                                                             (line 1351)
* linsolve:                              Functions and Variables for Equations.
                                                             (line  493)
* linsolvewarn:                          Functions and Variables for Equations.
                                                             (line  563)
* linsolve_params:                       Functions and Variables for Equations.
                                                             (line  569)
* lispdisp:                              Functions and Variables for Display.
                                                             (line  437)
* List delimiters:                       Functions and Variables for Lists.
                                                             (line    6)
* listarith:                             Functions and Variables for Lists.
                                                             (line  307)
* listarray:                             Functions and Variables for Arrays.
                                                             (line  272)
* listconstvars:                         Functions and Variables for Expressions.
                                                             (line  423)
* listdummyvars:                         Functions and Variables for Expressions.
                                                             (line  433)
* listify:                               Functions and Variables for Sets.
                                                             (line  517)
* listoftens:                            Functions and Variables for itensor.
                                                             (line   32)
* listofvars:                            Functions and Variables for Expressions.
                                                             (line  452)
* listp:                                 Functions and Variables for Lists.
                                                             (line  316)
* listp <1>:                             Functions and Variables for linearalgebra.
                                                             (line  269)
* list_correlations:                     Functions and Variables for descriptive statistics.
                                                             (line  670)
* list_matrix_entries:                   Functions and Variables for Matrices and Linear Algebra.
                                                             (line  719)
* list_nc_monomials:                     Functions and Variables for Affine.
                                                             (line  123)
* lmax:                                  Functions for Numbers.
                                                             (line  232)
* lmin:                                  Functions for Numbers.
                                                             (line  238)
* lmxchar:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line  728)
* load:                                  Functions and Variables for File Input and Output.
                                                             (line  228)
* loadfile:                              Functions and Variables for File Input and Output.
                                                             (line  281)
* loadprint:                             Functions and Variables for File Input and Output.
                                                             (line  291)
* load_pathname:                         Functions and Variables for File Input and Output.
                                                             (line  256)
* local:                                 Functions and Variables for Function Definition.
                                                             (line  759)
* locate_matrix_entry:                   Functions and Variables for linearalgebra.
                                                             (line  278)
* log:                                   Root Exponential and Logarithmic Functions.
                                                             (line  171)
* logabs:                                Root Exponential and Logarithmic Functions.
                                                             (line  207)
* logarc:                                Root Exponential and Logarithmic Functions.
                                                             (line  217)
* logarc <1>:                            Root Exponential and Logarithmic Functions.
                                                             (line  218)
* logcb:                                 Functions and Variables for draw.
                                                             (line 1374)
* logconcoeffp:                          Root Exponential and Logarithmic Functions.
                                                             (line  227)
* logcontract:                           Root Exponential and Logarithmic Functions.
                                                             (line  237)
* logexpand:                             Root Exponential and Logarithmic Functions.
                                                             (line  259)
* Logical conjunction:                   Logical operators.  (line    7)
* Logical conjunction <1>:               Functions and Variables for to_poly_solve.
                                                             (line   16)
* Logical disjunction:                   Logical operators.  (line   43)
* Logical disjunction <1>:               Functions and Variables for to_poly_solve.
                                                             (line  133)
* Logical negation:                      Logical operators.  (line   30)
* lognegint:                             Root Exponential and Logarithmic Functions.
                                                             (line  269)
* logsimp:                               Root Exponential and Logarithmic Functions.
                                                             (line  275)
* logx:                                  Plotting Options.   (line  127)
* logx <1>:                              Functions and Variables for draw.
                                                             (line 1399)
* logx_secondary:                        Functions and Variables for draw.
                                                             (line 1416)
* logy:                                  Plotting Options.   (line  132)
* logy <1>:                              Functions and Variables for draw.
                                                             (line 1444)
* logy_secondary:                        Functions and Variables for draw.
                                                             (line 1461)
* logz:                                  Functions and Variables for draw.
                                                             (line 1489)
* log_gamma:                             Gamma and factorial Functions.
                                                             (line  115)
* lopow:                                 Functions and Variables for Polynomials.
                                                             (line  698)
* lorentz_gauge:                         Functions and Variables for itensor.
                                                             (line  984)
* lowercasep:                            Functions and Variables for characters.
                                                             (line   71)
* lpart:                                 Functions and Variables for Expressions.
                                                             (line  481)
* lratsubst:                             Functions and Variables for Polynomials.
                                                             (line  706)
* lreduce:                               Functions and Variables for Sets.
                                                             (line  531)
* lriem:                                 Functions and Variables for ctensor.
                                                             (line 1186)
* lriemann:                              Functions and Variables for ctensor.
                                                             (line  277)
* lsquares_estimates:                    Functions and Variables for lsquares.
                                                             (line    6)
* lsquares_estimates_approximate:        Functions and Variables for lsquares.
                                                             (line  148)
* lsquares_estimates_exact:              Functions and Variables for lsquares.
                                                             (line   99)
* lsquares_mse:                          Functions and Variables for lsquares.
                                                             (line  213)
* lsquares_residuals:                    Functions and Variables for lsquares.
                                                             (line  282)
* lsquares_residual_mse:                 Functions and Variables for lsquares.
                                                             (line  332)
* lsum:                                  Functions and Variables for Sums and Products.
                                                             (line   15)
* ltreillis:                             Functions and Variables for Symmetries.
                                                             (line  461)
* lucas:                                 Functions and Variables for Number Theory.
                                                             (line  376)
* lu_backsub:                            Functions and Variables for linearalgebra.
                                                             (line  304)
* lu_factor:                             Functions and Variables for linearalgebra.
                                                             (line  309)
* m1pbranch:                             Functions and Variables for Numbers.
                                                             (line  139)
* Macro function definition operator:    Assignment operators.
                                                             (line  116)
* macroexpand:                           Macros.             (line  101)
* macroexpand1:                          Macros.             (line  135)
* macroexpansion:                        Functions and Variables for Function Definition.
                                                             (line  792)
* macros:                                Macros.             (line  167)
* mainvar:                               Functions and Variables for Expressions.
                                                             (line  487)
* makebox:                               Functions and Variables for itensor.
                                                             (line  783)
* makefact:                              Gamma and factorial Functions.
                                                             (line  759)
* makegamma:                             Gamma and factorial Functions.
                                                             (line  208)
* makelist:                              Functions and Variables for Lists.
                                                             (line  320)
* makeOrders:                            Functions and Variables for makeOrders.
                                                             (line    6)
* makeset:                               Functions and Variables for Sets.
                                                             (line  572)
* make_array:                            Functions and Variables for Arrays.
                                                             (line  363)
* make_graph:                            Functions and Variables for graphs.
                                                             (line  188)
* make_level_picture:                    Functions and Variables for pictures.
                                                             (line   10)
* make_polygon:                          Functions and Variables for worldmap.
                                                             (line   63)
* make_poly_continent:                   Functions and Variables for worldmap.
                                                             (line   36)
* make_poly_country:                     Functions and Variables for worldmap.
                                                             (line   53)
* make_random_state:                     Random Numbers.     (line    6)
* make_rgb_picture:                      Functions and Variables for pictures.
                                                             (line   42)
* make_string_input_stream:              Functions and Variables for input and output.
                                                             (line   56)
* make_string_output_stream:             Functions and Variables for input and output.
                                                             (line   73)
* make_transform:                        Functions and Variables for Plotting.
                                                             (line  145)
* mandelbrot:                            Functions and Variables for Plotting.
                                                             (line  159)
* mandelbrot_set:                        Definitions for complex fractals.
                                                             (line    6)
* manual_demo:                           Functions and Variables for Help.
                                                             (line  170)
* map:                                   Functions and Variables for Program Flow.
                                                             (line  441)
* mapatom:                               Functions and Variables for Program Flow.
                                                             (line  478)
* maperror:                              Functions and Variables for Program Flow.
                                                             (line  484)
* maplist:                               Functions and Variables for Program Flow.
                                                             (line  510)
* mapprint:                              Functions and Variables for Program Flow.
                                                             (line  500)
* matchdeclare:                          Functions and Variables for Rules and Patterns.
                                                             (line  367)
* matchfix:                              User defined operators.
                                                             (line  103)
* mathml_display:                        Functions and Variables for alt-display.
                                                             (line   56)
* matrix:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line  744)
* matrixmap:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line  871)
* matrixp:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line  877)
* matrixp <1>:                           Functions and Variables for linearalgebra.
                                                             (line  444)
* matrix_element_add:                    Functions and Variables for Matrices and Linear Algebra.
                                                             (line  881)
* matrix_element_mult:                   Functions and Variables for Matrices and Linear Algebra.
                                                             (line  912)
* matrix_element_transpose:              Functions and Variables for Matrices and Linear Algebra.
                                                             (line  953)
* matrix_size:                           Functions and Variables for linearalgebra.
                                                             (line  455)
* mattrace:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1002)
* mat_cond:                              Functions and Variables for linearalgebra.
                                                             (line  423)
* mat_fullunblocker:                     Functions and Variables for linearalgebra.
                                                             (line  460)
* mat_function:                          Functions and Variables for diag.
                                                             (line  204)
* mat_norm:                              Functions and Variables for linearalgebra.
                                                             (line  435)
* mat_trace:                             Functions and Variables for linearalgebra.
                                                             (line  465)
* mat_unblocker:                         Functions and Variables for linearalgebra.
                                                             (line  471)
* max:                                   Functions for Numbers.
                                                             (line  244)
* maxapplydepth:                         Functions and Variables for Rules and Patterns.
                                                             (line  524)
* maxapplyheight:                        Functions and Variables for Rules and Patterns.
                                                             (line  530)
* maxima_tempdir:                        Functions and Variables for Runtime Environment.
                                                             (line    6)
* maxima_userdir:                        Functions and Variables for Runtime Environment.
                                                             (line   18)
* maximize_lp:                           Functions and Variables for simplex.
                                                             (line   40)
* maxnegex:                              Functions and Variables for Simplification.
                                                             (line  426)
* maxposex:                              Functions and Variables for Simplification.
                                                             (line  432)
* maxpsifracdenom:                       Gamma and factorial Functions.
                                                             (line  752)
* maxpsifracnum:                         Gamma and factorial Functions.
                                                             (line  745)
* maxpsinegint:                          Gamma and factorial Functions.
                                                             (line  737)
* maxpsiposint:                          Gamma and factorial Functions.
                                                             (line  731)
* maxtayorder:                           Functions and Variables for Series.
                                                             (line   70)
* max_clique:                            Functions and Variables for graphs.
                                                             (line  767)
* max_degree:                            Functions and Variables for graphs.
                                                             (line  776)
* max_flow:                              Functions and Variables for graphs.
                                                             (line  788)
* max_independent_set:                   Functions and Variables for graphs.
                                                             (line  818)
* max_matching:                          Functions and Variables for graphs.
                                                             (line  828)
* MAX_ORD:                               Functions and Variables for zeilberger.
                                                             (line   94)
* maybe:                                 Functions and Variables for Facts.
                                                             (line  362)
* md5sum:                                Functions and Variables for strings.
                                                             (line   56)
* mean:                                  Functions and Variables for descriptive statistics.
                                                             (line    6)
* mean_bernoulli:                        Functions and Variables for discrete distributions.
                                                             (line  241)
* mean_beta:                             Functions and Variables for continuous distributions.
                                                             (line  841)
* mean_binomial:                         Functions and Variables for discrete distributions.
                                                             (line  119)
* mean_chi2:                             Functions and Variables for continuous distributions.
                                                             (line  306)
* mean_continuous_uniform:               Functions and Variables for continuous distributions.
                                                             (line  892)
* mean_deviation:                        Functions and Variables for descriptive statistics.
                                                             (line  309)
* mean_discrete_uniform:                 Functions and Variables for discrete distributions.
                                                             (line  397)
* mean_exp:                              Functions and Variables for continuous distributions.
                                                             (line  584)
* mean_f:                                Functions and Variables for continuous distributions.
                                                             (line  491)
* mean_gamma:                            Functions and Variables for continuous distributions.
                                                             (line  776)
* mean_general_finite_discrete:          Functions and Variables for discrete distributions.
                                                             (line   50)
* mean_geometric:                        Functions and Variables for discrete distributions.
                                                             (line  346)
* mean_gumbel:                           Functions and Variables for continuous distributions.
                                                             (line 1349)
* mean_hypergeometric:                   Functions and Variables for discrete distributions.
                                                             (line  460)
* mean_laplace:                          Functions and Variables for continuous distributions.
                                                             (line 1272)
* mean_logistic:                         Functions and Variables for continuous distributions.
                                                             (line  945)
* mean_lognormal:                        Functions and Variables for continuous distributions.
                                                             (line  718)
* mean_negative_binomial:                Functions and Variables for discrete distributions.
                                                             (line  528)
* mean_noncentral_chi2:                  Functions and Variables for continuous distributions.
                                                             (line  424)
* mean_noncentral_student_t:             Functions and Variables for continuous distributions.
                                                             (line  194)
* mean_normal:                           Functions and Variables for continuous distributions.
                                                             (line   40)
* mean_pareto:                           Functions and Variables for continuous distributions.
                                                             (line  995)
* mean_poisson:                          Functions and Variables for discrete distributions.
                                                             (line  178)
* mean_rayleigh:                         Functions and Variables for continuous distributions.
                                                             (line 1138)
* mean_student_t:                        Functions and Variables for continuous distributions.
                                                             (line  102)
* mean_weibull:                          Functions and Variables for continuous distributions.
                                                             (line 1046)
* median:                                Functions and Variables for descriptive statistics.
                                                             (line  265)
* median_deviation:                      Functions and Variables for descriptive statistics.
                                                             (line  337)
* member:                                Functions and Variables for Lists.
                                                             (line  363)
* mesh:                                  Functions and Variables for draw.
                                                             (line 3132)
* mesh_lines_color:                      Plotting Options.   (line  137)
* method:                                Functions and Variables for contrib_ode.
                                                             (line   72)
* metricexpandall:                       Functions and Variables for Units.
                                                             (line  389)
* min:                                   Functions for Numbers.
                                                             (line  256)
* minf:                                  Functions and Variables for Constants.
                                                             (line   44)
* minfactorial:                          Combinatorial Functions.
                                                             (line  178)
* minimalPoly:                           Functions and Variables for diag.
                                                             (line  144)
* minimize_lp:                           Functions and Variables for simplex.
                                                             (line   48)
* minimum_spanning_tree:                 Functions and Variables for graphs.
                                                             (line  864)
* minor:                                 Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1012)
* minpack_lsquares:                      Functions and Variables for minpack.
                                                             (line    6)
* minpack_solve:                         Functions and Variables for minpack.
                                                             (line   64)
* Minus infinity:                        Functions and Variables for Constants.
                                                             (line   45)
* min_degree:                            Functions and Variables for graphs.
                                                             (line  839)
* min_edge_cut:                          Functions and Variables for graphs.
                                                             (line  851)
* min_vertex_cover:                      Functions and Variables for graphs.
                                                             (line  856)
* min_vertex_cut:                        Functions and Variables for graphs.
                                                             (line  859)
* mnewton:                               Functions and Variables for mnewton.
                                                             (line   22)
* mod:                                   Functions and Variables for Number Theory.
                                                             (line  396)
* ModeMatrix:                            Functions and Variables for diag.
                                                             (line  166)
* mode_checkp:                           Functions and Variables for Function Definition.
                                                             (line  927)
* mode_check_errorp:                     Functions and Variables for Function Definition.
                                                             (line  933)
* mode_check_warnp:                      Functions and Variables for Function Definition.
                                                             (line  938)
* mode_declare:                          Functions and Variables for Function Definition.
                                                             (line  943)
* mode_identity:                         Functions and Variables for Function Definition.
                                                             (line  987)
* modular_linear_solver:                 Functions and Variables for zeilberger.
                                                             (line  141)
* modulus:                               Functions and Variables for Polynomials.
                                                             (line  732)
* mod_big_prime:                         Functions and Variables for zeilberger.
                                                             (line  153)
* mod_test:                              Functions and Variables for zeilberger.
                                                             (line  135)
* mod_threshold:                         Functions and Variables for zeilberger.
                                                             (line  159)
* moebius:                               Functions and Variables for Sets.
                                                             (line  606)
* mon2schur:                             Functions and Variables for Symmetries.
                                                             (line   62)
* mono:                                  Functions and Variables for Affine.
                                                             (line  100)
* monomial_dimensions:                   Functions and Variables for Affine.
                                                             (line  107)
* multibernstein_poly:                   Functions and Variables for Bernstein.
                                                             (line   64)
* multinomial:                           Functions and Variables for Symmetries.
                                                             (line  836)
* multinomial_coeff:                     Functions and Variables for Sets.
                                                             (line  639)
* Multiplication:                        Arithmetic operators.
                                                             (line    6)
* multiplicative:                        Functions and Variables for Simplification.
                                                             (line  438)
* multiplicities:                        Functions and Variables for Equations.
                                                             (line  578)
* multiplot_mode:                        Functions and Variables for draw.
                                                             (line  137)
* multi_display_for_texinfo:             Functions and Variables for alt-display.
                                                             (line   74)
* multi_elem:                            Functions and Variables for Symmetries.
                                                             (line   89)
* multi_orbit:                           Functions and Variables for Symmetries.
                                                             (line  353)
* multi_pui:                             Functions and Variables for Symmetries.
                                                             (line  105)
* multsym:                               Functions and Variables for Symmetries.
                                                             (line  367)
* multthru:                              Functions and Variables for Simplification.
                                                             (line  484)
* mycielski_graph:                       Functions and Variables for graphs.
                                                             (line  220)
* myoptions:                             Functions and Variables for Command Line.
                                                             (line  413)
* N'th previous output:                  Functions and Variables for Command Line.
                                                             (line  153)
* nary:                                  Functions and Variables for Simplification.
                                                             (line  531)
* nary <1>:                              User defined operators.
                                                             (line  208)
* natural_unit:                          Functions and Variables for ezunits.
                                                             (line  702)
* ncexpt:                                Functions and Variables for Display.
                                                             (line  157)
* ncharpoly:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1017)
* nc_degree:                             Functions and Variables for Affine.
                                                             (line   63)
* Negative infinity:                     Functions and Variables for Constants.
                                                             (line   45)
* negative_picture:                      Functions and Variables for pictures.
                                                             (line   68)
* negdistrib:                            Functions and Variables for Simplification.
                                                             (line  551)
* negsumdispflag:                        Functions and Variables for Display.
                                                             (line  454)
* neighbors:                             Functions and Variables for graphs.
                                                             (line  873)
* new:                                   Functions and Variables for Structures.
                                                             (line   50)
* newcontext:                            Functions and Variables for Facts.
                                                             (line  386)
* newdet:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1034)
* newline:                               Functions and Variables for characters.
                                                             (line   74)
* newline <1>:                           Functions and Variables for input and output.
                                                             (line   93)
* newton:                                Functions for numerical solution of equations.
                                                             (line  121)
* newtonepsilon:                         Functions and Variables for mnewton.
                                                             (line    6)
* newtonmaxiter:                         Functions and Variables for mnewton.
                                                             (line   14)
* new_graph:                             Functions and Variables for graphs.
                                                             (line  223)
* new_variable:                          Functions and Variables for to_poly_solve.
                                                             (line  541)
* nextlayerfactor:                       Package facexp.     (line   62)
* next_prime:                            Functions and Variables for Number Theory.
                                                             (line  424)
* nicedummies:                           Functions and Variables for to_poly_solve.
                                                             (line  585)
* niceindices:                           Functions and Variables for Series.
                                                             (line   77)
* niceindicespref:                       Functions and Variables for Series.
                                                             (line  112)
* ninth:                                 Functions and Variables for Lists.
                                                             (line  399)
* nm:                                    Functions and Variables for ctensor.
                                                             (line 1251)
* nmc:                                   Functions and Variables for ctensor.
                                                             (line 1255)
* noeval:                                Functions and Variables for Evaluation.
                                                             (line  595)
* nofix:                                 User defined operators.
                                                             (line  222)
* nolabels:                              Functions and Variables for Command Line.
                                                             (line  419)
* nonarray:                              Functions and Variables for Properties.
                                                             (line  405)
* noncentral_moment:                     Functions and Variables for descriptive statistics.
                                                             (line  121)
* Noncommutative exponentiation:         Arithmetic operators.
                                                             (line  189)
* Noncommutative multiplication:         Arithmetic operators.
                                                             (line  208)
* nonegative_lp:                         Functions and Variables for simplex.
                                                             (line   89)
* noninteger:                            Functions and Variables for Properties.
                                                             (line  371)
* nonmetricity:                          Functions and Variables for ctensor.
                                                             (line  665)
* nonnegintegerp:                        Functions and Variables for Numbers.
                                                             (line  157)
* nonscalar:                             Functions and Variables for Properties.
                                                             (line  426)
* nonscalarp:                            Functions and Variables for Properties.
                                                             (line  433)
* nonzeroandfreeof:                      Package functs.     (line   38)
* not:                                   Logical operators.  (line   29)
* Not equal (syntactic inequality):      Operators for Equations.
                                                             (line    7)
* notequal:                              Functions and Variables for Predicates.
                                                             (line  155)
* noun:                                  Functions and Variables for Expressions.
                                                             (line  500)
* noundisp:                              Functions and Variables for Expressions.
                                                             (line  519)
* nounify:                               Functions and Variables for Expressions.
                                                             (line  525)
* nouns:                                 Functions and Variables for Evaluation.
                                                             (line  601)
* np:                                    Functions and Variables for ctensor.
                                                             (line 1223)
* npi:                                   Functions and Variables for ctensor.
                                                             (line 1227)
* nptetrad:                              Functions and Variables for ctensor.
                                                             (line  485)
* npv:                                   Functions and Variables for finance.
                                                             (line  215)
* nroots:                                Functions and Variables for Equations.
                                                             (line  584)
* nterms:                                Functions and Variables for Expressions.
                                                             (line  535)
* ntermst:                               Functions and Variables for ctensor.
                                                             (line  841)
* nthroot:                               Functions and Variables for Equations.
                                                             (line  596)
* nticks:                                Plotting Options.   (line  146)
* nticks <1>:                            Functions and Variables for draw.
                                                             (line 1506)
* ntrig:                                 Functions and Variables for Trigonometric.
                                                             (line  220)
* nullity:                               Functions and Variables for linearalgebra.
                                                             (line  512)
* nullspace:                             Functions and Variables for linearalgebra.
                                                             (line  505)
* num:                                   Functions and Variables for Polynomials.
                                                             (line  775)
* numbered_boundaries:                   Functions and Variables for worldmap.
                                                             (line   22)
* numberp:                               Functions and Variables for Numbers.
                                                             (line  161)
* numer:                                 Functions and Variables for Numbers.
                                                             (line  189)
* numerval:                              Functions and Variables for Numbers.
                                                             (line  236)
* numer_pbranch:                         Functions and Variables for Numbers.
                                                             (line  208)
* numfactor:                             Gamma and factorial Functions.
                                                             (line  765)
* num_distinct_partitions:               Functions and Variables for Sets.
                                                             (line  673)
* num_partitions:                        Functions and Variables for Sets.
                                                             (line  696)
* nusum:                                 Functions and Variables for Series.
                                                             (line  141)
* nzeta:                                 Functions and Variables for Special Functions.
                                                             (line  164)
* nzetai:                                Functions and Variables for Special Functions.
                                                             (line  171)
* nzetar:                                Functions and Variables for Special Functions.
                                                             (line  168)
* obase:                                 Functions and Variables for Display.
                                                             (line  463)
* odd:                                   Functions and Variables for Properties.
                                                             (line  256)
* oddfun:                                Functions and Variables for Simplification.
                                                             (line  200)
* oddp:                                  Functions and Variables for Numbers.
                                                             (line  246)
* odd_girth:                             Functions and Variables for graphs.
                                                             (line  882)
* ode2:                                  Functions and Variables for Differential Equations.
                                                             (line   91)
* odelin:                                Functions and Variables for contrib_ode.
                                                             (line   11)
* ode_check:                             Functions and Variables for contrib_ode.
                                                             (line   42)
* op:                                    Functions and Variables for Expressions.
                                                             (line  543)
* opacity:                               Visualization with VTK.
                                                             (line  237)
* opena:                                 Functions and Variables for input and output.
                                                             (line  101)
* opena_binary:                          Functions and Variables for binary input and output.
                                                             (line   24)
* openr:                                 Functions and Variables for input and output.
                                                             (line  105)
* openr_binary:                          Functions and Variables for binary input and output.
                                                             (line   16)
* openw:                                 Functions and Variables for input and output.
                                                             (line  109)
* openw_binary:                          Functions and Variables for binary input and output.
                                                             (line   20)
* operatorp:                             Functions and Variables for Expressions.
                                                             (line  591)
* opproperties:                          Functions and Variables for Simplification.
                                                             (line  572)
* opsubst:                               Functions and Variables for Expressions.
                                                             (line  601)
* opsubst <1>:                           Functions and Variables for opsubst.
                                                             (line    6)
* optimize:                              Functions and Variables for Expressions.
                                                             (line  624)
* optimprefix:                           Functions and Variables for Expressions.
                                                             (line  632)
* optionset:                             Functions and Variables for Command Line.
                                                             (line  437)
* or:                                    Logical operators.  (line   42)
* orbit:                                 Functions and Variables for Symmetries.
                                                             (line  386)
* orbits:                                Graphical analysis of discrete dynamical systems.
                                                             (line   95)
* ordergreat:                            Functions and Variables for Expressions.
                                                             (line  638)
* ordergreatp:                           Functions and Variables for Expressions.
                                                             (line  656)
* orderless:                             Functions and Variables for Expressions.
                                                             (line  639)
* orderlessp:                            Functions and Variables for Expressions.
                                                             (line  657)
* orientation:                           Visualization with VTK.
                                                             (line  244)
* origin:                                Visualization with VTK.
                                                             (line  252)
* orthogonal_complement:                 Functions and Variables for linearalgebra.
                                                             (line  516)
* orthopoly_recur:                       Functions and Variables for orthogonal polynomials.
                                                             (line   69)
* orthopoly_returns_intervals:           Functions and Variables for orthogonal polynomials.
                                                             (line   97)
* orthopoly_weight:                      Functions and Variables for orthogonal polynomials.
                                                             (line  106)
* outative:                              Functions and Variables for Simplification.
                                                             (line  583)
* outchar:                               Functions and Variables for Command Line.
                                                             (line  454)
* outermap:                              Functions and Variables for Program Flow.
                                                             (line  590)
* outofpois:                             Functions and Variables for Poisson series.
                                                             (line    9)
* out_neighbors:                         Functions and Variables for graphs.
                                                             (line  893)
* packagefile:                           Functions and Variables for Miscellaneous Options.
                                                             (line   56)
* pade:                                  Functions and Variables for Series.
                                                             (line  191)
* palette:                               Plotting Options.   (line  154)
* palette <1>:                           Functions and Variables for draw.
                                                             (line 1526)
* parabolic_cylinder_d:                  Parabolic Cylinder Functions.
                                                             (line   12)
* parametric:                            Functions and Variables for draw.
                                                             (line 3178)
* parametric_surface:                    Functions and Variables for draw.
                                                             (line 3219)
* parg:                                  Functions and Variables for to_poly_solve.
                                                             (line  605)
* parGosper:                             Functions and Variables for zeilberger.
                                                             (line   60)
* parse_string:                          Functions and Variables for strings.
                                                             (line   72)
* parse_timedate:                        Functions and Variables for Runtime Environment.
                                                             (line  147)
* part:                                  Functions and Variables for Expressions.
                                                             (line  740)
* part2cont:                             Functions and Variables for Symmetries.
                                                             (line  244)
* partfrac:                              Functions and Variables for Number Theory.
                                                             (line  431)
* partition:                             Functions and Variables for Expressions.
                                                             (line  777)
* partition_set:                         Functions and Variables for Sets.
                                                             (line  721)
* partpol:                               Functions and Variables for Symmetries.
                                                             (line  253)
* partswitch:                            Functions and Variables for Expressions.
                                                             (line  793)
* pathname_directory:                    Functions and Variables for File Input and Output.
                                                             (line  316)
* pathname_name:                         Functions and Variables for File Input and Output.
                                                             (line  317)
* pathname_type:                         Functions and Variables for File Input and Output.
                                                             (line  318)
* path_digraph:                          Functions and Variables for graphs.
                                                             (line  226)
* path_graph:                            Functions and Variables for graphs.
                                                             (line  229)
* pdf_bernoulli:                         Functions and Variables for discrete distributions.
                                                             (line  215)
* pdf_beta:                              Functions and Variables for continuous distributions.
                                                             (line  818)
* pdf_binomial:                          Functions and Variables for discrete distributions.
                                                             (line   95)
* pdf_cauchy:                            Functions and Variables for continuous distributions.
                                                             (line 1306)
* pdf_chi2:                              Functions and Variables for continuous distributions.
                                                             (line  255)
* pdf_continuous_uniform:                Functions and Variables for continuous distributions.
                                                             (line  876)
* pdf_discrete_uniform:                  Functions and Variables for discrete distributions.
                                                             (line  380)
* pdf_exp:                               Functions and Variables for continuous distributions.
                                                             (line  530)
* pdf_f:                                 Functions and Variables for continuous distributions.
                                                             (line  457)
* pdf_file:                              Plotting Options.   (line  216)
* pdf_gamma:                             Functions and Variables for continuous distributions.
                                                             (line  753)
* pdf_general_finite_discrete:           Functions and Variables for discrete distributions.
                                                             (line    6)
* pdf_geometric:                         Functions and Variables for discrete distributions.
                                                             (line  330)
* pdf_gumbel:                            Functions and Variables for continuous distributions.
                                                             (line 1333)
* pdf_hypergeometric:                    Functions and Variables for discrete distributions.
                                                             (line  435)
* pdf_laplace:                           Functions and Variables for continuous distributions.
                                                             (line 1256)
* pdf_logistic:                          Functions and Variables for continuous distributions.
                                                             (line  929)
* pdf_lognormal:                         Functions and Variables for continuous distributions.
                                                             (line  685)
* pdf_negative_binomial:                 Functions and Variables for discrete distributions.
                                                             (line  504)
* pdf_noncentral_chi2:                   Functions and Variables for continuous distributions.
                                                             (line  402)
* pdf_noncentral_student_t:              Functions and Variables for continuous distributions.
                                                             (line  151)
* pdf_normal:                            Functions and Variables for continuous distributions.
                                                             (line    6)
* pdf_pareto:                            Functions and Variables for continuous distributions.
                                                             (line  979)
* pdf_poisson:                           Functions and Variables for discrete distributions.
                                                             (line  157)
* pdf_rank_sum:                          Functions and Variables for special distributions.
                                                             (line   20)
* pdf_rayleigh:                          Functions and Variables for continuous distributions.
                                                             (line 1080)
* pdf_signed_rank:                       Functions and Variables for special distributions.
                                                             (line    6)
* pdf_student_t:                         Functions and Variables for continuous distributions.
                                                             (line   77)
* pdf_weibull:                           Functions and Variables for continuous distributions.
                                                             (line 1030)
* pearson_skewness:                      Functions and Variables for descriptive statistics.
                                                             (line  471)
* permanent:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1039)
* permut:                                Functions and Variables for Symmetries.
                                                             (line  842)
* permutation:                           Package functs.     (line  177)
* permutations:                          Functions and Variables for Sets.
                                                             (line  742)
* petersen_graph:                        Functions and Variables for graphs.
                                                             (line  232)
* petrov:                                Functions and Variables for ctensor.
                                                             (line  530)
* pfeformat:                             Functions and Variables for Display.
                                                             (line  497)
* phi:                                   Functions and Variables for Constants.
                                                             (line   49)
* phiresolution:                         Visualization with VTK.
                                                             (line  259)
* pi:                                    Functions and Variables for Constants.
                                                             (line  104)
* pickapart:                             Functions and Variables for Expressions.
                                                             (line  800)
* picturep:                              Functions and Variables for pictures.
                                                             (line   74)
* picture_equalp:                        Functions and Variables for pictures.
                                                             (line   71)
* piece:                                 Functions and Variables for Expressions.
                                                             (line  885)
* piechart:                              Functions and Variables for statistical graphs.
                                                             (line  292)
* piechart_description:                  Functions and Variables for statistical graphs.
                                                             (line  336)
* pivot_count_sx:                        Functions and Variables for simplex.
                                                             (line  103)
* pivot_max_sx:                          Functions and Variables for simplex.
                                                             (line  108)
* planar_embedding:                      Functions and Variables for graphs.
                                                             (line  905)
* playback:                              Functions and Variables for Command Line.
                                                             (line  478)
* plog:                                  Root Exponential and Logarithmic Functions.
                                                             (line  281)
* plot2d:                                Functions and Variables for Plotting.
                                                             (line  196)
* plot3d:                                Functions and Variables for Plotting.
                                                             (line  336)
* plotdf:                                Functions for numerical solution of differential equations.
                                                             (line    6)
* ploteq:                                Functions for numerical solution of differential equations.
                                                             (line  183)
* plot_format:                           Plotting Options.   (line  184)
* plot_options:                          Functions and Variables for Plotting.
                                                             (line  435)
* plot_realpart:                         Plotting Options.   (line  193)
* plsquares:                             Functions and Variables for lsquares.
                                                             (line  383)
* png_file:                              Plotting Options.   (line  230)
* pochhammer:                            Functions and Variables for orthogonal polynomials.
                                                             (line  124)
* pochhammer_max_index:                  Functions and Variables for orthogonal polynomials.
                                                             (line  155)
* points:                                Visualization with VTK.
                                                             (line  268)
* points <1>:                            Functions and Variables for draw.
                                                             (line 3248)
* pointsize:                             Visualization with VTK.
                                                             (line  275)
* points_joined:                         Functions and Variables for draw.
                                                             (line 1664)
* point_size:                            Functions and Variables for draw.
                                                             (line 1601)
* point_type:                            Plotting Options.   (line  206)
* point_type <1>:                        Functions and Variables for draw.
                                                             (line 1622)
* poisdiff:                              Functions and Variables for Poisson series.
                                                             (line   17)
* poisexpt:                              Functions and Variables for Poisson series.
                                                             (line   22)
* poisint:                               Functions and Variables for Poisson series.
                                                             (line   27)
* poislim:                               Functions and Variables for Poisson series.
                                                             (line   33)
* poismap:                               Functions and Variables for Poisson series.
                                                             (line   41)
* poisplus:                              Functions and Variables for Poisson series.
                                                             (line   48)
* poissimp:                              Functions and Variables for Poisson series.
                                                             (line   52)
* poisson:                               Functions and Variables for Poisson series.
                                                             (line   57)
* poissubst:                             Functions and Variables for Poisson series.
                                                             (line   62)
* poistimes:                             Functions and Variables for Poisson series.
                                                             (line   82)
* poistrim:                              Functions and Variables for Poisson series.
                                                             (line   86)
* polar:                                 Functions and Variables for draw.
                                                             (line 3412)
* polarform:                             Functions for Complex Numbers.
                                                             (line  139)
* polartorect:                           Functions and Variables for fast Fourier transform.
                                                             (line    6)
* polar_to_xy:                           Functions and Variables for Plotting.
                                                             (line  189)
* polydecomp:                            Functions and Variables for Polynomials.
                                                             (line  782)
* polyfactor:                            Functions and Variables for Equations.
                                                             (line  604)
* polygon:                               Functions and Variables for draw.
                                                             (line 3436)
* polymod:                               Functions and Variables for Polynomials.
                                                             (line  834)
* polynome2ele:                          Functions and Variables for Symmetries.
                                                             (line  513)
* polynomialp:                           Functions and Variables for linearalgebra.
                                                             (line  523)
* polytocompanion:                       Functions and Variables for linearalgebra.
                                                             (line  562)
* poly_add:                              Functions and Variables for grobner.
                                                             (line   83)
* poly_buchberger:                       Functions and Variables for grobner.
                                                             (line  191)
* poly_buchberger_criterion:             Functions and Variables for grobner.
                                                             (line  185)
* poly_coefficient_ring:                 Functions and Variables for grobner.
                                                             (line   16)
* poly_colon_ideal:                      Functions and Variables for grobner.
                                                             (line  241)
* poly_content:                          Functions and Variables for grobner.
                                                             (line  158)
* poly_depends_p:                        Functions and Variables for grobner.
                                                             (line  231)
* poly_elimination_ideal:                Functions and Variables for grobner.
                                                             (line  235)
* poly_elimination_order:                Functions and Variables for grobner.
                                                             (line   36)
* poly_exact_divide:                     Functions and Variables for grobner.
                                                             (line  176)
* poly_expand:                           Functions and Variables for grobner.
                                                             (line  122)
* poly_expt:                             Functions and Variables for grobner.
                                                             (line  151)
* poly_gcd:                              Functions and Variables for grobner.
                                                             (line  257)
* poly_grobner:                          Functions and Variables for grobner.
                                                             (line  223)
* poly_grobner_algorithm:                Functions and Variables for grobner.
                                                             (line   58)
* poly_grobner_debug:                    Functions and Variables for grobner.
                                                             (line   53)
* poly_grobner_equal:                    Functions and Variables for grobner.
                                                             (line  275)
* poly_grobner_member:                   Functions and Variables for grobner.
                                                             (line  294)
* poly_grobner_subsetp:                  Functions and Variables for grobner.
                                                             (line  287)
* poly_ideal_intersection:               Functions and Variables for grobner.
                                                             (line  249)
* poly_ideal_polysaturation:             Functions and Variables for grobner.
                                                             (line  334)
* poly_ideal_polysaturation1:            Functions and Variables for grobner.
                                                             (line  323)
* poly_ideal_saturation:                 Functions and Variables for grobner.
                                                             (line  313)
* poly_ideal_saturation1:                Functions and Variables for grobner.
                                                             (line  304)
* poly_lcm:                              Functions and Variables for grobner.
                                                             (line  254)
* poly_minimization:                     Functions and Variables for grobner.
                                                             (line  212)
* poly_monomial_order:                   Functions and Variables for grobner.
                                                             (line    9)
* poly_multiply:                         Functions and Variables for grobner.
                                                             (line   97)
* poly_normalize:                        Functions and Variables for grobner.
                                                             (line  114)
* poly_normalize_list:                   Functions and Variables for grobner.
                                                             (line  218)
* poly_normal_form:                      Functions and Variables for grobner.
                                                             (line  181)
* poly_polysaturation_extension:         Functions and Variables for grobner.
                                                             (line  347)
* poly_primary_elimination_order:        Functions and Variables for grobner.
                                                             (line   24)
* poly_primitive_part:                   Functions and Variables for grobner.
                                                             (line  107)
* poly_pseudo_divide:                    Functions and Variables for grobner.
                                                             (line  164)
* poly_reduced_grobner:                  Functions and Variables for grobner.
                                                             (line  227)
* poly_reduction:                        Functions and Variables for grobner.
                                                             (line  207)
* poly_return_term_list:                 Functions and Variables for grobner.
                                                             (line   46)
* poly_saturation_extension:             Functions and Variables for grobner.
                                                             (line  342)
* poly_secondary_elimination_order:      Functions and Variables for grobner.
                                                             (line   30)
* poly_subtract:                         Functions and Variables for grobner.
                                                             (line   90)
* poly_s_polynomial:                     Functions and Variables for grobner.
                                                             (line  103)
* poly_top_reduction_only:               Functions and Variables for grobner.
                                                             (line   68)
* pop:                                   Functions and Variables for Lists.
                                                             (line  404)
* posfun:                                Functions and Variables for Properties.
                                                             (line  440)
* position:                              Visualization with VTK.
                                                             (line  281)
* postfix:                               User defined operators.
                                                             (line  236)
* potential:                             Functions and Variables for Integration.
                                                             (line  505)
* powerdisp:                             Functions and Variables for Display.
                                                             (line  521)
* powerseries:                           Functions and Variables for Series.
                                                             (line  255)
* powerset:                              Functions and Variables for Sets.
                                                             (line  761)
* power_mod:                             Functions and Variables for Number Theory.
                                                             (line  457)
* pred:                                  Functions and Variables for Evaluation.
                                                             (line  608)
* prederror:                             Functions and Variables for Program Flow.
                                                             (line  521)
* prefix:                                User defined operators.
                                                             (line  248)
* Previous input:                        Functions and Variables for Command Line.
                                                             (line   47)
* Previous output:                       Functions and Variables for Command Line.
                                                             (line   92)
* Previous result in compound expression: Functions and Variables for Command Line.
                                                             (line  106)
* prev_prime:                            Functions and Variables for Number Theory.
                                                             (line  494)
* primep:                                Functions and Variables for Number Theory.
                                                             (line  472)
* primep_number_of_tests:                Functions and Variables for Number Theory.
                                                             (line  489)
* principal_components:                  Functions and Variables for descriptive statistics.
                                                             (line  739)
* print:                                 Functions and Variables for Display.
                                                             (line  545)
* printf:                                Functions and Variables for input and output.
                                                             (line  114)
* printfile:                             Functions and Variables for File Input and Output.
                                                             (line  331)
* printpois:                             Functions and Variables for Poisson series.
                                                             (line   94)
* printprops:                            Functions and Variables for Properties.
                                                             (line  447)
* print_graph:                           Functions and Variables for graphs.
                                                             (line  921)
* prodrac:                               Functions and Variables for Symmetries.
                                                             (line  525)
* product:                               Functions and Variables for Sums and Products.
                                                             (line   47)
* product_use_gamma:                     Functions and Variables for solve_rec.
                                                             (line  172)
* program:                               Functions and Variables for graphs.
                                                             (line 1523)
* programmode:                           Functions and Variables for Equations.
                                                             (line  614)
* promote_float_to_bigfloat:             Functions and Variables for Numbers.
                                                             (line  251)
* prompt:                                Functions and Variables for Command Line.
                                                             (line  529)
* properties:                            Functions and Variables for Properties.
                                                             (line  459)
* proportional_axes:                     Functions and Variables for draw.
                                                             (line 1695)
* props:                                 Functions and Variables for Properties.
                                                             (line  464)
* propvars:                              Functions and Variables for Properties.
                                                             (line  474)
* psexpand:                              Functions and Variables for Series.
                                                             (line  300)
* psi:                                   Gamma and factorial Functions.
                                                             (line  712)
* psi <1>:                               Functions and Variables for ctensor.
                                                             (line  508)
* psubst:                                Functions and Variables for Expressions.
                                                             (line  891)
* ps_file:                               Plotting Options.   (line  243)
* ptriangularize:                        Functions and Variables for linearalgebra.
                                                             (line  570)
* pui:                                   Functions and Variables for Symmetries.
                                                             (line  116)
* pui2comp:                              Functions and Variables for Symmetries.
                                                             (line  142)
* pui2ele:                               Functions and Variables for Symmetries.
                                                             (line  168)
* pui2polynome:                          Functions and Variables for Symmetries.
                                                             (line  532)
* puireduc:                              Functions and Variables for Symmetries.
                                                             (line  177)
* pui_direct:                            Functions and Variables for Symmetries.
                                                             (line  399)
* push:                                  Functions and Variables for Lists.
                                                             (line  411)
* put:                                   Functions and Variables for Properties.
                                                             (line  480)
* pv:                                    Functions and Variables for finance.
                                                             (line   29)
* qput:                                  Functions and Variables for Properties.
                                                             (line  507)
* qrange:                                Functions and Variables for descriptive statistics.
                                                             (line  289)
* qty:                                   Functions and Variables for ezunits.
                                                             (line  359)
* quadrilateral:                         Functions and Variables for draw.
                                                             (line 3462)
* quad_control:                          Functions and Variables for QUADPACK.
                                                             (line  617)
* quad_qag:                              Functions and Variables for QUADPACK.
                                                             (line    6)
* quad_qagi:                             Functions and Variables for QUADPACK.
                                                             (line  147)
* quad_qagp:                             Functions and Variables for QUADPACK.
                                                             (line  543)
* quad_qags:                             Functions and Variables for QUADPACK.
                                                             (line   80)
* quad_qawc:                             Functions and Variables for QUADPACK.
                                                             (line  221)
* quad_qawf:                             Functions and Variables for QUADPACK.
                                                             (line  304)
* quad_qawo:                             Functions and Variables for QUADPACK.
                                                             (line  381)
* quad_qaws:                             Functions and Variables for QUADPACK.
                                                             (line  461)
* quantile:                              Functions and Variables for descriptive statistics.
                                                             (line  243)
* quantile_bernoulli:                    Functions and Variables for discrete distributions.
                                                             (line  235)
* quantile_beta:                         Functions and Variables for continuous distributions.
                                                             (line  835)
* quantile_binomial:                     Functions and Variables for discrete distributions.
                                                             (line  113)
* quantile_cauchy:                       Functions and Variables for continuous distributions.
                                                             (line 1316)
* quantile_chi2:                         Functions and Variables for continuous distributions.
                                                             (line  288)
* quantile_continuous_uniform:           Functions and Variables for continuous distributions.
                                                             (line  886)
* quantile_discrete_uniform:             Functions and Variables for discrete distributions.
                                                             (line  390)
* quantile_exp:                          Functions and Variables for continuous distributions.
                                                             (line  566)
* quantile_f:                            Functions and Variables for continuous distributions.
                                                             (line  474)
* quantile_gamma:                        Functions and Variables for continuous distributions.
                                                             (line  770)
* quantile_general_finite_discrete:      Functions and Variables for discrete distributions.
                                                             (line   44)
* quantile_geometric:                    Functions and Variables for discrete distributions.
                                                             (line  340)
* quantile_gumbel:                       Functions and Variables for continuous distributions.
                                                             (line 1343)
* quantile_hypergeometric:               Functions and Variables for discrete distributions.
                                                             (line  453)
* quantile_laplace:                      Functions and Variables for continuous distributions.
                                                             (line 1266)
* quantile_logistic:                     Functions and Variables for continuous distributions.
                                                             (line  939)
* quantile_lognormal:                    Functions and Variables for continuous distributions.
                                                             (line  705)
* quantile_negative_binomial:            Functions and Variables for discrete distributions.
                                                             (line  521)
* quantile_noncentral_chi2:              Functions and Variables for continuous distributions.
                                                             (line  414)
* quantile_noncentral_student_t:         Functions and Variables for continuous distributions.
                                                             (line  187)
* quantile_normal:                       Functions and Variables for continuous distributions.
                                                             (line   26)
* quantile_pareto:                       Functions and Variables for continuous distributions.
                                                             (line  989)
* quantile_poisson:                      Functions and Variables for discrete distributions.
                                                             (line  172)
* quantile_rayleigh:                     Functions and Variables for continuous distributions.
                                                             (line 1118)
* quantile_student_t:                    Functions and Variables for continuous distributions.
                                                             (line   96)
* quantile_weibull:                      Functions and Variables for continuous distributions.
                                                             (line 1040)
* quartile_skewness:                     Functions and Variables for descriptive statistics.
                                                             (line  495)
* quit:                                  Functions and Variables for Command Line.
                                                             (line  535)
* qunit:                                 Functions and Variables for Number Theory.
                                                             (line  501)
* Quote operator:                        Functions and Variables for Evaluation.
                                                             (line    7)
* Quote-quote operator:                  Functions and Variables for Evaluation.
                                                             (line  133)
* quotient:                              Functions and Variables for Polynomials.
                                                             (line  847)
* racah_v:                               Functions and Variables for clebsch_gordan.
                                                             (line   10)
* racah_w:                               Functions and Variables for clebsch_gordan.
                                                             (line   15)
* radcan:                                Functions and Variables for Simplification.
                                                             (line  614)
* radexpand:                             Functions and Variables for Simplification.
                                                             (line  643)
* radius:                                Visualization with VTK.
                                                             (line  287)
* radius <1>:                            Functions and Variables for graphs.
                                                             (line  947)
* radsubstflag:                          Functions and Variables for Polynomials.
                                                             (line 1217)
* random:                                Random Numbers.     (line   33)
* random_bernoulli:                      Functions and Variables for discrete distributions.
                                                             (line  317)
* random_beta:                           Functions and Variables for continuous distributions.
                                                             (line  863)
* random_binomial:                       Functions and Variables for discrete distributions.
                                                             (line  144)
* random_bipartite_graph:                Functions and Variables for graphs.
                                                             (line  239)
* random_cauchy:                         Functions and Variables for continuous distributions.
                                                             (line 1322)
* random_chi2:                           Functions and Variables for continuous distributions.
                                                             (line  390)
* random_continuous_uniform:             Functions and Variables for continuous distributions.
                                                             (line  916)
* random_digraph:                        Functions and Variables for graphs.
                                                             (line  243)
* random_discrete_uniform:               Functions and Variables for discrete distributions.
                                                             (line  422)
* random_exp:                            Functions and Variables for continuous distributions.
                                                             (line  674)
* random_f:                              Functions and Variables for continuous distributions.
                                                             (line  514)
* random_gamma:                          Functions and Variables for continuous distributions.
                                                             (line  799)
* random_general_finite_discrete:        Functions and Variables for discrete distributions.
                                                             (line   80)
* random_geometric:                      Functions and Variables for discrete distributions.
                                                             (line  369)
* random_graph:                          Functions and Variables for graphs.
                                                             (line  254)
* random_graph1:                         Functions and Variables for graphs.
                                                             (line  258)
* random_gumbel:                         Functions and Variables for continuous distributions.
                                                             (line 1386)
* random_hypergeometric:                 Functions and Variables for discrete distributions.
                                                             (line  490)
* random_laplace:                        Functions and Variables for continuous distributions.
                                                             (line 1295)
* random_logistic:                       Functions and Variables for continuous distributions.
                                                             (line  968)
* random_lognormal:                      Functions and Variables for continuous distributions.
                                                             (line  741)
* random_negative_binomial:              Functions and Variables for discrete distributions.
                                                             (line  553)
* random_network:                        Functions and Variables for graphs.
                                                             (line  261)
* random_noncentral_chi2:                Functions and Variables for continuous distributions.
                                                             (line  447)
* random_noncentral_student_t:           Functions and Variables for continuous distributions.
                                                             (line  234)
* random_normal:                         Functions and Variables for continuous distributions.
                                                             (line   64)
* random_pareto:                         Functions and Variables for continuous distributions.
                                                             (line 1019)
* random_permutation:                    Functions and Variables for Sets.
                                                             (line  791)
* random_poisson:                        Functions and Variables for discrete distributions.
                                                             (line  201)
* random_rayleigh:                       Functions and Variables for continuous distributions.
                                                             (line 1245)
* random_regular_graph:                  Functions and Variables for graphs.
                                                             (line  247)
* random_student_t:                      Functions and Variables for continuous distributions.
                                                             (line  131)
* random_tournament:                     Functions and Variables for graphs.
                                                             (line  274)
* random_tree:                           Functions and Variables for graphs.
                                                             (line  277)
* random_weibull:                        Functions and Variables for continuous distributions.
                                                             (line 1069)
* range:                                 Functions and Variables for descriptive statistics.
                                                             (line  227)
* rank:                                  Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1047)
* rank <1>:                              Functions and Variables for linearalgebra.
                                                             (line  591)
* rassociative:                          Functions and Variables for Simplification.
                                                             (line  662)
* rat:                                   Functions and Variables for Polynomials.
                                                             (line  857)
* ratalgdenom:                           Functions and Variables for Polynomials.
                                                             (line  911)
* ratchristof:                           Functions and Variables for ctensor.
                                                             (line 1143)
* ratcoef:                               Functions and Variables for Polynomials.
                                                             (line  919)
* ratdenom:                              Functions and Variables for Polynomials.
                                                             (line  948)
* ratdenomdivide:                        Functions and Variables for Polynomials.
                                                             (line  962)
* ratdiff:                               Functions and Variables for Polynomials.
                                                             (line 1006)
* ratdisrep:                             Functions and Variables for Polynomials.
                                                             (line 1049)
* rateinstein:                           Functions and Variables for ctensor.
                                                             (line 1147)
* ratepsilon:                            Functions and Variables for Numbers.
                                                             (line  266)
* ratexpand:                             Functions and Variables for Polynomials.
                                                             (line 1061)
* ratexpand <1>:                         Functions and Variables for Polynomials.
                                                             (line 1062)
* ratfac:                                Functions and Variables for Polynomials.
                                                             (line 1110)
* ratinterpol:                           Functions and Variables for interpol.
                                                             (line  279)
* rational:                              Functions and Variables for Properties.
                                                             (line  533)
* rational <1>:                          Package functs.     (line   30)
* rationalize:                           Functions and Variables for Numbers.
                                                             (line  273)
* ratmx:                                 Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1055)
* ratnumer:                              Functions and Variables for Polynomials.
                                                             (line 1132)
* ratnump:                               Functions and Variables for Numbers.
                                                             (line  305)
* ratp:                                  Functions and Variables for Polynomials.
                                                             (line 1146)
* ratprint:                              Functions and Variables for Polynomials.
                                                             (line 1154)
* ratriemann:                            Functions and Variables for ctensor.
                                                             (line 1154)
* ratsimp:                               Functions and Variables for Polynomials.
                                                             (line 1161)
* ratsimp <1>:                           Functions and Variables for Polynomials.
                                                             (line 1162)
* ratsimpexpons:                         Functions and Variables for Polynomials.
                                                             (line 1211)
* ratsubst:                              Functions and Variables for Polynomials.
                                                             (line 1223)
* ratvars:                               Functions and Variables for Polynomials.
                                                             (line 1261)
* ratvars <1>:                           Functions and Variables for Polynomials.
                                                             (line 1262)
* ratvars <2>:                           Functions and Variables for Polynomials.
                                                             (line 1263)
* ratvarswitch:                          Functions and Variables for Polynomials.
                                                             (line 1282)
* ratweight:                             Functions and Variables for Polynomials.
                                                             (line 1333)
* ratweights:                            Functions and Variables for Polynomials.
                                                             (line 1363)
* ratweyl:                               Functions and Variables for ctensor.
                                                             (line 1162)
* ratwtlvl:                              Functions and Variables for Polynomials.
                                                             (line 1372)
* read:                                  Functions and Variables for Command Line.
                                                             (line  545)
* readchar:                              Functions and Variables for input and output.
                                                             (line  225)
* readline:                              Functions and Variables for input and output.
                                                             (line  232)
* readonly:                              Functions and Variables for Command Line.
                                                             (line  563)
* read_array:                            Functions and Variables for plain-text input and output.
                                                             (line   28)
* read_binary_array:                     Functions and Variables for binary input and output.
                                                             (line   38)
* read_binary_list:                      Functions and Variables for binary input and output.
                                                             (line   49)
* read_binary_matrix:                    Functions and Variables for binary input and output.
                                                             (line   28)
* read_hashed_array:                     Functions and Variables for plain-text input and output.
                                                             (line   43)
* read_list:                             Functions and Variables for plain-text input and output.
                                                             (line   75)
* read_matrix:                           Functions and Variables for plain-text input and output.
                                                             (line    6)
* read_nested_list:                      Functions and Variables for plain-text input and output.
                                                             (line   60)
* read_xpm:                              Functions and Variables for pictures.
                                                             (line   78)
* real:                                  Functions and Variables for Properties.
                                                             (line  541)
* Real infinity:                         Functions and Variables for Constants.
                                                             (line   37)
* realonly:                              Functions and Variables for Equations.
                                                             (line  626)
* realpart:                              Functions for Complex Numbers.
                                                             (line  158)
* realroots:                             Functions and Variables for Equations.
                                                             (line  632)
* real_imagpart_to_conjugate:            Functions and Variables for to_poly_solve.
                                                             (line  648)
* rearray:                               Functions and Variables for Arrays.
                                                             (line  408)
* rectangle:                             Functions and Variables for draw.
                                                             (line 3494)
* rectform:                              Functions for Complex Numbers.
                                                             (line  175)
* rectform_log_if_constant:              Functions and Variables for to_poly_solve.
                                                             (line  667)
* recttopolar:                           Functions and Variables for fast Fourier transform.
                                                             (line   24)
* rediff:                                Functions and Variables for itensor.
                                                             (line  672)
* redraw:                                Functions and Variables for graphs.
                                                             (line 1494)
* reduce_consts:                         Package rducon.     (line    6)
* reduce_order:                          Functions and Variables for solve_rec.
                                                             (line    6)
* refcheck:                              Functions and Variables for Debugging.
                                                             (line   16)
* region:                                Functions and Variables for draw.
                                                             (line 3522)
* region_boundaries:                     Functions and Variables for worldmap.
                                                             (line  117)
* region_boundaries_plus:                Functions and Variables for worldmap.
                                                             (line  130)
* rem:                                   Functions and Variables for Properties.
                                                             (line  551)
* remainder:                             Functions and Variables for Polynomials.
                                                             (line 1379)
* remarray:                              Functions and Variables for Arrays.
                                                             (line  416)
* rembox:                                Functions and Variables for Expressions.
                                                             (line  913)
* remcomps:                              Functions and Variables for itensor.
                                                             (line  296)
* remcon:                                Functions and Variables for itensor.
                                                             (line  179)
* remcoord:                              Functions and Variables for itensor.
                                                             (line  775)
* remfun:                                Functions and Variables for Fourier series.
                                                             (line   11)
* remfunction:                           Functions and Variables for Function Definition.
                                                             (line 1012)
* remlet:                                Functions and Variables for Rules and Patterns.
                                                             (line  536)
* remove:                                Functions and Variables for Properties.
                                                             (line  559)
* remove_constvalue:                     Functions and Variables for ezunits.
                                                             (line  293)
* remove_dimensions:                     Functions and Variables for ezunits.
                                                             (line  514)
* remove_edge:                           Functions and Variables for graphs.
                                                             (line 1219)
* remove_fundamental_dimensions:         Functions and Variables for ezunits.
                                                             (line  520)
* remove_fundamental_units:              Functions and Variables for ezunits.
                                                             (line  552)
* remove_plot_option:                    Functions and Variables for Plotting.
                                                             (line  442)
* remove_vertex:                         Functions and Variables for graphs.
                                                             (line 1233)
* rempart:                               Package functs.     (line    6)
* remrule:                               Functions and Variables for Rules and Patterns.
                                                             (line  560)
* remsym:                                Functions and Variables for itensor.
                                                             (line  588)
* remvalue:                              Functions and Variables for Miscellaneous Options.
                                                             (line   70)
* rename:                                Functions and Variables for itensor.
                                                             (line   80)
* reset:                                 Functions and Variables for Command Line.
                                                             (line  585)
* reset_displays:                        Functions and Variables for alt-display.
                                                             (line  102)
* residue:                               Functions and Variables for Integration.
                                                             (line  518)
* resolution:                            Visualization with VTK.
                                                             (line  294)
* resolvante:                            Functions and Variables for Symmetries.
                                                             (line  559)
* resolvante_alternee1:                  Functions and Variables for Symmetries.
                                                             (line  731)
* resolvante_bipartite:                  Functions and Variables for Symmetries.
                                                             (line  740)
* resolvante_diedrale:                   Functions and Variables for Symmetries.
                                                             (line  753)
* resolvante_klein:                      Functions and Variables for Symmetries.
                                                             (line  771)
* resolvante_klein3:                     Functions and Variables for Symmetries.
                                                             (line  780)
* resolvante_produit_sym:                Functions and Variables for Symmetries.
                                                             (line  789)
* resolvante_unitaire:                   Functions and Variables for Symmetries.
                                                             (line  815)
* resolvante_vierer:                     Functions and Variables for Symmetries.
                                                             (line  824)
* rest:                                  Functions and Variables for Lists.
                                                             (line  444)
* restart:                               Visualization with VTK.
                                                             (line   91)
* resultant:                             Functions and Variables for Polynomials.
                                                             (line 1428)
* resultant <1>:                         Functions and Variables for Polynomials.
                                                             (line 1390)
* return:                                Functions and Variables for Program Flow.
                                                             (line  534)
* reveal:                                Functions and Variables for Expressions.
                                                             (line  982)
* reverse:                               Functions and Variables for Lists.
                                                             (line  469)
* revert:                                Functions and Variables for Series.
                                                             (line  313)
* revert2:                               Functions and Variables for Series.
                                                             (line  314)
* rgb2level:                             Functions and Variables for pictures.
                                                             (line   81)
* rhs:                                   Functions and Variables for Equations.
                                                             (line  681)
* ric:                                   Functions and Variables for ctensor.
                                                             (line 1194)
* ricci:                                 Functions and Variables for ctensor.
                                                             (line  215)
* riem:                                  Functions and Variables for ctensor.
                                                             (line 1178)
* riemann:                               Functions and Variables for ctensor.
                                                             (line  253)
* rinvariant:                            Functions and Variables for ctensor.
                                                             (line  294)
* risch:                                 Functions and Variables for Integration.
                                                             (line  535)
* rk:                                    Functions for numerical solution of differential equations.
                                                             (line  209)
* rmxchar:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1074)
* rncombine:                             Functions and Variables for Miscellaneous Options.
                                                             (line   83)
* romberg:                               Functions and Variables for romberg.
                                                             (line    6)
* rombergabs:                            Functions and Variables for romberg.
                                                             (line  108)
* rombergit:                             Functions and Variables for romberg.
                                                             (line  121)
* rombergmin:                            Functions and Variables for romberg.
                                                             (line  132)
* rombergtol:                            Functions and Variables for romberg.
                                                             (line  141)
* room:                                  Functions and Variables for Runtime Environment.
                                                             (line   34)
* rootsconmode:                          Functions and Variables for Equations.
                                                             (line  723)
* rootscontract:                         Functions and Variables for Equations.
                                                             (line  729)
* rootsepsilon:                          Functions and Variables for Equations.
                                                             (line  791)
* round:                                 Functions for Numbers.
                                                             (line  268)
* row:                                   Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1069)
* rowop:                                 Functions and Variables for linearalgebra.
                                                             (line  585)
* rowswap:                               Functions and Variables for linearalgebra.
                                                             (line  602)
* rreduce:                               Functions and Variables for Sets.
                                                             (line  811)
* run_testsuite:                         Functions and Variables for Bug Detection and Reporting.
                                                             (line    6)
* run_viewer:                            Plotting Options.   (line  257)
* same_xy:                               Plotting Options.   (line  279)
* same_xyz:                              Plotting Options.   (line  285)
* save:                                  Functions and Variables for File Input and Output.
                                                             (line  344)
* savedef:                               Functions and Variables for Function Definition.
                                                             (line 1031)
* savefactors:                           Functions and Variables for Polynomials.
                                                             (line 1447)
* saving:                                Functions and Variables for finance.
                                                             (line  187)
* scalar:                                Functions and Variables for Properties.
                                                             (line  598)
* scalarmatrixp:                         Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1082)
* scalarp:                               Functions and Variables for Properties.
                                                             (line  605)
* scale:                                 Visualization with VTK.
                                                             (line  300)
* scaled_bessel_i:                       Bessel Functions.   (line  149)
* scaled_bessel_i0:                      Bessel Functions.   (line  159)
* scaled_bessel_i1:                      Bessel Functions.   (line  163)
* scalefactors:                          Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1095)
* scale_lp:                              Functions and Variables for simplex.
                                                             (line   97)
* scanmap:                               Functions and Variables for Program Flow.
                                                             (line  538)
* scatterplot:                           Functions and Variables for statistical graphs.
                                                             (line  341)
* scatterplot_description:               Functions and Variables for statistical graphs.
                                                             (line  399)
* scene:                                 Visualization with VTK.
                                                             (line   11)
* schur2comp:                            Functions and Variables for Symmetries.
                                                             (line  192)
* sconcat:                               Functions and Variables for Strings.
                                                             (line   45)
* scopy:                                 Functions and Variables for strings.
                                                             (line   90)
* scsimp:                                Functions and Variables for Simplification.
                                                             (line  668)
* scurvature:                            Functions and Variables for ctensor.
                                                             (line  231)
* sdowncase:                             Functions and Variables for strings.
                                                             (line   93)
* sec:                                   Functions and Variables for Trigonometric.
                                                             (line  227)
* sech:                                  Functions and Variables for Trigonometric.
                                                             (line  231)
* second:                                Functions and Variables for Lists.
                                                             (line  475)
* sequal:                                Functions and Variables for strings.
                                                             (line  101)
* sequalignore:                          Functions and Variables for strings.
                                                             (line  105)
* setcheck:                              Functions and Variables for Debugging.
                                                             (line   22)
* setcheckbreak:                         Functions and Variables for Debugging.
                                                             (line   51)
* setdifference:                         Functions and Variables for Sets.
                                                             (line  854)
* setelmx:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1113)
* setequalp:                             Functions and Variables for Sets.
                                                             (line  879)
* setify:                                Functions and Variables for Sets.
                                                             (line  895)
* setp:                                  Functions and Variables for Sets.
                                                             (line  912)
* setunits:                              Functions and Variables for Units.
                                                             (line    6)
* setup_autoload:                        Functions and Variables for Miscellaneous Options.
                                                             (line   99)
* setval:                                Functions and Variables for Debugging.
                                                             (line   63)
* set_alt_display:                       Functions and Variables for alt-display.
                                                             (line  106)
* set_draw_defaults:                     Functions and Variables for draw.
                                                             (line  167)
* set_edge_weight:                       Functions and Variables for graphs.
                                                             (line  955)
* set_partitions:                        Functions and Variables for Sets.
                                                             (line  931)
* set_plot_option:                       Functions and Variables for Plotting.
                                                             (line  450)
* set_prompt:                            Functions and Variables for alt-display.
                                                             (line  125)
* set_random_state:                      Random Numbers.     (line   27)
* set_tex_environment:                   Functions and Variables for TeX Output.
                                                             (line  212)
* set_tex_environment_default:           Functions and Variables for TeX Output.
                                                             (line  252)
* set_up_dot_simplifications:            Functions and Variables for Affine.
                                                             (line   37)
* set_vertex_label:                      Functions and Variables for graphs.
                                                             (line  968)
* seventh:                               Functions and Variables for Lists.
                                                             (line  480)
* sexplode:                              Functions and Variables for strings.
                                                             (line  108)
* sf:                                    Functions and Variables for atensor.
                                                             (line   94)
* sha1sum:                               Functions and Variables for strings.
                                                             (line  111)
* shortest_path:                         Functions and Variables for graphs.
                                                             (line  981)
* shortest_weighted_path:                Functions and Variables for graphs.
                                                             (line  991)
* show:                                  Functions and Variables for itensor.
                                                             (line  140)
* showcomps:                             Functions and Variables for itensor.
                                                             (line  301)
* showratvars:                           Functions and Variables for Polynomials.
                                                             (line 1455)
* showtime:                              Functions and Variables for Command Line.
                                                             (line  596)
* show_edges:                            Functions and Variables for graphs.
                                                             (line 1471)
* show_edge_color:                       Functions and Variables for graphs.
                                                             (line 1475)
* show_edge_type:                        Functions and Variables for graphs.
                                                             (line 1481)
* show_edge_width:                       Functions and Variables for graphs.
                                                             (line 1478)
* show_id:                               Functions and Variables for graphs.
                                                             (line 1401)
* show_label:                            Functions and Variables for graphs.
                                                             (line 1406)
* show_vertex_color:                     Functions and Variables for graphs.
                                                             (line 1447)
* show_vertex_size:                      Functions and Variables for graphs.
                                                             (line 1444)
* show_vertex_type:                      Functions and Variables for graphs.
                                                             (line 1439)
* show_vertices:                         Functions and Variables for graphs.
                                                             (line 1434)
* show_weight:                           Functions and Variables for graphs.
                                                             (line 1417)
* sierpinskiale:                         Definitions for IFS fractals.
                                                             (line   19)
* sierpinskimap:                         Definitions for Peano maps.
                                                             (line   19)
* sign:                                  Functions and Variables for Facts.
                                                             (line  400)
* signum:                                Functions for Numbers.
                                                             (line  277)
* similaritytransform:                   Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1121)
* simp:                                  Functions and Variables for Simplification.
                                                             (line  678)
* simplified_output:                     Functions and Variables for zeilberger.
                                                             (line  100)
* simplify_products:                     Functions and Variables for solve_rec.
                                                             (line   54)
* simplify_sum:                          Functions and Variables for solve_rec.
                                                             (line   62)
* simplode:                              Functions and Variables for strings.
                                                             (line  127)
* simpmetderiv:                          Functions and Variables for itensor.
                                                             (line  809)
* simpsum:                               Functions and Variables for Sums and Products.
                                                             (line  106)
* simp_inequality:                       Functions and Variables for to_poly_solve.
                                                             (line  691)
* simtran:                               Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1122)
* sin:                                   Functions and Variables for Trigonometric.
                                                             (line  235)
* sinh:                                  Functions and Variables for Trigonometric.
                                                             (line  239)
* sinnpiflag:                            Functions and Variables for Fourier series.
                                                             (line   59)
* sinsert:                               Functions and Variables for strings.
                                                             (line  142)
* sinvertcase:                           Functions and Variables for strings.
                                                             (line  153)
* sixth:                                 Functions and Variables for Lists.
                                                             (line  485)
* skewness:                              Functions and Variables for descriptive statistics.
                                                             (line  445)
* skewness_bernoulli:                    Functions and Variables for discrete distributions.
                                                             (line  283)
* skewness_beta:                         Functions and Variables for continuous distributions.
                                                             (line  853)
* skewness_binomial:                     Functions and Variables for discrete distributions.
                                                             (line  134)
* skewness_chi2:                         Functions and Variables for continuous distributions.
                                                             (line  354)
* skewness_continuous_uniform:           Functions and Variables for continuous distributions.
                                                             (line  906)
* skewness_discrete_uniform:             Functions and Variables for discrete distributions.
                                                             (line  412)
* skewness_exp:                          Functions and Variables for continuous distributions.
                                                             (line  640)
* skewness_f:                            Functions and Variables for continuous distributions.
                                                             (line  504)
* skewness_gamma:                        Functions and Variables for continuous distributions.
                                                             (line  789)
* skewness_general_finite_discrete:      Functions and Variables for discrete distributions.
                                                             (line   68)
* skewness_geometric:                    Functions and Variables for discrete distributions.
                                                             (line  359)
* skewness_gumbel:                       Functions and Variables for continuous distributions.
                                                             (line 1367)
* skewness_hypergeometric:               Functions and Variables for discrete distributions.
                                                             (line  478)
* skewness_laplace:                      Functions and Variables for continuous distributions.
                                                             (line 1285)
* skewness_logistic:                     Functions and Variables for continuous distributions.
                                                             (line  958)
* skewness_lognormal:                    Functions and Variables for continuous distributions.
                                                             (line  731)
* skewness_negative_binomial:            Functions and Variables for discrete distributions.
                                                             (line  543)
* skewness_noncentral_chi2:              Functions and Variables for continuous distributions.
                                                             (line  437)
* skewness_noncentral_student_t:         Functions and Variables for continuous distributions.
                                                             (line  222)
* skewness_normal:                       Functions and Variables for continuous distributions.
                                                             (line   54)
* skewness_pareto:                       Functions and Variables for continuous distributions.
                                                             (line 1009)
* skewness_poisson:                      Functions and Variables for discrete distributions.
                                                             (line  191)
* skewness_rayleigh:                     Functions and Variables for continuous distributions.
                                                             (line 1197)
* skewness_student_t:                    Functions and Variables for continuous distributions.
                                                             (line  121)
* skewness_weibull:                      Functions and Variables for continuous distributions.
                                                             (line 1059)
* slength:                               Functions and Variables for strings.
                                                             (line  165)
* smake:                                 Functions and Variables for strings.
                                                             (line  168)
* small_rhombicosidodecahedron_graph:    Functions and Variables for graphs.
                                                             (line  280)
* small_rhombicuboctahedron_graph:       Functions and Variables for graphs.
                                                             (line  283)
* smax:                                  Functions and Variables for descriptive statistics.
                                                             (line  209)
* smin:                                  Functions and Variables for descriptive statistics.
                                                             (line  191)
* smismatch:                             Functions and Variables for strings.
                                                             (line  174)
* snowmap:                               Definitions for Koch snowflakes.
                                                             (line    6)
* snub_cube_graph:                       Functions and Variables for graphs.
                                                             (line  286)
* snub_dodecahedron_graph:               Functions and Variables for graphs.
                                                             (line  289)
* solve:                                 Functions and Variables for Equations.
                                                             (line  797)
* solvedecomposes:                       Functions and Variables for Equations.
                                                             (line  956)
* solveexplicit:                         Functions and Variables for Equations.
                                                             (line  962)
* solvefactors:                          Functions and Variables for Equations.
                                                             (line  969)
* solvenullwarn:                         Functions and Variables for Equations.
                                                             (line  976)
* solveradcan:                           Functions and Variables for Equations.
                                                             (line  984)
* solvetrigwarn:                         Functions and Variables for Equations.
                                                             (line  991)
* solve_rec:                             Functions and Variables for solve_rec.
                                                             (line   85)
* solve_rec_rat:                         Functions and Variables for solve_rec.
                                                             (line  149)
* some:                                  Functions and Variables for Sets.
                                                             (line  982)
* somrac:                                Functions and Variables for Symmetries.
                                                             (line  549)
* sort:                                  Functions and Variables for Lists.
                                                             (line  490)
* space:                                 Functions and Variables for characters.
                                                             (line   77)
* sparse:                                Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1147)
* sparse6_decode:                        Functions and Variables for graphs.
                                                             (line 1267)
* sparse6_encode:                        Functions and Variables for graphs.
                                                             (line 1272)
* sparse6_export:                        Functions and Variables for graphs.
                                                             (line 1277)
* sparse6_import:                        Functions and Variables for graphs.
                                                             (line 1282)
* specint:                               Functions and Variables for Special Functions.
                                                             (line    6)
* sphere:                                Visualization with VTK.
                                                             (line  162)
* spherical:                             Functions and Variables for draw.
                                                             (line 3543)
* spherical_bessel_j:                    Functions and Variables for orthogonal polynomials.
                                                             (line  171)
* spherical_bessel_y:                    Functions and Variables for orthogonal polynomials.
                                                             (line  177)
* spherical_hankel1:                     Functions and Variables for orthogonal polynomials.
                                                             (line  183)
* spherical_hankel2:                     Functions and Variables for orthogonal polynomials.
                                                             (line  188)
* spherical_harmonic:                    Functions and Variables for orthogonal polynomials.
                                                             (line  193)
* spherical_to_xyz:                      Functions and Variables for Plotting.
                                                             (line  479)
* splice:                                Macros.             (line  177)
* split:                                 Functions and Variables for strings.
                                                             (line  186)
* sposition:                             Functions and Variables for strings.
                                                             (line  204)
* spring_embedding_depth:                Functions and Variables for graphs.
                                                             (line 1510)
* sprint:                                Functions and Variables for input and output.
                                                             (line  237)
* sqfr:                                  Functions and Variables for Polynomials.
                                                             (line 1462)
* sqrt:                                  Root Exponential and Logarithmic Functions.
                                                             (line  286)
* sqrtdenest:                            Package sqdnst.     (line    6)
* sqrtdispflag:                          Functions and Variables for Display.
                                                             (line  581)
* sremove:                               Functions and Variables for strings.
                                                             (line  209)
* sremovefirst:                          Functions and Variables for strings.
                                                             (line  226)
* sreverse:                              Functions and Variables for strings.
                                                             (line  235)
* ssearch:                               Functions and Variables for strings.
                                                             (line  239)
* ssort:                                 Functions and Variables for strings.
                                                             (line  254)
* sstatus:                               Functions and Variables for Runtime Environment.
                                                             (line   47)
* ssubst:                                Functions and Variables for strings.
                                                             (line  270)
* ssubstfirst:                           Functions and Variables for strings.
                                                             (line  288)
* staircase:                             Graphical analysis of discrete dynamical systems.
                                                             (line  125)
* standardize:                           Functions and Variables for data manipulation.
                                                             (line  120)
* standardize_inverse_trig:              Functions and Variables for to_poly_solve.
                                                             (line  715)
* stardisp:                              Functions and Variables for Display.
                                                             (line  587)
* starplot:                              Functions and Variables for statistical graphs.
                                                             (line  405)
* starplot_description:                  Functions and Variables for statistical graphs.
                                                             (line  465)
* startphi:                              Visualization with VTK.
                                                             (line  310)
* starttheta:                            Visualization with VTK.
                                                             (line  321)
* stats_numer:                           Functions and Variables for stats.
                                                             (line    6)
* status:                                Functions and Variables for Runtime Environment.
                                                             (line   58)
* std:                                   Functions and Variables for descriptive statistics.
                                                             (line   81)
* std1:                                  Functions and Variables for descriptive statistics.
                                                             (line  101)
* std_bernoulli:                         Functions and Variables for discrete distributions.
                                                             (line  268)
* std_beta:                              Functions and Variables for continuous distributions.
                                                             (line  849)
* std_binomial:                          Functions and Variables for discrete distributions.
                                                             (line  129)
* std_chi2:                              Functions and Variables for continuous distributions.
                                                             (line  338)
* std_continuous_uniform:                Functions and Variables for continuous distributions.
                                                             (line  901)
* std_discrete_uniform:                  Functions and Variables for discrete distributions.
                                                             (line  407)
* std_exp:                               Functions and Variables for continuous distributions.
                                                             (line  621)
* std_f:                                 Functions and Variables for continuous distributions.
                                                             (line  499)
* std_gamma:                             Functions and Variables for continuous distributions.
                                                             (line  784)
* std_general_finite_discrete:           Functions and Variables for discrete distributions.
                                                             (line   62)
* std_geometric:                         Functions and Variables for discrete distributions.
                                                             (line  354)
* std_gumbel:                            Functions and Variables for continuous distributions.
                                                             (line 1362)
* std_hypergeometric:                    Functions and Variables for discrete distributions.
                                                             (line  472)
* std_laplace:                           Functions and Variables for continuous distributions.
                                                             (line 1280)
* std_logistic:                          Functions and Variables for continuous distributions.
                                                             (line  953)
* std_lognormal:                         Functions and Variables for continuous distributions.
                                                             (line  726)
* std_negative_binomial:                 Functions and Variables for discrete distributions.
                                                             (line  538)
* std_noncentral_chi2:                   Functions and Variables for continuous distributions.
                                                             (line  432)
* std_noncentral_student_t:              Functions and Variables for continuous distributions.
                                                             (line  216)
* std_normal:                            Functions and Variables for continuous distributions.
                                                             (line   49)
* std_pareto:                            Functions and Variables for continuous distributions.
                                                             (line 1004)
* std_poisson:                           Functions and Variables for discrete distributions.
                                                             (line  186)
* std_rayleigh:                          Functions and Variables for continuous distributions.
                                                             (line 1176)
* std_student_t:                         Functions and Variables for continuous distributions.
                                                             (line  116)
* std_weibull:                           Functions and Variables for continuous distributions.
                                                             (line 1054)
* stemplot:                              Functions and Variables for statistical graphs.
                                                             (line  470)
* stirling:                              Functions and Variables for stirling.
                                                             (line    6)
* stirling1:                             Functions and Variables for Sets.
                                                             (line 1054)
* stirling2:                             Functions and Variables for Sets.
                                                             (line 1090)
* strim:                                 Functions and Variables for strings.
                                                             (line  297)
* striml:                                Functions and Variables for strings.
                                                             (line  307)
* strimr:                                Functions and Variables for strings.
                                                             (line  310)
* string:                                Functions and Variables for Strings.
                                                             (line   53)
* stringdisp:                            Functions and Variables for Strings.
                                                             (line   61)
* stringout:                             Functions and Variables for File Input and Output.
                                                             (line  401)
* stringp:                               Functions and Variables for strings.
                                                             (line  313)
* strong_components:                     Functions and Variables for graphs.
                                                             (line 1007)
* structures:                            Functions and Variables for Structures.
                                                             (line    6)
* struve_h:                              Struve Functions.   (line    9)
* struve_l:                              Struve Functions.   (line   12)
* style:                                 Plotting Options.   (line  290)
* sublis:                                Functions and Variables for Expressions.
                                                             (line 1040)
* sublist:                               Functions and Variables for Lists.
                                                             (line  624)
* sublist_indices:                       Functions and Variables for Lists.
                                                             (line  636)
* sublis_apply_lambda:                   Functions and Variables for Expressions.
                                                             (line 1056)
* submatrix:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1154)
* subnumsimp:                            Functions and Variables for Expressions.
                                                             (line 1063)
* subsample:                             Functions and Variables for data manipulation.
                                                             (line  129)
* Subscript operator:                    Functions and Variables for Lists.
                                                             (line    6)
* subset:                                Functions and Variables for Sets.
                                                             (line 1130)
* subsetp:                               Functions and Variables for Sets.
                                                             (line 1149)
* subst:                                 Functions and Variables for Expressions.
                                                             (line 1081)
* substinpart:                           Functions and Variables for Expressions.
                                                             (line 1132)
* substpart:                             Functions and Variables for Expressions.
                                                             (line 1188)
* substring:                             Functions and Variables for strings.
                                                             (line  316)
* subst_parallel:                        Functions and Variables for to_poly_solve.
                                                             (line  728)
* Subtraction:                           Arithmetic operators.
                                                             (line    6)
* subvar:                                Functions and Variables for Arrays.
                                                             (line  433)
* subvarp:                               Functions and Variables for Arrays.
                                                             (line  458)
* sum:                                   Functions and Variables for Sums and Products.
                                                             (line  115)
* sumcontract:                           Functions and Variables for Sums and Products.
                                                             (line  216)
* sumexpand:                             Functions and Variables for Sums and Products.
                                                             (line  229)
* summand_to_rec:                        Functions and Variables for solve_rec.
                                                             (line  180)
* sumsplitfact:                          Combinatorial Functions.
                                                             (line  193)
* supcase:                               Functions and Variables for strings.
                                                             (line  331)
* supcontext:                            Functions and Variables for Facts.
                                                             (line  408)
* surface:                               Visualization with VTK.
                                                             (line  332)
* surface_hide:                          Functions and Variables for draw.
                                                             (line 1733)
* svg_file:                              Plotting Options.   (line  326)
* symbolp:                               Functions and Variables for Expressions.
                                                             (line 1216)
* symmdifference:                        Functions and Variables for Sets.
                                                             (line 1162)
* symmetric:                             Functions and Variables for Simplification.
                                                             (line  716)
* symmetricp:                            Functions and Variables for ctensor.
                                                             (line  832)
* system:                                Functions and Variables for Runtime Environment.
                                                             (line   83)
* t:                                     Plotting Options.   (line  339)
* tab:                                   Functions and Variables for characters.
                                                             (line   80)
* take_channel:                          Functions and Variables for pictures.
                                                             (line   85)
* take_inference:                        Functions and Variables for inference_result.
                                                             (line   73)
* tan:                                   Functions and Variables for Trigonometric.
                                                             (line  243)
* tanh:                                  Functions and Variables for Trigonometric.
                                                             (line  247)
* taylor:                                Functions and Variables for Series.
                                                             (line  355)
* taylordepth:                           Functions and Variables for Series.
                                                             (line  514)
* taylorinfo:                            Functions and Variables for Series.
                                                             (line  521)
* taylorp:                               Functions and Variables for Series.
                                                             (line  546)
* taylor_logexpand:                      Functions and Variables for Series.
                                                             (line  550)
* taylor_order_coefficients:             Functions and Variables for Series.
                                                             (line  566)
* taylor_simplifier:                     Functions and Variables for Series.
                                                             (line  575)
* taylor_truncate_polynomials:           Functions and Variables for Series.
                                                             (line  580)
* taytorat:                              Functions and Variables for Series.
                                                             (line  589)
* tcl_output:                            Functions and Variables for Miscellaneous Options.
                                                             (line  133)
* tcontract:                             Functions and Variables for Symmetries.
                                                             (line  260)
* tellrat:                               Functions and Variables for Polynomials.
                                                             (line 1479)
* tellsimp:                              Functions and Variables for Rules and Patterns.
                                                             (line  607)
* tellsimpafter:                         Functions and Variables for Rules and Patterns.
                                                             (line  665)
* tensorkill:                            Functions and Variables for ctensor.
                                                             (line 1260)
* tentex:                                Functions and Variables for itensor.
                                                             (line 1565)
* tenth:                                 Functions and Variables for Lists.
                                                             (line  674)
* terminal:                              Functions and Variables for draw.
                                                             (line 1750)
* terminal <1>:                          Functions and Variables for graphs.
                                                             (line 1516)
* testsuite_files:                       Functions and Variables for Bug Detection and Reporting.
                                                             (line   45)
* test_mean:                             Functions and Variables for stats.
                                                             (line   13)
* test_means_difference:                 Functions and Variables for stats.
                                                             (line  122)
* test_normality:                        Functions and Variables for stats.
                                                             (line  781)
* test_proportion:                       Functions and Variables for stats.
                                                             (line  382)
* test_proportions_difference:           Functions and Variables for stats.
                                                             (line  482)
* test_rank_sum:                         Functions and Variables for stats.
                                                             (line  709)
* test_sign:                             Functions and Variables for stats.
                                                             (line  574)
* test_signed_rank:                      Functions and Variables for stats.
                                                             (line  629)
* test_variance:                         Functions and Variables for stats.
                                                             (line  238)
* test_variance_ratio:                   Functions and Variables for stats.
                                                             (line  310)
* tex:                                   Functions and Variables for TeX Output.
                                                             (line    6)
* tex1:                                  Functions and Variables for TeX Output.
                                                             (line   66)
* texput:                                Functions and Variables for TeX Output.
                                                             (line   77)
* tex_display:                           Functions and Variables for alt-display.
                                                             (line   66)
* thetaresolution:                       Visualization with VTK.
                                                             (line  339)
* third:                                 Functions and Variables for Lists.
                                                             (line  679)
* throw:                                 Functions and Variables for Program Flow.
                                                             (line  580)
* time:                                  Functions and Variables for Runtime Environment.
                                                             (line  104)
* timedate:                              Functions and Variables for Runtime Environment.
                                                             (line  115)
* timer:                                 Functions and Variables for Debugging.
                                                             (line   71)
* timer_devalue:                         Functions and Variables for Debugging.
                                                             (line  114)
* timer_info:                            Functions and Variables for Debugging.
                                                             (line  125)
* title:                                 Plotting Options.   (line  343)
* title <1>:                             Functions and Variables for draw.
                                                             (line 1831)
* tldefint:                              Functions and Variables for Integration.
                                                             (line  558)
* tlimit:                                Functions and Variables for Limits.
                                                             (line   65)
* tlimswitch:                            Functions and Variables for Limits.
                                                             (line   73)
* todd_coxeter:                          Functions and Variables for Groups.
                                                             (line    6)
* toeplitz:                              Functions and Variables for linearalgebra.
                                                             (line  607)
* tokens:                                Functions and Variables for strings.
                                                             (line  344)
* topological_sort:                      Functions and Variables for graphs.
                                                             (line 1018)
* totaldisrep:                           Functions and Variables for Polynomials.
                                                             (line 1533)
* totalfourier:                          Functions and Variables for Fourier series.
                                                             (line   85)
* totient:                               Functions and Variables for Number Theory.
                                                             (line  513)
* to_lisp:                               Functions and Variables for Command Line.
                                                             (line  607)
* to_poly:                               Functions and Variables for to_poly_solve.
                                                             (line  783)
* to_poly_solve:                         Functions and Variables for to_poly_solve.
                                                             (line  842)
* tpartpol:                              Functions and Variables for Symmetries.
                                                             (line  265)
* tr:                                    Functions and Variables for ctensor.
                                                             (line 1242)
* trace:                                 Functions and Variables for Debugging.
                                                             (line  145)
* tracematrix:                           Package functs.     (line   25)
* trace_options:                         Functions and Variables for Debugging.
                                                             (line  173)
* track:                                 Visualization with VTK.
                                                             (line  348)
* transcompile:                          Functions and Variables for Function Definition.
                                                             (line 1042)
* transform:                             Functions and Variables for draw.
                                                             (line 1846)
* transform_sample:                      Functions and Variables for data manipulation.
                                                             (line  244)
* transform_xy:                          Plotting Options.   (line  347)
* translate:                             Functions and Variables for Function Definition.
                                                             (line 1051)
* translate_file:                        Functions and Variables for Function Definition.
                                                             (line 1107)
* transparent:                           Functions and Variables for draw.
                                                             (line 1886)
* transpose:                             Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1162)
* transrun:                              Functions and Variables for Function Definition.
                                                             (line 1166)
* treefale:                              Definitions for IFS fractals.
                                                             (line   31)
* tree_reduce:                           Functions and Variables for Sets.
                                                             (line 1190)
* treillis:                              Functions and Variables for Symmetries.
                                                             (line  469)
* treinat:                               Functions and Variables for Symmetries.
                                                             (line  477)
* triangle:                              Functions and Variables for draw.
                                                             (line 3564)
* triangularize:                         Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1175)
* trigexpand:                            Functions and Variables for Trigonometric.
                                                             (line  251)
* trigexpandplus:                        Functions and Variables for Trigonometric.
                                                             (line  285)
* trigexpandtimes:                       Functions and Variables for Trigonometric.
                                                             (line  293)
* triginverses:                          Functions and Variables for Trigonometric.
                                                             (line  301)
* trigrat:                               Functions and Variables for Trigonometric.
                                                             (line  350)
* trigreduce:                            Functions and Variables for Trigonometric.
                                                             (line  316)
* trigsign:                              Functions and Variables for Trigonometric.
                                                             (line  332)
* trigsimp:                              Functions and Variables for Trigonometric.
                                                             (line  339)
* trivial_solutions:                     Functions and Variables for zeilberger.
                                                             (line  125)
* true:                                  Functions and Variables for Constants.
                                                             (line  109)
* trunc:                                 Functions and Variables for Series.
                                                             (line  595)
* truncate:                              Functions for Numbers.
                                                             (line  294)
* truncated_cube_graph:                  Functions and Variables for graphs.
                                                             (line  292)
* truncated_dodecahedron_graph:          Functions and Variables for graphs.
                                                             (line  295)
* truncated_icosahedron_graph:           Functions and Variables for graphs.
                                                             (line  298)
* truncated_tetrahedron_graph:           Functions and Variables for graphs.
                                                             (line  301)
* tr_array_as_ref:                       Functions and Variables for Function Definition.
                                                             (line 1173)
* tr_bound_function_applyp:              Functions and Variables for Function Definition.
                                                             (line 1184)
* tr_file_tty_messagesp:                 Functions and Variables for Function Definition.
                                                             (line 1195)
* tr_float_can_branch_complex:           Functions and Variables for Function Definition.
                                                             (line 1204)
* tr_function_call_default:              Functions and Variables for Function Definition.
                                                             (line 1218)
* tr_numer:                              Functions and Variables for Function Definition.
                                                             (line 1231)
* tr_optimize_max_loop:                  Functions and Variables for Function Definition.
                                                             (line 1237)
* tr_semicompile:                        Functions and Variables for Function Definition.
                                                             (line 1245)
* tr_state_vars:                         Functions and Variables for Function Definition.
                                                             (line 1252)
* tr_warnings_get:                       Functions and Variables for Function Definition.
                                                             (line 1264)
* tr_warn_bad_function_calls:            Functions and Variables for Function Definition.
                                                             (line 1269)
* tr_warn_fexpr:                         Functions and Variables for Function Definition.
                                                             (line 1276)
* tr_warn_meval:                         Functions and Variables for Function Definition.
                                                             (line 1283)
* tr_warn_mode:                          Functions and Variables for Function Definition.
                                                             (line 1289)
* tr_warn_undeclared:                    Functions and Variables for Function Definition.
                                                             (line 1295)
* tr_warn_undefined_variable:            Functions and Variables for Function Definition.
                                                             (line 1301)
* tstep:                                 Visualization with VTK.
                                                             (line   98)
* ttyoff:                                Functions and Variables for Display.
                                                             (line  593)
* tube:                                  Functions and Variables for draw.
                                                             (line 3593)
* tube_extremes:                         Functions and Variables for draw.
                                                             (line 1903)
* tutte_graph:                           Functions and Variables for graphs.
                                                             (line  304)
* ueivects:                              Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1199)
* ufg:                                   Functions and Variables for ctensor.
                                                             (line 1174)
* uforget:                               Functions and Variables for Units.
                                                             (line  112)
* ug:                                    Functions and Variables for ctensor.
                                                             (line 1207)
* ultraspherical:                        Functions and Variables for orthogonal polynomials.
                                                             (line  205)
* und:                                   Functions and Variables for Constants.
                                                             (line  114)
* Undefined:                             Functions and Variables for Constants.
                                                             (line  115)
* underlying_graph:                      Functions and Variables for graphs.
                                                             (line  307)
* undiff:                                Functions and Variables for itensor.
                                                             (line  677)
* union:                                 Functions and Variables for Sets.
                                                             (line 1226)
* unique:                                Functions and Variables for Lists.
                                                             (line  660)
* uniteigenvectors:                      Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1198)
* unitp:                                 Functions and Variables for ezunits.
                                                             (line  407)
* units:                                 Functions and Variables for ezunits.
                                                             (line  298)
* unitvector:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1226)
* unit_step:                             Functions and Variables for orthogonal polynomials.
                                                             (line  198)
* unit_vectors:                          Functions and Variables for draw.
                                                             (line 1918)
* unknown:                               Functions and Variables for Predicates.
                                                             (line  182)
* unless:                                Functions and Variables for Program Flow.
                                                             (line  587)
* unorder:                               Functions and Variables for Expressions.
                                                             (line 1224)
* unsum:                                 Functions and Variables for Series.
                                                             (line  612)
* untellrat:                             Functions and Variables for Polynomials.
                                                             (line 1544)
* untimer:                               Functions and Variables for Debugging.
                                                             (line   99)
* untrace:                               Functions and Variables for Debugging.
                                                             (line  226)
* uppercasep:                            Functions and Variables for characters.
                                                             (line   83)
* uric:                                  Functions and Variables for ctensor.
                                                             (line 1198)
* uricci:                                Functions and Variables for ctensor.
                                                             (line  221)
* uriem:                                 Functions and Variables for ctensor.
                                                             (line 1190)
* uriemann:                              Functions and Variables for ctensor.
                                                             (line  289)
* usersetunits:                          Functions and Variables for Units.
                                                             (line  211)
* user_preamble:                         Functions and Variables for draw.
                                                             (line 1938)
* use_fast_arrays:                       Functions and Variables for Arrays.
                                                             (line  463)
* uvect:                                 Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1227)
* values:                                Functions and Variables for Command Line.
                                                             (line  636)
* vandermonde_matrix:                    Functions and Variables for linearalgebra.
                                                             (line  627)
* var:                                   Functions and Variables for descriptive statistics.
                                                             (line   33)
* var1:                                  Functions and Variables for descriptive statistics.
                                                             (line   55)
* var_bernoulli:                         Functions and Variables for discrete distributions.
                                                             (line  254)
* var_beta:                              Functions and Variables for continuous distributions.
                                                             (line  845)
* var_binomial:                          Functions and Variables for discrete distributions.
                                                             (line  124)
* var_chi2:                              Functions and Variables for continuous distributions.
                                                             (line  322)
* var_continuous_uniform:                Functions and Variables for continuous distributions.
                                                             (line  896)
* var_discrete_uniform:                  Functions and Variables for discrete distributions.
                                                             (line  402)
* var_exp:                               Functions and Variables for continuous distributions.
                                                             (line  601)
* var_f:                                 Functions and Variables for continuous distributions.
                                                             (line  495)
* var_gamma:                             Functions and Variables for continuous distributions.
                                                             (line  780)
* var_general_finite_discrete:           Functions and Variables for discrete distributions.
                                                             (line   56)
* var_geometric:                         Functions and Variables for discrete distributions.
                                                             (line  350)
* var_gumbel:                            Functions and Variables for continuous distributions.
                                                             (line 1358)
* var_hypergeometric:                    Functions and Variables for discrete distributions.
                                                             (line  466)
* var_laplace:                           Functions and Variables for continuous distributions.
                                                             (line 1276)
* var_logistic:                          Functions and Variables for continuous distributions.
                                                             (line  949)
* var_lognormal:                         Functions and Variables for continuous distributions.
                                                             (line  722)
* var_negative_binomial:                 Functions and Variables for discrete distributions.
                                                             (line  533)
* var_noncentral_chi2:                   Functions and Variables for continuous distributions.
                                                             (line  428)
* var_noncentral_student_t:              Functions and Variables for continuous distributions.
                                                             (line  210)
* var_normal:                            Functions and Variables for continuous distributions.
                                                             (line   44)
* var_pareto:                            Functions and Variables for continuous distributions.
                                                             (line  999)
* var_poisson:                           Functions and Variables for discrete distributions.
                                                             (line  182)
* var_rayleigh:                          Functions and Variables for continuous distributions.
                                                             (line 1155)
* var_student_t:                         Functions and Variables for continuous distributions.
                                                             (line  107)
* var_weibull:                           Functions and Variables for continuous distributions.
                                                             (line 1050)
* vector:                                Functions and Variables for draw.
                                                             (line 3616)
* vectorpotential:                       Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1236)
* vectorsimp:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1243)
* vect_cross:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1276)
* verbify:                               Functions and Variables for Expressions.
                                                             (line 1262)
* verbose:                               Functions and Variables for Series.
                                                             (line  642)
* vers:                                  Package functs.     (line  151)
* vertex_color:                          Functions and Variables for graphs.
                                                             (line 1431)
* vertex_coloring:                       Functions and Variables for graphs.
                                                             (line 1457)
* vertex_coloring <1>:                   Functions and Variables for graphs.
                                                             (line 1104)
* vertex_connectivity:                   Functions and Variables for graphs.
                                                             (line 1035)
* vertex_degree:                         Functions and Variables for graphs.
                                                             (line 1040)
* vertex_distance:                       Functions and Variables for graphs.
                                                             (line 1043)
* vertex_eccentricity:                   Functions and Variables for graphs.
                                                             (line 1055)
* vertex_in_degree:                      Functions and Variables for graphs.
                                                             (line 1065)
* vertex_out_degree:                     Functions and Variables for graphs.
                                                             (line 1084)
* vertex_partition:                      Functions and Variables for graphs.
                                                             (line 1450)
* vertex_size:                           Functions and Variables for graphs.
                                                             (line 1428)
* vertex_type:                           Functions and Variables for graphs.
                                                             (line 1422)
* vertices:                              Functions and Variables for graphs.
                                                             (line 1096)
* vertices_to_cycle:                     Functions and Variables for graphs.
                                                             (line 1539)
* vertices_to_path:                      Functions and Variables for graphs.
                                                             (line 1535)
* view:                                  Functions and Variables for draw.
                                                             (line 1961)
* warnings:                              Functions and Variables for zeilberger.
                                                             (line  112)
* Wedge product:                         Functions and Variables for itensor.
                                                             (line 1412)
* weyl:                                  Functions and Variables for ctensor.
                                                             (line 1211)
* weyl <1>:                              Functions and Variables for ctensor.
                                                             (line  303)
* wheel_graph:                           Functions and Variables for graphs.
                                                             (line  310)
* while:                                 Functions and Variables for Program Flow.
                                                             (line  586)
* width:                                 Visualization with VTK.
                                                             (line  104)
* wiener_index:                          Functions and Variables for graphs.
                                                             (line 1117)
* wigner_3j:                             Functions and Variables for clebsch_gordan.
                                                             (line   20)
* wigner_6j:                             Functions and Variables for clebsch_gordan.
                                                             (line   25)
* wigner_9j:                             Functions and Variables for clebsch_gordan.
                                                             (line   29)
* windowname:                            Visualization with VTK.
                                                             (line  110)
* windowtitle:                           Visualization with VTK.
                                                             (line  117)
* wired_surface:                         Functions and Variables for draw.
                                                             (line 1985)
* wireframe:                             Visualization with VTK.
                                                             (line  391)
* with_stdout:                           Functions and Variables for File Input and Output.
                                                             (line  448)
* writefile:                             Functions and Variables for File Input and Output.
                                                             (line  478)
* write_binary_data:                     Functions and Variables for binary input and output.
                                                             (line   64)
* write_data:                            Functions and Variables for plain-text input and output.
                                                             (line   93)
* wronskian:                             Package functs.     (line   14)
* x:                                     Plotting Options.   (line  355)
* xaxis:                                 Functions and Variables for draw.
                                                             (line 2009)
* xaxis_color:                           Functions and Variables for draw.
                                                             (line 2026)
* xaxis_secondary:                       Functions and Variables for draw.
                                                             (line 2044)
* xaxis_type:                            Functions and Variables for draw.
                                                             (line 2070)
* xaxis_width:                           Functions and Variables for draw.
                                                             (line 2088)
* xlabel:                                Plotting Options.   (line  364)
* xlabel <1>:                            Functions and Variables for draw.
                                                             (line 2106)
* xlabel_secondary:                      Functions and Variables for draw.
                                                             (line 2125)
* xlength:                               Visualization with VTK.
                                                             (line  373)
* xrange:                                Functions and Variables for draw.
                                                             (line 2146)
* xrange_secondary:                      Functions and Variables for draw.
                                                             (line 2166)
* xreduce:                               Functions and Variables for Sets.
                                                             (line 1252)
* xthru:                                 Functions and Variables for Simplification.
                                                             (line  724)
* xtics:                                 Plotting Options.   (line  374)
* xtics <1>:                             Functions and Variables for draw.
                                                             (line 2180)
* xtics_axis:                            Functions and Variables for draw.
                                                             (line 2240)
* xtics_rotate:                          Functions and Variables for draw.
                                                             (line 2250)
* xtics_rotate_secondary:                Functions and Variables for draw.
                                                             (line 2259)
* xtics_secondary:                       Functions and Variables for draw.
                                                             (line 2268)
* xtics_secondary_axis:                  Functions and Variables for draw.
                                                             (line 2276)
* xu_grid:                               Functions and Variables for draw.
                                                             (line 2286)
* xyplane:                               Functions and Variables for draw.
                                                             (line 2315)
* xy_file:                               Functions and Variables for draw.
                                                             (line 2305)
* xy_scale:                              Plotting Options.   (line  383)
* x_voxel:                               Functions and Variables for draw.
                                                             (line 2002)
* y:                                     Plotting Options.   (line  389)
* yaxis:                                 Functions and Variables for draw.
                                                             (line 2339)
* yaxis_color:                           Functions and Variables for draw.
                                                             (line 2356)
* yaxis_secondary:                       Functions and Variables for draw.
                                                             (line 2374)
* yaxis_type:                            Functions and Variables for draw.
                                                             (line 2397)
* yaxis_width:                           Functions and Variables for draw.
                                                             (line 2415)
* ylabel:                                Plotting Options.   (line  396)
* ylabel <1>:                            Functions and Variables for draw.
                                                             (line 2433)
* ylabel_secondary:                      Functions and Variables for draw.
                                                             (line 2452)
* ylength:                               Visualization with VTK.
                                                             (line  379)
* yrange:                                Functions and Variables for draw.
                                                             (line 2477)
* yrange_secondary:                      Functions and Variables for draw.
                                                             (line 2498)
* ytics:                                 Plotting Options.   (line  405)
* ytics <1>:                             Functions and Variables for draw.
                                                             (line 2524)
* ytics_axis:                            Functions and Variables for draw.
                                                             (line 2532)
* ytics_rotate:                          Functions and Variables for draw.
                                                             (line 2542)
* ytics_rotate_secondary:                Functions and Variables for draw.
                                                             (line 2551)
* ytics_secondary:                       Functions and Variables for draw.
                                                             (line 2560)
* ytics_secondary_axis:                  Functions and Variables for draw.
                                                             (line 2568)
* yv_grid:                               Functions and Variables for draw.
                                                             (line 2578)
* yx_ratio:                              Plotting Options.   (line  414)
* y_voxel:                               Functions and Variables for draw.
                                                             (line 2332)
* z:                                     Plotting Options.   (line  419)
* zaxis:                                 Functions and Variables for draw.
                                                             (line 2604)
* zaxis_color:                           Functions and Variables for draw.
                                                             (line 2623)
* zaxis_type:                            Functions and Variables for draw.
                                                             (line 2643)
* zaxis_width:                           Functions and Variables for draw.
                                                             (line 2662)
* Zeilberger:                            Functions and Variables for zeilberger.
                                                             (line   71)
* zeroa:                                 Functions and Variables for Constants.
                                                             (line  125)
* zerob:                                 Functions and Variables for Constants.
                                                             (line  142)
* zerobern:                              Functions and Variables for Number Theory.
                                                             (line  518)
* zeroequiv:                             Functions and Variables for Predicates.
                                                             (line  187)
* zerofor:                               Functions and Variables for linearalgebra.
                                                             (line  632)
* zeromatrix:                            Functions and Variables for Matrices and Linear Algebra.
                                                             (line 1283)
* zeromatrixp:                           Functions and Variables for linearalgebra.
                                                             (line  647)
* zeta:                                  Functions and Variables for Number Theory.
                                                             (line  525)
* zeta%pi:                               Functions and Variables for Number Theory.
                                                             (line  558)
* zgeev:                                 Functions and Variables for lapack.
                                                             (line  402)
* zheev:                                 Functions and Variables for lapack.
                                                             (line  408)
* zlabel:                                Plotting Options.   (line  424)
* zlabel <1>:                            Functions and Variables for draw.
                                                             (line 2681)
* zlange:                                Functions and Variables for lapack.
                                                             (line  279)
* zlength:                               Visualization with VTK.
                                                             (line  385)
* zmin:                                  Plotting Options.   (line  432)
* zn_add_table:                          Functions and Variables for Number Theory.
                                                             (line  577)
* zn_determinant:                        Functions and Variables for Number Theory.
                                                             (line  583)
* zn_invert_by_lu:                       Functions and Variables for Number Theory.
                                                             (line  611)
* zn_log:                                Functions and Variables for Number Theory.
                                                             (line  637)
* zn_mult_table:                         Functions and Variables for Number Theory.
                                                             (line  695)
* zn_order:                              Functions and Variables for Number Theory.
                                                             (line  721)
* zn_power_table:                        Functions and Variables for Number Theory.
                                                             (line  771)
* zn_primroot:                           Functions and Variables for Number Theory.
                                                             (line  805)
* zn_primroot_limit:                     Functions and Variables for Number Theory.
                                                             (line  863)
* zn_primroot_p:                         Functions and Variables for Number Theory.
                                                             (line  871)
* zn_primroot_pretest:                   Functions and Variables for Number Theory.
                                                             (line  913)
* zn_primroot_verbose:                   Functions and Variables for Number Theory.
                                                             (line  925)
* zrange:                                Functions and Variables for draw.
                                                             (line 2700)
* ztics:                                 Functions and Variables for draw.
                                                             (line 2722)
* ztics_axis:                            Functions and Variables for draw.
                                                             (line 2730)
* ztics_rotate:                          Functions and Variables for draw.
                                                             (line 2740)
* z_voxel:                               Functions and Variables for draw.
                                                             (line 2597)

